// üìä **‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á**

console.log('üí∞ **‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ BEFORE vs AFTER**\n');

const scenarios = [
  { name: "100 ‡πÇ‡∏û‡∏™‡∏ï‡πå, 500 ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", posts: 100, users: 500 },
  { name: "200 ‡πÇ‡∏û‡∏™‡∏ï‡πå, 1,000 ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", posts: 200, users: 1000 },
  { name: "300 ‡πÇ‡∏û‡∏™‡∏ï‡πå, 2,000 ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", posts: 300, users: 2000 }
];

scenarios.forEach(scenario => {
  console.log(`üìä **${scenario.name}**`);
  
  // BEFORE (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà)
  const notificationsBefore = scenario.posts * scenario.users;
  const fcmCostBefore = Math.max(0, (notificationsBefore - 100000) * 0.000050);
  
  // AFTER (‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà 30km ‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 70%)
  const effectiveUsers = Math.round(scenario.users * 0.3); // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 30%
  const notificationsAfter = scenario.posts * effectiveUsers;
  const fcmCostAfter = Math.max(0, (notificationsAfter - 100000) * 0.000050);
  
  // Firestore costs
  const firestoreReadsBefore = scenario.posts * scenario.users * 2; // 2 reads/notification
  const firestoreReadsAfter = scenario.posts * effectiveUsers * 1.5; // cache ‡∏•‡∏î 25%
  
  const firestoreCostBefore = (firestoreReadsBefore / 100000) * 0.06; // $0.06 per 100K reads
  const firestoreCostAfter = (firestoreReadsAfter / 100000) * 0.06;
  
  // Function invocations
  const functionsBefore = scenario.posts * 2; // 2 functions/post
  const functionsAfter = scenario.posts * 1.5; // batch processing ‡∏•‡∏î 25%
  
  const functionsCostBefore = (functionsBefore / 1000000) * 0.4; // $0.4 per 1M invocations
  const functionsCostAfter = (functionsAfter / 1000000) * 0.4;
  
  const totalCostBefore = (fcmCostBefore + firestoreCostBefore + functionsCostBefore) * 35; // ‡∏ö‡∏≤‡∏ó
  const totalCostAfter = (fcmCostAfter + firestoreCostAfter + functionsCostAfter) * 35;
  
  const savings = ((totalCostBefore - totalCostAfter) / totalCostBefore) * 100;
  
  console.log(`   üî¥ BEFORE: ‡∏ø${totalCostBefore.toFixed(2)}/‡∏ß‡∏±‡∏ô`);
  console.log(`   üü¢ AFTER:  ‡∏ø${totalCostAfter.toFixed(2)}/‡∏ß‡∏±‡∏ô`);
  console.log(`   üí∞ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î: ${savings.toFixed(1)}% (‡∏ø${(totalCostBefore - totalCostAfter).toFixed(2)}/‡∏ß‡∏±‡∏ô)`);
  console.log(`   üìÖ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ‡∏ø${((totalCostBefore - totalCostAfter) * 30).toFixed(2)}`);
  console.log(`   üìä ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:`);
  console.log(`      - FCM: ${notificationsBefore.toLocaleString()} ‚Üí ${notificationsAfter.toLocaleString()}`);
  console.log(`      - Firestore Reads: ${firestoreReadsBefore.toLocaleString()} ‚Üí ${firestoreReadsAfter.toLocaleString()}`);
  console.log(`      - Function Calls: ${functionsBefore.toLocaleString()} ‚Üí ${functionsAfter.toLocaleString()}\n`);
});

console.log('üöÄ **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:**');
console.log('1. ‚úÖ Geographic Filtering (‡∏•‡∏î 70% notifications)');
console.log('2. ‚úÖ Caching (‡∏•‡∏î 25% Firestore reads)');
console.log('3. ‚úÖ Batch Processing (‡∏•‡∏î 25% function calls)');
console.log('4. ‚úÖ Retry Logic ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (‡∏•‡∏î infinite loops)');
console.log('5. ‚úÖ Scheduled Functions ‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ');
console.log('6. ‚úÖ Token Management ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á');
console.log('7. ‚úÖ Field Selection (select ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)');
console.log('8. ‚úÖ Batch Size ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 100 tokens');
