const functions = require('firebase-functions');
const admin = require('firebase-admin');
const { getStorage } = require('firebase-admin/storage');

// Initialize Firebase Admin
admin.initializeApp();

/**
 * üßπ Scheduled Function: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
 * 
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
 * ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á subcollections ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Storage
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
 * 1. ‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
 * 2. ‡∏•‡∏ö comments subcollection ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * 3. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Firebase Storage
 * 4. ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
 */
exports.cleanupOldReports = functions.pubsub
  .schedule('every 24 hours')
  .timeZone('Asia/Bangkok')
  .onRun(async (context) => {
    const db = admin.firestore();
    const bucket = getStorage().bucket();
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    console.log(`üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤: ${sevenDaysAgo.toISOString()}`);

    try {
      // üîç ‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
      const snapshot = await db.collection('reports')
        .where('timestamp', '<', sevenDaysAgo)
        .get();

      console.log(`üìä ‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤ ${snapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

      if (snapshot.empty) {
        console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö');
        return null;
      }

      let deletedCount = 0;
      let errorCount = 0;

      // üîÑ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏•‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå
      for (const doc of snapshot.docs) {
        const postId = doc.id;
        const data = doc.data();
        
        try {
          console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå: ${postId}`);

          // üìù 1. ‡∏•‡∏ö comments subcollection
          await deleteSubcollection(db, `reports/${postId}/comments`);

          // üìù 2. ‡∏•‡∏ö likes subcollection (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          await deleteSubcollection(db, `reports/${postId}/likes`);

          // üìù 3. ‡∏•‡∏ö shares subcollection (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          await deleteSubcollection(db, `reports/${postId}/shares`);

          // üñºÔ∏è 4. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Storage
          if (data.imageUrl) {
            await deleteImageFromStorage(bucket, postId, data.imageUrl);
          }

          // üìÑ 5. ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
          await doc.ref.delete();

          deletedCount++;
          console.log(`‚úÖ ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

        } catch (error) {
          errorCount++;
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}:`, error);
        }
      }

      // üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      console.log(`üéâ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:`);
      console.log(`   ‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`   ‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

      return {
        success: true,
        deletedCount,
        errorCount,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:', error);
      throw error;
    }
  });

/**
 * üóÇÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö subcollection
 * @param {admin.firestore.Firestore} db - Firestore instance
 * @param {string} collectionPath - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á collection ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 */
async function deleteSubcollection(db, collectionPath) {
  try {
    const subcollectionSnapshot = await db.collection(collectionPath).get();
    
    if (subcollectionSnapshot.empty) {
      console.log(`üìÅ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô ${collectionPath}`);
      return;
    }

    console.log(`üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ${subcollectionSnapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å ${collectionPath}`);

    // ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö batch (‡∏ó‡∏µ‡∏•‡∏∞ 500 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
    const batchSize = 500;
    const docs = subcollectionSnapshot.docs;
    
    for (let i = 0; i < docs.length; i += batchSize) {
      const batch = db.batch();
      const batchDocs = docs.slice(i, i + batchSize);
      
      batchDocs.forEach(doc => {
        batch.delete(doc.ref);
      });
      
      await batch.commit();
      console.log(`   ‚úÖ ‡∏•‡∏ö batch ${Math.ceil((i + 1) / batchSize)} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    }

    console.log(`‚úÖ ‡∏•‡∏ö ${collectionPath} ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`);

  } catch (error) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö ${collectionPath}:`, error);
    throw error;
  }
}

/**
 * üñºÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Storage
 * @param {admin.storage.Storage} bucket - Storage bucket
 * @param {string} postId - ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
 * @param {string} imageUrl - URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
 */
async function deleteImageFromStorage(bucket, postId, imageUrl) {
  try {
    // üîç ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL
    let fileName = null;
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ postId ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    const possibleNames = [
      `images/${postId}.jpg`,
      `images/${postId}.jpeg`,
      `images/${postId}.png`,
      `images/${postId}.webp`,
    ];

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL
    if (imageUrl.includes('firebase')) {
      const urlParts = imageUrl.split('/');
      const fileNameWithParams = urlParts[urlParts.length - 1];
      const actualFileName = fileNameWithParams.split('?')[0];
      possibleNames.push(decodeURIComponent(actualFileName));
    }

    // üóëÔ∏è ‡∏•‡∏≠‡∏á‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    let deleted = false;
    for (const fileName of possibleNames) {
      try {
        const file = bucket.file(fileName);
        const [exists] = await file.exists();
        
        if (exists) {
          await file.delete();
          console.log(`üñºÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${fileName}`);
          deleted = true;
          break;
        }
      } catch (deleteError) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      }
    }

    if (!deleted) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}`);
    }

  } catch (error) {
    console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}:`, error.message);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  }
}

/**
 * üõ†Ô∏è Manual Cleanup Function (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
 * 
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢: 
 * firebase functions:shell
 * > manualCleanup()
 */
exports.manualCleanup = functions.https.onRequest(async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö admin key (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
    const adminKey = req.query.adminKey;
    if (adminKey !== 'your-secret-admin-key-here') {
      return res.status(403).json({ error: 'Unauthorized' });
    }

    console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏° Manual Cleanup...');
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö scheduled function
    const result = await exports.cleanupOldReports.run();
    
    res.json({
      success: true,
      message: 'Manual cleanup completed',
      result: result
    });

  } catch (error) {
    console.error('‚ùå Manual cleanup failed:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * üìä Status Check Function
 * 
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
 */
exports.getCleanupStatus = functions.https.onRequest(async (req, res) => {
  try {
    const db = admin.firestore();
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalPostsSnapshot = await db.collection('reports').get();
    const totalPosts = totalPostsSnapshot.size;
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤
    const oldPostsSnapshot = await db.collection('reports')
      .where('timestamp', '<', sevenDaysAgo)
      .get();
    const oldPosts = oldPostsSnapshot.size;
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô comments ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let totalComments = 0;
    for (const doc of totalPostsSnapshot.docs) {
      const commentsSnapshot = await db.collection(`reports/${doc.id}/comments`).get();
      totalComments += commentsSnapshot.size;
    }

    res.json({
      success: true,
      data: {
        totalPosts,
        oldPosts,
        totalComments,
        cutoffDate: sevenDaysAgo.toISOString(),
        lastUpdated: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Status check failed:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
