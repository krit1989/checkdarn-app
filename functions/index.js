const functions = require('firebase-functions');
const admin = require('firebase-admin');
const { getStorage } = require('firebase-admin/storage');
const { v4: uuidv4 } = require('uuid');

// Initialize Firebase Admin
admin.initializeApp();

// üîÑ **Retry Queue Collection**
const RETRY_QUEUE = 'notification_retry_queue';

/**
 * üßπ Scheduled Function: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
 * 
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
 * ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á subcollections ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Storage
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
 * 1. ‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
 * 2. ‡∏•‡∏ö comments subcollection ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * 3. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Firebase Storage
 * 4. ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
 */
exports.cleanupOldReports = functions.pubsub
  .schedule('every 24 hours')
  .timeZone('Asia/Bangkok')
  .onRun(async (context) => {
    const db = admin.firestore();
    const bucket = getStorage().bucket();
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    console.log(`üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤: ${sevenDaysAgo.toISOString()}`);

    try {
      // üîç ‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
      const snapshot = await db.collection('reports')
        .where('timestamp', '<', sevenDaysAgo)
        .get();

      console.log(`üìä ‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤ ${snapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

      if (snapshot.empty) {
        console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö');
        return null;
      }

      let deletedCount = 0;
      let errorCount = 0;

      // üîÑ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏•‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå
      for (const doc of snapshot.docs) {
        const postId = doc.id;
        const data = doc.data();
        
        try {
          console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå: ${postId}`);

          // üìù 1. ‡∏•‡∏ö comments subcollection
          await deleteSubcollection(db, `reports/${postId}/comments`);

          // üìù 2. ‡∏•‡∏ö likes subcollection (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          await deleteSubcollection(db, `reports/${postId}/likes`);

          // üìù 3. ‡∏•‡∏ö shares subcollection (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          await deleteSubcollection(db, `reports/${postId}/shares`);

          // üñºÔ∏è 4. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Storage
          if (data.imageUrl) {
            await deleteImageFromStorage(bucket, postId, data.imageUrl);
          }

          // üìÑ 5. ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
          await doc.ref.delete();

          deletedCount++;
          console.log(`‚úÖ ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

        } catch (error) {
          errorCount++;
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}:`, error);
        }
      }

      // üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      console.log(`üéâ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:`);
      console.log(`   ‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`   ‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

      return {
        success: true,
        deletedCount,
        errorCount,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:', error);
      throw error;
    }
  });

/**
 * üóÇÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö subcollection
 * @param {admin.firestore.Firestore} db - Firestore instance
 * @param {string} collectionPath - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á collection ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 */
async function deleteSubcollection(db, collectionPath) {
  try {
    const subcollectionSnapshot = await db.collection(collectionPath).get();
    
    if (subcollectionSnapshot.empty) {
      console.log(`üìÅ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô ${collectionPath}`);
      return;
    }

    console.log(`üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ${subcollectionSnapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å ${collectionPath}`);

    // ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö batch (‡∏ó‡∏µ‡∏•‡∏∞ 500 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
    const batchSize = 500;
    const docs = subcollectionSnapshot.docs;
    
    for (let i = 0; i < docs.length; i += batchSize) {
      const batch = db.batch();
      const batchDocs = docs.slice(i, i + batchSize);
      
      batchDocs.forEach(doc => {
        batch.delete(doc.ref);
      });
      
      await batch.commit();
      console.log(`   ‚úÖ ‡∏•‡∏ö batch ${Math.ceil((i + 1) / batchSize)} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    }

    console.log(`‚úÖ ‡∏•‡∏ö ${collectionPath} ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`);

  } catch (error) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö ${collectionPath}:`, error);
    throw error;
  }
}

/**
 * üñºÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Storage
 * @param {admin.storage.Storage} bucket - Storage bucket
 * @param {string} postId - ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
 * @param {string} imageUrl - URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
 */
async function deleteImageFromStorage(bucket, postId, imageUrl) {
  try {
    // üîç ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL
    let fileName = null;
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ postId ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    const possibleNames = [
      `images/${postId}.jpg`,
      `images/${postId}.jpeg`,
      `images/${postId}.png`,
      `images/${postId}.webp`,
    ];

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL
    if (imageUrl.includes('firebase')) {
      const urlParts = imageUrl.split('/');
      const fileNameWithParams = urlParts[urlParts.length - 1];
      const actualFileName = fileNameWithParams.split('?')[0];
      possibleNames.push(decodeURIComponent(actualFileName));
    }

    // üóëÔ∏è ‡∏•‡∏≠‡∏á‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    let deleted = false;
    for (const fileName of possibleNames) {
      try {
        const file = bucket.file(fileName);
        const [exists] = await file.exists();
        
        if (exists) {
          await file.delete();
          console.log(`üñºÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${fileName}`);
          deleted = true;
          break;
        }
      } catch (deleteError) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      }
    }

    if (!deleted) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}`);
    }

  } catch (error) {
    console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}:`, error.message);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  }
}

/**
 * üõ†Ô∏è Manual Cleanup Function (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
 * 
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢: 
 * firebase functions:shell
 * > manualCleanup()
 */
exports.manualCleanup = functions.https.onRequest(async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö admin key (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
    const adminKey = req.query.adminKey;
    if (adminKey !== 'your-secret-admin-key-here') {
      return res.status(403).json({ error: 'Unauthorized' });
    }

    console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏° Manual Cleanup...');
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö scheduled function
    const result = await exports.cleanupOldReports.run();
    
    res.json({
      success: true,
      message: 'Manual cleanup completed',
      result: result
    });

  } catch (error) {
    console.error('‚ùå Manual cleanup failed:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * üìä Status Check Function
 * 
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
 */
exports.getCleanupStatus = functions.https.onRequest(async (req, res) => {
  try {
    const db = admin.firestore();
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalPostsSnapshot = await db.collection('reports').get();
    const totalPosts = totalPostsSnapshot.size;
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤
    const oldPostsSnapshot = await db.collection('reports')
      .where('timestamp', '<', sevenDaysAgo)
      .get();
    const oldPosts = oldPostsSnapshot.size;
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô comments ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let totalComments = 0;
    for (const doc of totalPostsSnapshot.docs) {
      const commentsSnapshot = await db.collection(`reports/${doc.id}/comments`).get();
      totalComments += commentsSnapshot.size;
    }

    res.json({
      success: true,
      data: {
        totalPosts,
        oldPosts,
        totalComments,
        cutoffDate: sevenDaysAgo.toISOString(),
        lastUpdated: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Status check failed:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * üîç Debug Token Status Function
 * 
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ FCM Tokens ‡πÅ‡∏•‡∏∞ User Data
 */
exports.debugTokenStatus = functions.https.onRequest(async (req, res) => {
  try {
    const db = admin.firestore();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user_tokens collection
    const userTokensSnapshot = await db.collection('user_tokens').get();
    
    const tokenStats = {
      totalUsers: userTokensSnapshot.size,
      usersWithTokens: 0,
      totalTokens: 0,
      emptyTokenUsers: 0,
      userDetails: []
    };
    
    userTokensSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const userId = doc.id;
      
      const userInfo = {
        userId: userId,
        hasTokens: data.tokens && Array.isArray(data.tokens) && data.tokens.length > 0,
        tokenCount: data.tokens ? data.tokens.length : 0,
        platform: data.platform || 'unknown',
        lastUpdated: data.lastUpdated ? data.lastUpdated.toDate().toISOString() : null,
        isActive: data.isActive !== false // default true if not specified
      };
      
      if (userInfo.hasTokens) {
        tokenStats.usersWithTokens++;
        tokenStats.totalTokens += userInfo.tokenCount;
      } else {
        tokenStats.emptyTokenUsers++;
      }
      
      tokenStats.userDetails.push(userInfo);
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö users collection (‡πÄ‡∏Å‡πà‡∏≤)
    const usersSnapshot = await db.collection('users').get();
    const oldUserTokens = [];
    
    usersSnapshot.docs.forEach(doc => {
      const data = doc.data();
      if (data.fcmToken) {
        oldUserTokens.push({
          userId: doc.id,
          token: data.fcmToken.substring(0, 20) + '...',
          lastTokenUpdate: data.lastTokenUpdate ? data.lastTokenUpdate.toDate().toISOString() : null
        });
      }
    });

    res.json({
      success: true,
      data: {
        userTokensCollection: tokenStats,
        oldUsersCollection: {
          totalUsers: usersSnapshot.size,
          usersWithFcmToken: oldUserTokens.length,
          tokenDetails: oldUserTokens
        },
        lastChecked: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Debug token status failed:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ============================================================================
// üîî PUSH NOTIFICATION FUNCTIONS
// ============================================================================

/**
 * üîî ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏û‡∏™‡πÉ‡∏´‡∏°‡πà - ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™)
 * 
 * ‡∏Å‡∏é: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡πÉ‡∏´‡∏°‡πà ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ sendNotificationWithRetry ‡πÅ‡∏ó‡∏ô
 */
// exports.sendNewPostNotification = functions.firestore
//   .document('reports/{reportId}')
//   .onCreate(async (snap, context) => {
//     // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥
//     console.log('‚ö†Ô∏è sendNewPostNotification is disabled to prevent duplicate notifications');
//     return null;
//   });

/**
 * üîî ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà - ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™ (‡∏û‡∏£‡πâ‡∏≠‡∏° Retry)
 * 
 * ‡∏Å‡∏é: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™
 */
exports.sendNewCommentNotification = functions.firestore
  .document('reports/{reportId}/comments/{commentId}')
  .onCreate(async (snap, context) => {
    const maxRetries = 3;
    const retryDelay = [5, 15, 30]; // ‡∏ô‡∏≤‡∏ó‡∏µ
    
    try {
      const reportId = context.params.reportId;
      const commentId = context.params.commentId;
      const commentData = snap.data();
      
      console.log(`üí¨ New comment with retry: ${commentId} on report: ${reportId}`);
      console.log(`üìù Comment by: ${commentData.userId}`);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
      const reportDoc = await admin.firestore()
        .collection('reports')
        .doc(reportId)
        .get();
      
      if (!reportDoc.exists) {
        console.log('‚ùå Report not found');
        return null;
      }
      
      const reportData = reportDoc.data();
      const postAuthorId = reportData.userId;
      
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (commentData.userId === postAuthorId) {
        console.log('‚ö†Ô∏è Comment author is the same as post author, no notification sent');
        return null;
      }
      
      // ‡∏î‡∏∂‡∏á FCM token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™
      const authorTokenDoc = await admin.firestore()
        .collection('user_tokens')
        .where('userId', '==', postAuthorId)
        .where('isActive', '==', true)
        .limit(1)
        .get();
      
      if (authorTokenDoc.empty) {
        console.log('‚ö†Ô∏è Post author has no active FCM token');
        return null;
      }
      
      const authorToken = authorTokenDoc.docs[0].data().token;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const commenterName = commentData.displayName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á';
      const notificationTitle = 'üí¨ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà!';
      const notificationBody = `${commenterName} ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const message = {
        notification: {
          title: notificationTitle,
          body: notificationBody,
        },
        data: {
          type: 'new_comment',
          reportId: reportId,
          commentId: commentId,
          category: reportData.category || '',
        },
        token: authorToken
      };
      
      try {
        const response = await admin.messaging().send(message);
        console.log(`‚úÖ Comment notification sent successfully: ${response}`);
        
        return {
          success: true,
          messageId: response
        };
        
      } catch (sendError) {
        console.error('‚ùå Failed to send comment notification:', sendError);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó error
        const errorCode = sendError.code;
        
        if (isInvalidTokenError(errorCode)) {
          // ‡∏•‡∏ö invalid token
          await removeInvalidTokens([authorToken]);
          console.log('üóëÔ∏è Removed invalid token for comment notification');
          return null;
          
        } else if (isRetryableError(errorCode)) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ retry queue
          await admin.firestore().collection(RETRY_QUEUE).add({
            message: {
              notification: message.notification,
              data: message.data,
              tokens: [authorToken] // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
            },
            attemptCount: 1,
            lastAttempt: admin.firestore.FieldValue.serverTimestamp(),
            nextAttempt: new Date(Date.now() + retryDelay[0] * 60000),
            maxAttempts: maxRetries,
            type: 'new_comment',
            reportId: reportId,
            commentId: commentId,
            targetUserId: postAuthorId,
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            error: sendError.message
          });
          
          console.log('üîÑ Added comment notification to retry queue');
          return {
            success: false,
            addedToRetryQueue: true,
            error: sendError.message
          };
        } else {
          // Error ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ retry ‡πÑ‡∏î‡πâ
          console.error('‚ùå Non-retryable error for comment notification:', sendError);
          return null;
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error in sendNewCommentNotification:', error);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ retry queue
      try {
        await admin.firestore().collection(RETRY_QUEUE).add({
          message: {
            notification: {
              title: 'üí¨ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà!',
              body: '‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'
            },
            data: {
              type: 'new_comment',
              reportId: context.params.reportId,
              commentId: context.params.commentId,
            }
          },
          attemptCount: 1,
          lastAttempt: admin.firestore.FieldValue.serverTimestamp(),
          nextAttempt: new Date(Date.now() + 5 * 60000), // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
          maxAttempts: 3,
          type: 'new_comment_error',
          reportId: context.params.reportId,
          commentId: context.params.commentId,
          error: error.message,
          createdAt: admin.firestore.FieldValue.serverTimestamp()
        });
        
        console.log('üîÑ Added comment notification error to retry queue');
      } catch (retryError) {
        console.error('‚ùå Failed to add comment notification to retry queue:', retryError);
      }
      
      return null;
    }
  });

/**
 * üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î FCM Tokens ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
 */
async function cleanupInvalidTokens(response, tokens) {
  try {
    const invalidTokens = [];
    
    response.responses.forEach((resp, idx) => {
      if (!resp.success) {
        const error = resp.error;
        if (error.code === 'messaging/registration-token-not-registered' ||
            error.code === 'messaging/invalid-registration-token') {
          invalidTokens.push(tokens[idx]);
        }
      }
    });
    
    if (invalidTokens.length > 0) {
      console.log(`üßπ Cleaning up ${invalidTokens.length} invalid tokens`);
      
      // ‡∏•‡∏ö invalid tokens ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const batch = admin.firestore().batch();
      const tokensSnapshot = await admin.firestore()
        .collection('user_tokens')
        .where('token', 'in', invalidTokens)
        .get();
      
      tokensSnapshot.docs.forEach(doc => {
        batch.update(doc.ref, {
          isActive: false,
          lastUpdated: admin.firestore.FieldValue.serverTimestamp()
        });
      });
      
      await batch.commit();
      console.log(`‚úÖ Cleaned up ${invalidTokens.length} invalid tokens`);
    }
    
  } catch (error) {
    console.error('‚ùå Error cleaning up invalid tokens:', error);
  }
}

/**
 * üßπ ‡∏•‡∏ö FCM Token ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
 */
async function cleanupSingleInvalidToken(invalidToken) {
  try {
    console.log(`üßπ Cleaning up single invalid token: ${invalidToken.substring(0, 20)}...`);
    
    const tokensSnapshot = await admin.firestore()
      .collection('user_tokens')
      .where('token', '==', invalidToken)
      .get();
    
    if (!tokensSnapshot.empty) {
      const tokenDoc = tokensSnapshot.docs[0];
      await tokenDoc.ref.update({
        isActive: false,
        lastUpdated: admin.firestore.FieldValue.serverTimestamp()
      });
      
      console.log(`‚úÖ Cleaned up invalid token for user: ${tokenDoc.data().userId}`);
    }
    
  } catch (error) {
    console.error('‚ùå Error cleaning up single invalid token:', error);
  }
}

/**
 * üè∑Ô∏è ‡∏î‡∏∂‡∏á emoji ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Flutter event_model_new.dart)
 */
function getCategoryEmoji(category) {
  const emojiMap = {
    'checkpoint': 'üöì',
    'accident': 'üöë',
    'fire': 'üî•',
    'floodRain': 'üåß',
    'tsunami': 'üåä',
    'earthquake': 'üåç',
    'animalLost': 'üê∂',
    'question': '‚ùì'
  };
  return emojiMap[category] || 'üìç';
}

/**
 * üè∑Ô∏è ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Flutter event_model_new.dart)
 */
function getCategoryName(category) {
  const nameMap = {
    'checkpoint': '‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à',
    'accident': '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏',
    'fire': '‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ',
    'floodRain': '‡∏ù‡∏ô‡∏ï‡∏Å/‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
    'tsunami': '‡∏™‡∏∂‡∏ô‡∏≤‡∏°‡∏¥',
    'earthquake': '‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß',
    'animalLost': '‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏≤‡∏¢',
    'question': '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
  };
  return nameMap[category] || '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå';
}

// ============================================================================
// üîÑ NOTIFICATION RETRY SYSTEM
// ============================================================================

/**
 * ÔøΩ **‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry Logic**
 * ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
 */
exports.sendNewPostNotification = functions.firestore
  .document('reports/{reportId}')
  .onCreate(async (snapshot, context) => {
    const maxRetries = 3;
    const retryDelay = [5, 15, 30]; // ‡∏ô‡∏≤‡∏ó‡∏µ
    
    try {
      const reportId = context.params.reportId;
      const reportData = snapshot.data();
      const reporterId = reportData.userId;

      console.log(`üîî New post with retry: ${reportId} by ${reporterId}`);

      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const allUsersSnapshot = await admin.firestore()
        .collection('user_tokens')
        .get();

      console.log(`üìä Total user_tokens documents: ${allUsersSnapshot.size}`);

      // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô user_tokens collection
      allUsersSnapshot.docs.forEach((doc, index) => {
        const data = doc.data();
        console.log(`   User ${index + 1}: ${doc.id}`);
        console.log(`      tokens: ${JSON.stringify(data.tokens)}`);
        console.log(`      isActive: ${data.isActive}`);
        console.log(`      platform: ${data.platform}`);
      });

      // 1. ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å Firestore (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö structure ‡πÉ‡∏´‡∏°‡πà)
      const tokensSnapshot = await admin.firestore()
        .collection('user_tokens')
        .where('tokens', '!=', [])
        .get();

      console.log(`üìä Documents with non-empty tokens: ${tokensSnapshot.size}`);

      if (tokensSnapshot.empty) {
        console.log('‚ö†Ô∏è No users with valid tokens in database');
        console.log('üí° Suggestion: Check if Flutter app is saving tokens correctly');
        return null;
      }

      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ tokens array
      const tokens = [];
      tokensSnapshot.docs.forEach(tokenDoc => {
        const tokenData = tokenDoc.data();
        const userId = tokenDoc.id; // userId ‡πÄ‡∏õ‡πá‡∏ô document ID
        
        console.log(`   Checking user: ${userId} (reporter: ${reporterId})`);
        
        if (userId !== reporterId && tokenData.tokens && Array.isArray(tokenData.tokens)) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° tokens ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
          tokenData.tokens.forEach(token => {
            if (token && token.length > 0) {
              tokens.push(token);
              console.log(`      ‚úÖ Added token: ${token.substring(0, 20)}...`);
            }
          });
        } else if (userId === reporterId) {
          console.log(`      ‚è≠Ô∏è Skipped reporter's tokens`);
        } else {
          console.log(`      ‚ö†Ô∏è No valid tokens for user ${userId}`);
        }
      });

      if (tokens.length === 0) {
        console.log('‚ö†Ô∏è No target tokens after filtering');
        console.log(`üí° Reporter ID: ${reporterId}`);
        console.log(`üí° Available users: ${tokensSnapshot.docs.map(doc => doc.id).join(', ')}`);
        return null;
      }

      console.log(`üì§ Found ${tokens.length} valid tokens for notification`)

      // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      const categoryEmoji = getCategoryEmoji(reportData.category);
      const categoryName = getCategoryName(reportData.category);
      
      // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡πÄ‡∏õ‡πá‡∏ô title
      const notificationTitle = `${categoryEmoji} ${categoryName}`;
      
      // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô body (‡∏à‡∏≥‡∏Å‡∏±‡∏î 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
      let notificationBody = reportData.description || '‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì';
      if (notificationBody.length > 100) {
        notificationBody = notificationBody.substring(0, 97) + '...';
      }
      
      const message = {
        notification: {
          title: notificationTitle,
          body: notificationBody,
        },
        data: {
          type: 'new_post',
          reportId: reportId,
          category: reportData.category || '',
          location: reportData.location || '',
          district: reportData.district || '',
          province: reportData.province || '',
        },
        tokens: tokens
      };

      console.log(`üì§ Attempting to send notification to ${tokens.length} tokens`);
      const response = await admin.messaging().sendEachForMulticast(message);
      
      console.log(`‚úÖ Success: ${response.successCount}, Failed: ${response.failureCount}`);

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Failed Tokens
      if (response.failureCount > 0) {
        const failedTokens = [];
        const invalidTokens = [];
        
        response.responses.forEach((resp, idx) => {
          if (!resp.success) {
            const token = tokens[idx];
            const errorCode = resp.error?.code;
            
            console.log(`‚ùå Token failed: ${token.substring(0, 20)}... - Error: ${errorCode}`);
            
            // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó error
            if (isInvalidTokenError(errorCode)) {
              invalidTokens.push(token);
            } else if (isRetryableError(errorCode)) {
              failedTokens.push(token);
            }
          }
        });

        // ‡∏•‡∏ö Invalid Tokens
        if (invalidTokens.length > 0) {
          console.log(`üóëÔ∏è Removing ${invalidTokens.length} invalid tokens`);
          await removeInvalidTokens(invalidTokens);
        }

        // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô retry queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Retryable Tokens
        if (failedTokens.length > 0) {
          console.log(`üîÑ Adding ${failedTokens.length} tokens to retry queue`);
          
          await admin.firestore().collection(RETRY_QUEUE).add({
            message: {
              notification: message.notification,
              data: message.data,
              tokens: failedTokens
            },
            originalTokens: tokens,
            failedTokens: failedTokens,
            attemptCount: 1,
            lastAttempt: admin.firestore.FieldValue.serverTimestamp(),
            nextAttempt: new Date(Date.now() + retryDelay[0] * 60000),
            maxAttempts: maxRetries,
            type: 'new_post',
            reportId: reportId,
            createdAt: admin.firestore.FieldValue.serverTimestamp()
          });
        }
      }

      return {
        success: true,
        successCount: response.successCount,
        failureCount: response.failureCount,
        totalTokens: tokens.length
      };

    } catch (error) {
      console.error('‚ùå Error in sendNewPostNotification:', error);
      
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
      return null;
    }
  });

/**
 * üîÑ **Retry Worker - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• notification ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
exports.processRetryQueue = functions.pubsub
  .schedule('every 5 minutes')
  .timeZone('Asia/Bangkok')
  .onRun(async (context) => {
    try {
      console.log('üîÑ Processing retry queue...');
      
      const now = new Date();
      const queue = await admin.firestore()
        .collection(RETRY_QUEUE)
        .where('nextAttempt', '<=', now)
        .limit(50) // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞ 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        .get();

      if (queue.empty) {
        console.log('üì≠ Retry queue is empty');
        return null;
      }

      console.log(`üì§ Processing ${queue.size} items from retry queue`);

      const promises = queue.docs.map(async (doc) => {
        const data = doc.data();
        
        try {
          console.log(`üîÑ Retrying ${data.type} - Attempt ${data.attemptCount}/${data.maxAttempts}`);
          
          // ‡∏™‡πà‡∏á notification ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          const response = await admin.messaging().sendEachForMulticast(data.message);
          
          console.log(`üìä Retry result - Success: ${response.successCount}, Failed: ${response.failureCount}`);
          
          if (response.failureCount === 0) {
            // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue
            await doc.ref.delete();
            console.log(`‚úÖ Retry successful for ${data.type}, removed from queue`);
            
          } else if (data.attemptCount < data.maxAttempts) {
            // ‡∏¢‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            const nextAttemptIndex = Math.min(data.attemptCount, 2); // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ index 2
            const retryDelay = [5, 15, 30]; // ‡∏ô‡∏≤‡∏ó‡∏µ
            const nextAttemptDelay = retryDelay[nextAttemptIndex];
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï failed tokens
            const newFailedTokens = [];
            response.responses.forEach((resp, idx) => {
              if (!resp.success && !isInvalidTokenError(resp.error?.code)) {
                newFailedTokens.push(data.message.tokens[idx]);
              }
            });
            
            await doc.ref.update({
              attemptCount: data.attemptCount + 1,
              lastAttempt: admin.firestore.FieldValue.serverTimestamp(),
              nextAttempt: new Date(Date.now() + nextAttemptDelay * 60000),
              'message.tokens': newFailedTokens,
              lastError: `Failed attempt ${data.attemptCount + 1}: ${response.failureCount} failures`
            });
            
            console.log(`üîÑ Retry attempt ${data.attemptCount + 1}/${data.maxAttempts} scheduled for ${nextAttemptDelay} minutes`);
            
          } else {
            // ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô failed
            await doc.ref.update({
              status: 'failed',
              finalAttempt: admin.firestore.FieldValue.serverTimestamp(),
              lastError: 'Max retry attempts exceeded'
            });
            
            console.log(`‚ùå Max retry attempts exceeded for ${data.type}`);
          }
          
          // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î invalid tokens
          const invalidTokens = [];
          response.responses.forEach((resp, idx) => {
            if (!resp.success && isInvalidTokenError(resp.error?.code)) {
              invalidTokens.push(data.message.tokens[idx]);
            }
          });
          
          if (invalidTokens.length > 0) {
            await removeInvalidTokens(invalidTokens);
          }

        } catch (error) {
          console.error(`‚ùå Error processing retry item ${doc.id}:`, error);
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï error ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          await doc.ref.update({
            lastError: error.message,
            lastAttempt: admin.firestore.FieldValue.serverTimestamp()
          });
        }
      });

      await Promise.all(promises);
      console.log('‚úÖ Retry queue processing completed');

      return {
        success: true,
        processedItems: queue.size,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error processing retry queue:', error);
      return null;
    }
  });

/**
 * üßπ **‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Retry Queue**
 * ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
 */
exports.cleanupRetryQueue = functions.pubsub
  .schedule('every 24 hours')
  .timeZone('Asia/Bangkok')
  .onRun(async (context) => {
    try {
      console.log('üßπ Cleaning up retry queue...');

      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      
      const oldItemsSnapshot = await admin.firestore()
        .collection(RETRY_QUEUE)
        .where('createdAt', '<', oneDayAgo)
        .get();

      if (oldItemsSnapshot.empty) {
        console.log('üßπ No old retry queue items to clean up');
        return null;
      }

      const batch = admin.firestore().batch();
      oldItemsSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });

      await batch.commit();
      console.log(`üßπ Cleaned up ${oldItemsSnapshot.size} old retry queue items`);

      return {
        success: true,
        cleanedItems: oldItemsSnapshot.size,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error cleaning up retry queue:', error);
      return null;
    }
  });

/**
 * üö´ **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Invalid Token Error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**
 */
function isInvalidTokenError(errorCode) {
  const invalidErrorCodes = [
    'messaging/invalid-registration-token',
    'messaging/registration-token-not-registered',
    'messaging/invalid-package-name'
  ];
  return invalidErrorCodes.includes(errorCode);
}

/**
 * üîÑ **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Retryable Error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**
 */
function isRetryableError(errorCode) {
  const retryableErrorCodes = [
    'messaging/internal-error',
    'messaging/server-unavailable',
    'messaging/timeout',
    'messaging/quota-exceeded',
    'messaging/third-party-auth-error'
  ];
  return retryableErrorCodes.includes(errorCode);
}

/**
 * üóëÔ∏è **‡∏•‡∏ö Invalid Tokens ‡∏à‡∏≤‡∏Å Firestore**
 */
async function removeInvalidTokens(invalidTokens) {
  try {
    console.log(`üóëÔ∏è Removing ${invalidTokens.length} invalid tokens from database`);
    
    const batch = admin.firestore().batch();
    let batchCount = 0;

    for (const token of invalidTokens) {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ documents ‡∏ó‡∏µ‡πà‡∏°‡∏µ token ‡∏ô‡∏µ‡πâ
      const tokenQuery = await admin.firestore()
        .collection('user_tokens')
        .where('token', '==', token)
        .get();

      tokenQuery.docs.forEach(doc => {
        batch.update(doc.ref, {
          isActive: false,
          lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
          invalidReason: 'Token no longer valid'
        });
        batchCount++;
      });

      // Commit batch ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 450 operations (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ)
      if (batchCount >= 450) {
        await batch.commit();
        console.log(`   ‚úÖ Committed batch of ${batchCount} updates`);
        batchCount = 0;
      }
    }

    // Commit batch ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    if (batchCount > 0) {
      await batch.commit();
      console.log(`   ‚úÖ Committed final batch of ${batchCount} updates`);
    }

    console.log(`‚úÖ Removed ${invalidTokens.length} invalid tokens from database`);

  } catch (error) {
    console.error('‚ùå Error removing invalid tokens:', error);
    throw error;
  }
}

/**
 * üìä **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Retry Queue**
 */
exports.getRetryQueueStatus = functions.https.onRequest(async (req, res) => {
  try {
    const db = admin.firestore();
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô retry queue
    const totalSnapshot = await db.collection(RETRY_QUEUE).get();
    const totalItems = totalSnapshot.size;
    
    // ‡∏ô‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    const now = new Date();
    const pendingSnapshot = await db.collection(RETRY_QUEUE)
      .where('nextAttempt', '<=', now)
      .get();
    const pendingItems = pendingSnapshot.size;
    
    // ‡∏ô‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    const failedSnapshot = await db.collection(RETRY_QUEUE)
      .where('status', '==', 'failed')
      .get();
    const failedItems = failedSnapshot.size;
    
    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const recentSnapshot = await db.collection(RETRY_QUEUE)
      .orderBy('createdAt', 'desc')
      .limit(5)
      .get();
    
    const recentItems = recentSnapshot.docs.map(doc => ({
      id: doc.id,
      type: doc.data().type,
      attemptCount: doc.data().attemptCount,
      maxAttempts: doc.data().maxAttempts,
      createdAt: doc.data().createdAt?.toDate?.()?.toISOString(),
      nextAttempt: doc.data().nextAttempt?.toDate?.()?.toISOString(),
      status: doc.data().status || 'pending'
    }));

    res.json({
      success: true,
      data: {
        totalItems,
        pendingItems,
        failedItems,
        activeItems: totalItems - failedItems,
        recentItems,
        lastUpdated: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Error getting retry queue status:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
