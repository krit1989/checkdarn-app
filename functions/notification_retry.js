const admin = require('firebase-admin');
const functions = require('firebase-functions');

/**
 * üîÑ **Notification Retry System for Cloud Functions**
 * ‡∏£‡∏∞‡∏ö‡∏ö Retry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FCM Token ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô Backend
 * 
 * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
 * - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö FCM Response ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Invalid Token
 * - Retry Queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 * - Token Cleanup ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * - Exponential Backoff ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Retry
 */

// Collection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Retry Queue
const RETRY_QUEUE_COLLECTION = 'notification_retry_queue';
const USER_TOKENS_COLLECTION = 'user_tokens';

// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Retry
const RETRY_CONFIG = {
  maxAttempts: 3,
  delays: [5, 15, 30], // ‡∏ô‡∏≤‡∏ó‡∏µ
  exponentialBackoff: true
};

/**
 * üì§ **‡∏™‡πà‡∏á Notification ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry Logic**
 * @param {Object} notificationData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification
 * @param {Array} tokens - FCM tokens
 * @param {string} type - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
 */
async function sendNotificationWithRetry(notificationData, tokens, type = 'general') {
  try {
    console.log(`üîî Sending ${type} notification to ${tokens.length} tokens`);

    const message = {
      notification: notificationData.notification,
      data: notificationData.data || {},
      tokens: tokens
    };

    // ‡∏™‡πà‡∏á notification
    const response = await admin.messaging().sendMulticast(message);
    
    console.log(`‚úÖ Sent successfully: ${response.successCount}/${tokens.length}`);
    console.log(`‚ùå Failed: ${response.failureCount}/${tokens.length}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Failed Tokens
    if (response.failureCount > 0) {
      await handleFailedTokens(response, message, tokens, type);
    }

    return {
      success: true,
      successCount: response.successCount,
      failureCount: response.failureCount,
      totalTokens: tokens.length
    };

  } catch (error) {
    console.error('‚ùå Error sending notification:', error);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Retry Queue
    await addToRetryQueue({
      message: { notification: notificationData.notification, data: notificationData.data },
      tokens: tokens,
      type: type,
      error: error.message
    });

    return {
      success: false,
      error: error.message,
      totalTokens: tokens.length
    };
  }
}

/**
 * üîç **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Token ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**
 * @param {Object} response - FCM Response
 * @param {Object} message - Message ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
 * @param {Array} originalTokens - Token ‡πÄ‡∏î‡∏¥‡∏°
 * @param {string} type - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 */
async function handleFailedTokens(response, message, originalTokens, type) {
  try {
    const failedTokens = [];
    const invalidTokens = [];
    const retryableTokens = [];

    response.responses.forEach((resp, index) => {
      if (!resp.success) {
        const token = originalTokens[index];
        const errorCode = resp.error?.code;

        console.log(`‚ùå Token failed: ${token.substring(0, 20)}... - Error: ${errorCode}`);

        failedTokens.push(token);

        // ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Error
        if (isInvalidTokenError(errorCode)) {
          invalidTokens.push(token);
        } else if (isRetryableError(errorCode)) {
          retryableTokens.push(token);
        }
      }
    });

    // ‡∏•‡∏ö Invalid Tokens
    if (invalidTokens.length > 0) {
      console.log(`üóëÔ∏è Removing ${invalidTokens.length} invalid tokens`);
      await removeInvalidTokens(invalidTokens);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Retryable Tokens ‡πÄ‡∏Ç‡πâ‡∏≤ Queue
    if (retryableTokens.length > 0) {
      console.log(`üîÑ Adding ${retryableTokens.length} tokens to retry queue`);
      await addToRetryQueue({
        message: message,
        tokens: retryableTokens,
        type: type,
        reason: 'retryable_error'
      });
    }

  } catch (error) {
    console.error('‚ùå Error handling failed tokens:', error);
  }
}

/**
 * üö´ **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Invalid Token Error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**
 * @param {string} errorCode - Error code ‡∏à‡∏≤‡∏Å FCM
 * @returns {boolean}
 */
function isInvalidTokenError(errorCode) {
  const invalidErrorCodes = [
    'messaging/invalid-registration-token',
    'messaging/registration-token-not-registered',
    'messaging/invalid-package-name'
  ];
  return invalidErrorCodes.includes(errorCode);
}

/**
 * üîÑ **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Retryable Error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**
 * @param {string} errorCode - Error code ‡∏à‡∏≤‡∏Å FCM
 * @returns {boolean}
 */
function isRetryableError(errorCode) {
  const retryableErrorCodes = [
    'messaging/internal-error',
    'messaging/server-unavailable',
    'messaging/timeout',
    'messaging/quota-exceeded'
  ];
  return retryableErrorCodes.includes(errorCode);
}

/**
 * üóëÔ∏è **‡∏•‡∏ö Invalid Tokens ‡∏à‡∏≤‡∏Å Firestore**
 * @param {Array} invalidTokens - Invalid tokens
 */
async function removeInvalidTokens(invalidTokens) {
  try {
    const batch = admin.firestore().batch();
    let batchCount = 0;

    for (const token of invalidTokens) {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ documents ‡∏ó‡∏µ‡πà‡∏°‡∏µ token ‡∏ô‡∏µ‡πâ
      const tokenQuery = await admin.firestore()
        .collection(USER_TOKENS_COLLECTION)
        .where('fcmToken', '==', token)
        .get();

      tokenQuery.docs.forEach(doc => {
        batch.delete(doc.ref);
        batchCount++;
      });

      // Commit batch ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 500 operations
      if (batchCount >= 450) {
        await batch.commit();
        batchCount = 0;
      }
    }

    // Commit batch ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    if (batchCount > 0) {
      await batch.commit();
    }

    console.log(`‚úÖ Removed ${invalidTokens.length} invalid tokens from database`);

  } catch (error) {
    console.error('‚ùå Error removing invalid tokens:', error);
  }
}

/**
 * üì• **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Retry Queue**
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ retry
 */
async function addToRetryQueue(data) {
  try {
    const queueItem = {
      message: data.message,
      tokens: data.tokens,
      type: data.type,
      attemptCount: 1,
      maxAttempts: RETRY_CONFIG.maxAttempts,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      nextAttempt: new Date(Date.now() + RETRY_CONFIG.delays[0] * 60000),
      lastError: data.error || data.reason || 'unknown',
      status: 'pending'
    };

    await admin.firestore()
      .collection(RETRY_QUEUE_COLLECTION)
      .add(queueItem);

    console.log(`üì• Added to retry queue: ${data.type} (${data.tokens.length} tokens)`);

  } catch (error) {
    console.error('‚ùå Error adding to retry queue:', error);
  }
}

/**
 * üîÑ **‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Retry Queue (Cloud Function)**
 * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
 */
exports.processRetryQueue = functions.pubsub
  .schedule('every 5 minutes')
  .onRun(async (context) => {
    try {
      console.log('üîÑ Processing retry queue...');

      const now = new Date();
      const queueSnapshot = await admin.firestore()
        .collection(RETRY_QUEUE_COLLECTION)
        .where('status', '==', 'pending')
        .where('nextAttempt', '<=', now)
        .limit(50) // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞ 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        .get();

      if (queueSnapshot.empty) {
        console.log('üì≠ Retry queue is empty');
        return null;
      }

      console.log(`üì§ Processing ${queueSnapshot.size} items from retry queue`);

      const promises = queueSnapshot.docs.map(async (doc) => {
        const data = doc.data();
        
        try {
          // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡πà‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          const response = await admin.messaging().sendMulticast({
            notification: data.message.notification,
            data: data.message.data || {},
            tokens: data.tokens
          });

          if (response.failureCount === 0) {
            // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue
            await doc.ref.delete();
            console.log(`‚úÖ Retry successful for ${data.type}`);
          } else if (data.attemptCount < data.maxAttempts) {
            // ‡∏¢‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            const nextAttemptDelay = RETRY_CONFIG.delays[data.attemptCount] || 30;
            
            await doc.ref.update({
              attemptCount: data.attemptCount + 1,
              lastAttempt: admin.firestore.FieldValue.serverTimestamp(),
              nextAttempt: new Date(Date.now() + nextAttemptDelay * 60000),
              lastError: `Failed attempt ${data.attemptCount + 1}`
            });
            
            console.log(`üîÑ Retry attempt ${data.attemptCount + 1}/${data.maxAttempts} for ${data.type}`);
          } else {
            // ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô failed
            await doc.ref.update({
              status: 'failed',
              finalAttempt: admin.firestore.FieldValue.serverTimestamp(),
              lastError: 'Max retry attempts exceeded'
            });
            
            console.log(`‚ùå Max retry attempts exceeded for ${data.type}`);
          }

        } catch (error) {
          console.error(`‚ùå Error processing retry item ${doc.id}:`, error);
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï error ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          await doc.ref.update({
            lastError: error.message,
            lastAttempt: admin.firestore.FieldValue.serverTimestamp()
          });
        }
      });

      await Promise.all(promises);
      console.log('‚úÖ Retry queue processing completed');

      return null;

    } catch (error) {
      console.error('‚ùå Error processing retry queue:', error);
      return null;
    }
  });

/**
 * üßπ **‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Retry Queue**
 * ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
 */
exports.cleanupRetryQueue = functions.pubsub
  .schedule('every 24 hours')
  .onRun(async (context) => {
    try {
      console.log('üßπ Cleaning up retry queue...');

      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      
      const oldItemsSnapshot = await admin.firestore()
        .collection(RETRY_QUEUE_COLLECTION)
        .where('createdAt', '<', oneDayAgo)
        .get();

      if (oldItemsSnapshot.empty) {
        console.log('üßπ No old items to clean up');
        return null;
      }

      const batch = admin.firestore().batch();
      oldItemsSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });

      await batch.commit();
      console.log(`üßπ Cleaned up ${oldItemsSnapshot.size} old retry queue items`);

      return null;

    } catch (error) {
      console.error('‚ùå Error cleaning up retry queue:', error);
      return null;
    }
  });

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
module.exports = {
  sendNotificationWithRetry,
  handleFailedTokens,
  addToRetryQueue,
  removeInvalidTokens
};
