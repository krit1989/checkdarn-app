const functions = require('firebase-functions');
const admin = require('firebase-admin');

// Initialize Firebase Admin (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ initialize)
if (!admin.apps.length) {
  admin.initializeApp();
}

const firestore = admin.firestore();

/**
 * Cloud Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Traffic Logs ‡πÄ‡∏Å‡πà‡∏≤
 * ‡∏ï‡∏≤‡∏° ‡∏û.‡∏£.‡∏ö.‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå 2560 ‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 26 - ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ 90 ‡∏ß‡∏±‡∏ô
 * 
 * Schedule: ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏µ 2 ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)
 */
exports.cleanupTrafficLogs = functions
  .region('asia-southeast1') // ‡πÉ‡∏ä‡πâ region ‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÉ‡∏ï‡πâ
  .pubsub
  .schedule('0 2 * * *') // ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏µ 2
  .timeZone('Asia/Bangkok')
  .onRun(async (context) => {
    console.log('üßπ Starting traffic logs cleanup process...');
    
    try {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà cutoff (90 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - 90);
      
      console.log(`üìÖ Cutoff date: ${cutoffDate.toISOString()}`);
      console.log(`üóìÔ∏è Will delete logs older than: ${cutoffDate.toLocaleDateString('th-TH')}`);
      
      // Query logs ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 90 ‡∏ß‡∏±‡∏ô
      const oldLogsQuery = firestore
        .collection('traffic_logs')
        .where('timestamp', '<', admin.firestore.Timestamp.fromDate(cutoffDate))
        .limit(500); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ 500 records ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô timeout
      
      const oldLogsSnapshot = await oldLogsQuery.get();
      
      if (oldLogsSnapshot.empty) {
        console.log('‚úÖ No old traffic logs found - cleanup not needed');
        return null;
      }
      
      console.log(`üóëÔ∏è Found ${oldLogsSnapshot.size} old traffic logs to delete`);
      
      // ‡πÉ‡∏ä‡πâ batch delete ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
      const batch = firestore.batch();
      let deleteCount = 0;
      
      oldLogsSnapshot.docs.forEach((doc) => {
        batch.delete(doc.ref);
        deleteCount++;
      });
      
      // Execute batch delete
      await batch.commit();
      
      console.log(`‚úÖ Successfully deleted ${deleteCount} old traffic logs`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á audit log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const auditLogEntry = {
        action: 'traffic_logs_cleanup',
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        deleted_count: deleteCount,
        cutoff_date: admin.firestore.Timestamp.fromDate(cutoffDate),
        function_name: 'cleanupTrafficLogs',
        status: 'success',
        compliance_note: '‡∏û.‡∏£.‡∏ö.‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå 2560 ‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 26 - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 90 ‡∏ß‡∏±‡∏ô',
      };
      
      await firestore.collection('audit_logs').add(auditLogEntry);
      console.log('üìù Audit log created for cleanup operation');
      
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ logs ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ schedule ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      if (oldLogsSnapshot.size === 500) {
        console.log('‚è∞ More old logs detected - will run again in next schedule');
      }
      
      return null;
      
    } catch (error) {
      console.error('‚ùå Error during traffic logs cleanup:', error);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á error audit log
      const errorAuditEntry = {
        action: 'traffic_logs_cleanup',
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        status: 'error',
        error_message: error.message,
        function_name: 'cleanupTrafficLogs',
      };
      
      try {
        await firestore.collection('audit_logs').add(errorAuditEntry);
      } catch (auditError) {
        console.error('‚ùå Failed to create error audit log:', auditError);
      }
      
      throw new functions.https.HttpsError('internal', 'Traffic logs cleanup failed');
    }
  });

/**
 * Cloud Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Traffic Logs (Admin only)
 */
exports.getTrafficLogsStats = functions
  .region('asia-southeast1')
  .https
  .onCall(async (data, context) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ authentication ‡πÅ‡∏•‡∏∞ admin role
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° business logic ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    const userDoc = await firestore.collection('users').doc(context.auth.uid).get();
    const userData = userDoc.data();
    
    if (!userData || userData.role !== 'admin') {
      throw new functions.https.HttpsError('permission-denied', 'Admin access required');
    }
    
    try {
      const { startDate, endDate } = data;
      
      // Default period: ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 30 ‡∏ß‡∏±‡∏ô
      const defaultEndDate = new Date();
      const defaultStartDate = new Date();
      defaultStartDate.setDate(defaultStartDate.getDate() - 30);
      
      const queryStartDate = startDate ? new Date(startDate) : defaultStartDate;
      const queryEndDate = endDate ? new Date(endDate) : defaultEndDate;
      
      console.log(`üìä Getting stats for period: ${queryStartDate.toISOString()} to ${queryEndDate.toISOString()}`);
      
      // Query traffic logs ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      const logsSnapshot = await firestore
        .collection('traffic_logs')
        .where('timestamp', '>=', admin.firestore.Timestamp.fromDate(queryStartDate))
        .where('timestamp', '<=', admin.firestore.Timestamp.fromDate(queryEndDate))
        .get();
      
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const stats = {
        total_events: logsSnapshot.size,
        unique_users: new Set(),
        action_breakdown: {},
        platform_breakdown: { android: 0, ios: 0, unknown: 0 },
        daily_breakdown: {},
      };
      
      logsSnapshot.docs.forEach((doc) => {
        const data = doc.data();
        
        // ‡∏ô‡∏±‡∏ö unique users
        if (data.user_id_hash && data.user_id_hash !== 'anonymous') {
          stats.unique_users.add(data.user_id_hash);
        }
        
        // ‡∏ô‡∏±‡∏ö actions
        if (data.action) {
          stats.action_breakdown[data.action] = (stats.action_breakdown[data.action] || 0) + 1;
        }
        
        // ‡∏ô‡∏±‡∏ö platforms
        const platform = data.device_info?.platform || 'unknown';
        stats.platform_breakdown[platform] = (stats.platform_breakdown[platform] || 0) + 1;
        
        // ‡∏ô‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        if (data.timestamp) {
          const day = data.timestamp.toDate().toISOString().split('T')[0];
          stats.daily_breakdown[day] = (stats.daily_breakdown[day] || 0) + 1;
        }
      });
      
      // ‡πÅ‡∏õ‡∏•‡∏á Set ‡πÄ‡∏õ‡πá‡∏ô number
      stats.unique_users = stats.unique_users.size;
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata
      stats.query_period = {
        start: queryStartDate.toISOString(),
        end: queryEndDate.toISOString(),
        days: Math.ceil((queryEndDate - queryStartDate) / (1000 * 60 * 60 * 24)),
      };
      
      stats.compliance_info = {
        law: '‡∏û.‡∏£.‡∏ö.‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå 2560 ‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 26',
        retention_period_days: 90,
        data_anonymization: 'User IDs ‡πÅ‡∏•‡∏∞ Device IDs ‡∏ñ‡∏π‡∏Å hash',
        location_privacy: '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ñ‡∏π‡∏Å‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠',
      };
      
      console.log(`‚úÖ Generated stats: ${stats.total_events} events, ${stats.unique_users} unique users`);
      
      return stats;
      
    } catch (error) {
      console.error('‚ùå Error getting traffic logs stats:', error);
      throw new functions.https.HttpsError('internal', 'Failed to get traffic logs statistics');
    }
  });

/**
 * Cloud Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Export Traffic Logs (Admin only, for legal compliance)
 */
exports.exportTrafficLogs = functions
  .region('asia-southeast1')
  .https
  .onCall(async (data, context) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ authentication ‡πÅ‡∏•‡∏∞ admin role
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated');
    }
    
    const userDoc = await firestore.collection('users').doc(context.auth.uid).get();
    const userData = userDoc.data();
    
    if (!userData || userData.role !== 'admin') {
      throw new functions.https.HttpsError('permission-denied', 'Admin access required');
    }
    
    try {
      const { startDate, endDate, requestReason } = data;
      
      if (!requestReason) {
        throw new functions.https.HttpsError('invalid-argument', 'Request reason is required');
      }
      
      // Log ‡∏Å‡∏≤‡∏£ export ‡πÄ‡∏û‡∏∑‡πà‡∏≠ audit trail
      const exportAuditEntry = {
        action: 'traffic_logs_export_request',
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        requested_by: context.auth.uid,
        request_reason: requestReason,
        date_range: { startDate, endDate },
        compliance_note: 'Export ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£',
      };
      
      await firestore.collection('audit_logs').add(exportAuditEntry);
      
      // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà include sensitive data)
      const exportData = {
        message: 'Export request logged successfully',
        audit_trail_id: exportAuditEntry.id,
        note: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢',
        contact_info: {
          email: 'admin@checkdarn.app',
          phone: '+66-xxx-xxx-xxxx',
        },
      };
      
      console.log(`üì§ Export request logged by user: ${context.auth.uid}, reason: ${requestReason}`);
      
      return exportData;
      
    } catch (error) {
      console.error('‚ùå Error processing export request:', error);
      throw new functions.https.HttpsError('internal', 'Failed to process export request');
    }
  });
