#!/usr/bin/env dart

import 'dart:io';

Future<void> main() async {
  print('üßπ Token Cleanup Script');
  print('=======================');
  print('');
  print('üì± FCM Tokens ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ expired ‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠:');
  print('   ‚Ä¢ User ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ uninstall/reinstall app');
  print('   ‚Ä¢ App data ‡∏ñ‡∏π‡∏Å clear');
  print('   ‚Ä¢ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á FCM');
  print('   ‚Ä¢ Device ‡∏ñ‡∏π‡∏Å factory reset');
  print('');
  print('üìä ‡∏à‡∏≤‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡πâ:');
  print('   ‚Ä¢ ‡∏°‡∏µ 13 tokens ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  print('   ‚Ä¢ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à 2 ‡∏Ñ‡∏ô');
  print('   ‚Ä¢ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß 11 tokens (expired)');
  print('');
  print('‚úÖ Cloud Function ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö invalid tokens ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
  print('   (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô removeInvalidTokens function)');
  print('');
  print('üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:');
  print('   1. ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ reinstall ‡πÅ‡∏≠‡∏õ ‡πÅ‡∏•‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà');
  print('   2. ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï notification settings ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ');
  print('   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ NotificationService.initialize() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
  print('');
  print('üîß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô manual cleanup?');
  stdout.write('‡∏Å‡∏î y ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ n ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ');

  String? response = stdin.readLineSync();
  if (response?.toLowerCase() == 'y') {
    print('');
    print('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á deploy script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup tokens...');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Cloud Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup
    await createCleanupFunction();

    print('');
    print('‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:');
    print('   1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô');
    print('   2. ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï notification permissions');
    print('   3. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ - token ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
  } else {
    print('');
    print('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ cleanup');
  }

  print('');
  print('üì± ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  print('   ‚Ä¢ ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ account ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
  print('   ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö notification ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
  print('   ‚Ä¢ ‡∏î‡∏π logs ‡πÉ‡∏ô Firebase Console');
}

Future<void> createCleanupFunction() async {
  final cleanupScript = '''
// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô functions/index.js
exports.cleanupInvalidTokens = functions.https.onCall(async (data, context) => {
  try {
    console.log('üßπ Manual token cleanup started...');
    
    const snapshot = await admin.firestore()
      .collection('user_tokens')
      .get();
    
    let cleaned = 0;
    const batch = admin.firestore().batch();
    
    for (const doc of snapshot.docs) {
      const userData = doc.data();
      const tokens = userData.tokens || [];
      
      if (tokens.length === 0) {
        // ‡∏•‡∏ö document ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ token
        batch.delete(doc.ref);
        cleaned++;
      }
    }
    
    if (cleaned > 0) {
      await batch.commit();
    }
    
    console.log(`‚úÖ Cleaned \${cleaned} empty token documents`);
    return { success: true, cleaned };
    
  } catch (error) {
    console.error('‚ùå Cleanup error:', error);
    return { success: false, error: error.message };
  }
});
''';

  print('üìù Cleanup function ready to add to functions/index.js');
  print('');
  print('üí° ‡πÅ‡∏ï‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ Cloud Function ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö invalid tokens ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß');
  print('   ‡πÉ‡∏ô removeInvalidTokens() ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å sendNewPostNotification');
}
