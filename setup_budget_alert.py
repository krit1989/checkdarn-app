#!/usr/bin/env python3
"""
Firebase Budget Alert Setup Script
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Budget Alert ‡πÉ‡∏ô Firebase Blaze Plan ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import json
import subprocess
import sys
from typing import Dict, List

def check_firebase_cli():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Firebase CLI ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        result = subprocess.run(['firebase', '--version'], 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ Firebase CLI ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß: {result.stdout.strip()}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Firebase CLI ‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô:")
        print("npm install -g firebase-tools")
        return False

def check_firebase_login():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Firebase"""
    try:
        result = subprocess.run(['firebase', 'projects:list'], 
                              capture_output=True, text=True, check=True)
        print("‚úÖ Firebase login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Firebase")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: firebase login")
        return False

def get_project_info():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• project ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .firebaserc
        with open('.firebaserc', 'r') as f:
            config = json.load(f)
            project_id = config.get('projects', {}).get('default')
            if project_id:
                print(f"üìã Project ID: {project_id}")
                return project_id
    except FileNotFoundError:
        pass
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ firebase use
    try:
        result = subprocess.run(['firebase', 'use'], 
                              capture_output=True, text=True, check=True)
        # Parse output ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ active project
        lines = result.stdout.split('\n')
        for line in lines:
            if 'currently using' in line.lower():
                project_id = line.split()[-1].strip('()')
                print(f"üìã Project ID: {project_id}")
                return project_id
    except subprocess.CalledProcessError:
        pass
    
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Firebase project")
    return None

def create_budget_alerts_config(project_id: str) -> Dict:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Budget Alerts"""
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î budget thresholds ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    budgets = [
        {
            "name": "firebase-storage-budget-warning",
            "amount": 10.0,  # $10 USD
            "currency": "USD",
            "threshold_percent": 50,  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 50%
            "description": "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Firebase Storage ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á budget"
        },
        {
            "name": "firebase-storage-budget-critical", 
            "amount": 10.0,  # $10 USD
            "currency": "USD",
            "threshold_percent": 80,  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 80%
            "description": "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Firebase Storage ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏° budget"
        },
        {
            "name": "firebase-firestore-budget",
            "amount": 5.0,   # $5 USD
            "currency": "USD", 
            "threshold_percent": 75,  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 75%
            "description": "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Firestore ‡πÄ‡∏Å‡∏¥‡∏ô budget"
        },
        {
            "name": "firebase-total-monthly-budget",
            "amount": 25.0,  # $25 USD ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            "currency": "USD",
            "threshold_percent": 90,  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 90%
            "description": "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Firebase ‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏° budget ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
        }
    ]
    
    return {
        "project_id": project_id,
        "budgets": budgets,
        "notification_emails": [
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° email ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            "admin@checkdarn.com",  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ email ‡∏à‡∏£‡∏¥‡∏á
            "kritchapon1989@gmail.com",  # ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô budget
        ],
        "slack_webhook": None,  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Slack webhook ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    }

def generate_cloud_functions_budget_monitor():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Cloud Functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitor budget"""
    
    cloud_function_code = '''
const functions = require('firebase-functions');
const admin = require('firebase-admin');
const { PubSub } = require('@google-cloud/pubsub');

admin.initializeApp();

// Budget alert handler
exports.budgetAlert = functions.pubsub.topic('budget-alerts').onPublish(async (message) => {
  const budgetData = message.json;
  
  console.log('üìä Budget Alert Received:', budgetData);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  const usagePercent = (budgetData.costAmount / budgetData.budgetAmount) * 100;
  
  if (usagePercent >= 90) {
    // ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£ upload ‡∏£‡∏π‡∏õ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    await admin.firestore().collection('app_settings').doc('storage_control').set({
      upload_enabled: false,
      reason: 'budget_exceeded',
      disabled_at: admin.firestore.FieldValue.serverTimestamp(),
      usage_percent: usagePercent
    });
    
    console.log('üî¥ EMERGENCY: Upload disabled due to budget limit');
    
  } else if (usagePercent >= 80) {
    // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î
    await admin.firestore().collection('app_settings').doc('storage_control').set({
      compression_mode: 'emergency',
      auto_delete_days: 30,
      warning_level: 'critical',
      usage_percent: usagePercent
    });
    
    console.log('üü° WARNING: Enabled aggressive compression mode');
    
  } else if (usagePercent >= 50) {
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î
    await admin.firestore().collection('app_settings').doc('storage_control').set({
      compression_mode: 'aggressive', 
      warning_level: 'moderate',
      usage_percent: usagePercent
    });
    
    console.log('üü† NOTICE: Enabled moderate compression mode');
  }
  
  // ‡∏™‡πà‡∏á notification ‡πÑ‡∏õ app
  await sendBudgetNotificationToApp(budgetData, usagePercent);
});

async function sendBudgetNotificationToApp(budgetData, usagePercent) {
  try {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å budget alert ‡∏•‡∏á Firestore
    await admin.firestore().collection('budget_alerts').add({
      cost_amount: budgetData.costAmount,
      budget_amount: budgetData.budgetAmount,
      usage_percent: usagePercent,
      alert_level: getAlertLevel(usagePercent),
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      project_id: budgetData.projectId || 'unknown'
    });
    
    console.log('üíæ Budget alert saved to Firestore');
    
  } catch (error) {
    console.error('‚ùå Error saving budget alert:', error);
  }
}

function getAlertLevel(usagePercent) {
  if (usagePercent >= 90) return 'emergency';
  if (usagePercent >= 80) return 'critical';
  if (usagePercent >= 50) return 'warning';
  return 'info';
}

// Storage usage monitor (‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
exports.monitorStorageUsage = functions.pubsub.schedule('every 1 hours').onRun(async (context) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Storage
    const cameraReports = await admin.firestore()
      .collection('camera_reports')
      .where('imageUrl', '!=', null)
      .get();
    
    const totalImages = cameraReports.size;
    const estimatedSizeGB = (totalImages * 200 * 1024) / (1024 * 1024 * 1024); // 200KB per image
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    await admin.firestore().collection('storage_stats').add({
      total_images: totalImages,
      estimated_size_gb: estimatedSizeGB,
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      cost_estimate_usd: estimatedSizeGB * 0.026 // $0.026 per GB
    });
    
    console.log(`üìä Storage monitored: ${totalImages} images, ${estimatedSizeGB.toFixed(2)} GB`);
    
  } catch (error) {
    console.error('‚ùå Error monitoring storage:', error);
  }
});
'''
    
    return cloud_function_code

def create_budget_monitoring_files():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö budget monitoring"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á functions/package.json
    package_json = {
        "name": "checkdarn-budget-monitor",
        "version": "1.0.0",
        "description": "Budget monitoring for CheckDarn app",
        "main": "index.js",
        "dependencies": {
            "firebase-admin": "^12.0.0",
            "firebase-functions": "^4.5.0",
            "@google-cloud/pubsub": "^4.0.0"
        },
        "scripts": {
            "deploy": "firebase deploy --only functions"
        }
    }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á directory functions/ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    import os
    os.makedirs('functions', exist_ok=True)
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
    with open('functions/package.json', 'w') as f:
        json.dump(package_json, f, indent=2)
    
    with open('functions/index.js', 'w') as f:
        f.write(generate_cloud_functions_budget_monitor())
    
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Cloud Functions ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

def print_manual_setup_instructions(config: Dict):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Budget Alert ‡πÅ‡∏ö‡∏ö manual"""
    
    print("\n" + "="*60)
    print("üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Budget Alert ‡πÉ‡∏ô Firebase Console")
    print("="*60)
    
    print(f"\nüéØ Project: {config['project_id']}")
    
    print("\nüìç ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î Firebase Console: https://console.firebase.google.com")
    print(f"2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å project: {config['project_id']}")
    print("3. ‡πÑ‡∏õ Settings > Project settings > Billing")
    print("4. ‡∏Ñ‡∏•‡∏¥‡∏Å 'Set up billing budgets and alerts'")
    
    print("\nüí∞ Budget Alert ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    for i, budget in enumerate(config['budgets'], 1):
        print(f"\n{i}. {budget['name']}")
        print(f"   üíµ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${budget['amount']} {budget['currency']}")
        print(f"   ‚ö†Ô∏è  ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà: {budget['threshold_percent']}%")
        print(f"   üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {budget['description']}")
    
    print(f"\nüìß Notification Emails:")
    for email in config['notification_emails']:
        print(f"   ‚Ä¢ {email}")
    
    print("\nüîó Google Cloud Console Budget:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î https://console.cloud.google.com/billing/budgets")
    print(f"2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å project: {config['project_id']}")
    print("3. ‡∏Ñ‡∏•‡∏¥‡∏Å 'CREATE BUDGET'")
    print("4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏° budget ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô")
    
    print("\nüìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°:")
    print("‚Ä¢ Firebase Console > Usage and billing")
    print("‚Ä¢ Google Cloud Console > Billing")
    print("‚Ä¢ Cloud Functions ‡∏à‡∏∞ monitor ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    print("\n‚ö° Cloud Functions Deployment:")
    print("cd functions && npm install")
    print("firebase deploy --only functions")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ Firebase Budget Alert Setup")
    print("="*40)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö prerequisites
    if not check_firebase_cli():
        return False
    
    if not check_firebase_login():
        return False
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• project
    project_id = get_project_info()
    if not project_id:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ Firebase project ‡πÑ‡∏î‡πâ")
        return False
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á config
    config = create_budget_alerts_config(project_id)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Cloud Functions
    create_budget_monitoring_files()
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config
    with open('budget-alert-config.json', 'w') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á budget-alert-config.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    print_manual_setup_instructions(config)
    
    print("\nüéâ Setup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Budget Alert")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1)
