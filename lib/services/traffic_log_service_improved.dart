import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:flutter/foundation.dart';
import 'dart:io';
import 'dart:convert';
import 'package:crypto/crypto.dart';
import 'auth_service.dart';

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö Traffic Log ‡∏ï‡∏≤‡∏° ‡∏û.‡∏£.‡∏ö.‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå 2560 ‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 26
/// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏ö‡∏ö Dynamic Retention (15-90 ‡∏ß‡∏±‡∏ô) ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
/// ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô
class ImprovedTrafficLogService {
  static const String _collectionName = 'traffic_logs';

  // ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö log
  static const String actionLogin = 'user_login';
  static const String actionLogout = 'user_logout';
  static const String actionPostReport = 'post_camera_report';
  static const String actionViewReports = 'view_reports';
  static const String actionUpdateLocation = 'update_location';
  static const String actionSearchReports = 'search_reports';
  static const String actionVoteReport = 'vote_report';
  static const String actionCommentReport = 'comment_report';
  static const String actionDeleteReport = 'delete_report';
  static const String actionAppStart = 'app_start';
  static const String actionAppResume = 'app_resume';

  static String? _currentSessionId;
  static String? _deviceId;
  static String? _appVersion;

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Traffic Log Service
  static Future<void> initialize() async {
    try {
      await _generateSessionId();
      await _getDeviceInfo();
      await _getAppVersion();

      // Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
      await logActivity(actionAppStart);

      if (kDebugMode) {
        print('üîç Improved Traffic Log Service initialized');
        print('üì± Session ID: $_currentSessionId');
        print('üì≤ Device ID: $_deviceId');
        print('üî¢ App Version: $_appVersion');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error initializing Improved Traffic Log Service: $e');
      }
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Session ID ‡πÅ‡∏ö‡∏ö hash
  static Future<void> _generateSessionId() async {
    try {
      final timestamp = DateTime.now().millisecondsSinceEpoch.toString();
      final random = DateTime.now().microsecond.toString();
      final input = '$timestamp$random${Platform.operatingSystem}';

      final bytes = utf8.encode(input);
      final digest = sha256.convert(bytes);
      _currentSessionId = digest.toString().substring(0, 16);
    } catch (e) {
      _currentSessionId = 'session_${DateTime.now().millisecondsSinceEpoch}';
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö hash
  static Future<void> _getDeviceInfo() async {
    try {
      final deviceInfo = DeviceInfoPlugin();
      String deviceIdentifier;

      if (Platform.isAndroid) {
        final androidInfo = await deviceInfo.androidInfo;
        deviceIdentifier = '${androidInfo.model}_${androidInfo.id}';
      } else if (Platform.isIOS) {
        final iosInfo = await deviceInfo.iosInfo;
        deviceIdentifier = '${iosInfo.model}_${iosInfo.identifierForVendor}';
      } else {
        deviceIdentifier = 'unknown_device';
      }

      // Hash device identifier
      final bytes = utf8.encode(deviceIdentifier);
      final digest = sha256.convert(bytes);
      _deviceId = digest.toString().substring(0, 16);
    } catch (e) {
      _deviceId = 'device_unknown';
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏≠‡∏õ
  static Future<void> _getAppVersion() async {
    try {
      final packageInfo = await PackageInfo.fromPlatform();
      _appVersion = packageInfo.version;
    } catch (e) {
      _appVersion = '1.0.0';
    }
  }

  /// Hash IP Address ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
  static String _hashIpAddress(String ipAddress) {
    // ‡∏õ‡∏±‡∏î IP ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á subnet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    final parts = ipAddress.split('.');
    if (parts.length == 4) {
      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô octet ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô 0 (‡πÄ‡∏ä‡πà‡∏ô 192.168.1.123 -> 192.168.1.0)
      final maskedIp = '${parts[0]}.${parts[1]}.${parts[2]}.0';
      return maskedIp;
    }
    return 'unknown';
  }

  /// ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß)
  static Map<String, double>? _roundLocation(Map<String, dynamic>? location) {
    if (location == null) return null;

    final lat = location['lat'] as double?;
    final lng = location['lng'] as double?;

    if (lat == null || lng == null) return null;

    // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (~1km accuracy)
    return {
      'lat': double.parse(lat.toStringAsFixed(2)),
      'lng': double.parse(lng.toStringAsFixed(2)),
    };
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏á Traffic Log (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
  static Future<void> logActivity(
    String action, {
    Map<String, dynamic>? location,
    Map<String, dynamic>? metadata,
  }) async {
    try {
      // Hash User ID
      final userId = AuthService.currentUser?.uid;
      final hashedUserId = userId != null
          ? sha256.convert(utf8.encode(userId)).toString().substring(0, 16)
          : 'anonymous';

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á log entry
      final logEntry = {
        'session_id': _currentSessionId ?? 'unknown',
        'user_id_hash': hashedUserId,
        'device_id_hash': _deviceId ?? 'unknown',
        'action': action,
        'timestamp': FieldValue.serverTimestamp(),
        'ip_address':
            _hashIpAddress('192.168.1.1'), // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å context ‡∏à‡∏£‡∏¥‡∏á
        'location': _roundLocation(location),
        'device_info': {
          'platform': Platform.operatingSystem,
          'version': Platform.operatingSystemVersion,
        },
        'app_version': _appVersion ?? '1.0.0',
        'metadata': metadata ?? {},
      };

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore
      await FirebaseFirestore.instance
          .collection(_collectionName)
          .add(logEntry);

      if (kDebugMode) {
        print(
            'üìù Traffic log recorded: $action (user: ${hashedUserId.substring(0, 8)}...)');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error logging activity: $e');
      }
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
    }
  }

  /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Traffic Log ‡πÅ‡∏ö‡∏ö Dynamic Retention (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
  static Future<void> cleanupOldLogs() async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
      final sevenDaysAgo = DateTime.now().subtract(const Duration(days: 7));
      final usageQuery = await FirebaseFirestore.instance
          .collection(_collectionName)
          .where('timestamp', isGreaterThan: Timestamp.fromDate(sevenDaysAgo))
          .get();

      final totalLogs = usageQuery.docs.length;
      final dailyUsage = totalLogs > 0 ? (totalLogs / 7).round() : 0;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ retention ‡πÅ‡∏ö‡∏ö dynamic
      int retentionDays;
      String usageLevel;

      if (dailyUsage < 1000) {
        retentionDays = 90; // Low usage: 90 ‡∏ß‡∏±‡∏ô
        usageLevel = 'LOW';
      } else if (dailyUsage < 10000) {
        retentionDays = 60; // Medium usage: 60 ‡∏ß‡∏±‡∏ô
        usageLevel = 'MEDIUM';
      } else if (dailyUsage < 50000) {
        retentionDays = 30; // High usage: 30 ‡∏ß‡∏±‡∏ô
        usageLevel = 'HIGH';
      } else {
        retentionDays = 15; // Very high usage: 15 ‡∏ß‡∏±‡∏ô
        usageLevel = 'VERY HIGH';
      }

      final cutoffDate = DateTime.now().subtract(Duration(days: retentionDays));

      if (kDebugMode) {
        print('üìä === DYNAMIC RETENTION ANALYSIS ===');
        print('üîß Total logs (7 days): $totalLogs');
        print('üìà Daily usage: $dailyUsage logs/day');
        print('üéØ Usage level: $usageLevel');
        print('üìÖ Dynamic retention: $retentionDays days');
        print('‚úÇÔ∏è Cleaning logs older than: ${cutoffDate.toIso8601String()}');
      }

      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      final querySnapshot = await FirebaseFirestore.instance
          .collection(_collectionName)
          .where('timestamp', isLessThan: Timestamp.fromDate(cutoffDate))
          .limit(500) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 500 records ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        final batch = FirebaseFirestore.instance.batch();

        for (final doc in querySnapshot.docs) {
          batch.delete(doc.reference);
        }

        await batch.commit();

        if (kDebugMode) {
          print('üóëÔ∏è Cleaned up ${querySnapshot.docs.length} old traffic logs');
          print('‚ö° Retention: $retentionDays days (level: $usageLevel)');
          print(
              'üíæ Storage saved: ~${(querySnapshot.docs.length * 0.5).toStringAsFixed(1)} KB');
        }
      } else {
        if (kDebugMode) {
          print('‚úÖ No old logs to clean (retention: $retentionDays days)');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error cleaning up traffic logs: $e');
      }
    }
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Storage ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
  static Future<Map<String, dynamic>> getStorageStats() async {
    try {
      final now = DateTime.now();
      final sevenDaysAgo = now.subtract(const Duration(days: 7));

      // ‡∏ô‡∏±‡∏ö logs ‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      final recentQuery = await FirebaseFirestore.instance
          .collection(_collectionName)
          .where('timestamp', isGreaterThan: Timestamp.fromDate(sevenDaysAgo))
          .get();

      // ‡∏ô‡∏±‡∏ö logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      final totalQuery =
          await FirebaseFirestore.instance.collection(_collectionName).get();

      final recentLogs = recentQuery.docs.length;
      final totalLogs = totalQuery.docs.length;
      final dailyAverage = recentLogs > 0 ? (recentLogs / 7).round() : 0;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (0.5 KB ‡∏ï‡πà‡∏≠ log entry)
      final estimatedSizeKB = (totalLogs * 0.5).round();
      final estimatedSizeMB = (estimatedSizeKB / 1024).toStringAsFixed(2);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì retention period ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      int retentionDays;
      String usageLevel;

      if (dailyAverage < 1000) {
        retentionDays = 90;
        usageLevel = 'LOW';
      } else if (dailyAverage < 10000) {
        retentionDays = 60;
        usageLevel = 'MEDIUM';
      } else if (dailyAverage < 50000) {
        retentionDays = 30;
        usageLevel = 'HIGH';
      } else {
        retentionDays = 15;
        usageLevel = 'VERY HIGH';
      }

      return {
        'total_logs': totalLogs,
        'recent_logs_7_days': recentLogs,
        'daily_average': dailyAverage,
        'usage_level': usageLevel,
        'retention_days': retentionDays,
        'estimated_size_kb': estimatedSizeKB,
        'estimated_size_mb': estimatedSizeMB,
        'last_updated': now.toIso8601String(),
      };
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting storage stats: $e');
      }
      return {};
    }
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Login Activity
  static Future<void> logLogin(String loginMethod) async {
    await logActivity(
      actionLogin,
      metadata: {
        'login_method': loginMethod,
        'timestamp_local': DateTime.now().toIso8601String(),
      },
    );
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Logout Activity
  static Future<void> logLogout() async {
    await logActivity(actionLogout);
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
  static Future<void> logPostReport({
    required String category,
    required Map<String, double> location,
    String? description,
  }) async {
    await logActivity(
      actionPostReport,
      location: {
        'lat': location['lat'],
        'lng': location['lng'],
      },
      metadata: {
        'category': category,
        'has_description': description != null && description.isNotEmpty,
        'description_length': description?.length ?? 0,
      },
    );
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  static Future<void> logViewReports({
    required Map<String, double> location,
    required double searchRadius,
    required int resultCount,
  }) async {
    await logActivity(
      actionViewReports,
      location: {
        'lat': location['lat'],
        'lng': location['lng'],
      },
      metadata: {
        'search_radius': searchRadius,
        'result_count': resultCount,
      },
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Traffic Log
  static Future<void> showManagementStats() async {
    try {
      final stats = await getStorageStats();

      if (kDebugMode) {
        print('üìä === TRAFFIC LOG MANAGEMENT STATS ===');
        print('üìù Total logs: ${stats['total_logs']}');
        print('üî• Recent (7 days): ${stats['recent_logs_7_days']}');
        print('üìà Daily average: ${stats['daily_average']} logs/day');
        print('üéØ Usage level: ${stats['usage_level']}');
        print('üìÖ Retention period: ${stats['retention_days']} days');
        print('üíæ Storage size: ${stats['estimated_size_mb']} MB');
        print('üîÑ Last updated: ${stats['last_updated']}');
        print('==========================================');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error showing management stats: $e');
      }
    }
  }
}
