import 'dart:async';
import 'dart:io';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'auth_service.dart';
import 'smart_location_service.dart';

/// üîî **Notification Service**
/// ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Push Notification ‡∏î‡πâ‡∏ß‡∏¢ Firebase Cloud Messaging (FCM)
///
/// **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:**
/// - ‡∏£‡∏±‡∏ö FCM Token ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Firestore
/// - ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏û‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (Foreground)
/// - ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏û‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (Background/Terminated)
/// - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏≠‡∏û
/// - ‡∏£‡∏∞‡∏ö‡∏ö Retry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
/// - Queue System ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
///
/// **‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:**
/// 1. ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡πÉ‡∏´‡∏°‡πà ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™
/// 2. ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™
///
/// **‡∏£‡∏∞‡∏ö‡∏ö Retry:**
/// - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Token ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
/// - ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£ Retry: 1, 5, 15 ‡∏ô‡∏≤‡∏ó‡∏µ
/// - Queue System ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
class NotificationService {
  static final FirebaseMessaging _firebaseMessaging =
      FirebaseMessaging.instance;
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Global key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ScaffoldMessenger ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà
  static final GlobalKey<NavigatorState> navigatorKey =
      GlobalKey<NavigatorState>();

  // Stream Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á UI
  static final StreamController<RemoteMessage> _messageStreamController =
      StreamController<RemoteMessage>.broadcast();

  /// Stream ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á notification ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
  static Stream<RemoteMessage> get onMessageReceived =>
      _messageStreamController.stream;

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  static bool _isInitialized = false;
  static String? _cachedToken;

  // üîÑ **Retry System ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏**
  static final List<Map<String, dynamic>> _retryQueue = [];
  static bool _isRefreshing = false;
  static int _retryAttempts = 0;
  static const int _maxRetryAttempts = 3;
  static const List<int> _retryDelayMinutes = [1, 5, 15]; // ‡∏ô‡∏≤‡∏ó‡∏µ
  static Timer? _retryTimer;

  /// üöÄ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Notification**
  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô app ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  static Future<void> initialize() async {
    if (_isInitialized) {
      print('üîî NotificationService: Already initialized');
      return;
    }

    try {
      print('üîî NotificationService: Starting initialization...');

      // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      await _requestPermission();

      // ‚úÖ **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á notification ‡πÉ‡∏ô foreground**
      await _firebaseMessaging.setForegroundNotificationPresentationOptions(
        alert: true, // ‡πÅ‡∏™‡∏î‡∏á alert
        badge: true, // ‡πÅ‡∏™‡∏î‡∏á badge
        sound: true, // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
      );

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ foreground message handler
      FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ background message handler
      FirebaseMessaging.onBackgroundMessage(_handleBackgroundMessage);

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ notification tap handler (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
      FirebaseMessaging.onMessageOpenedApp.listen(_handleNotificationTap);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ notification ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û‡πÑ‡∏´‡∏° (‡∏à‡∏≤‡∏Å terminated state)
      final RemoteMessage? initialMessage =
          await _firebaseMessaging.getInitialMessage();
      if (initialMessage != null) {
        _handleNotificationTap(initialMessage);
      }

      // ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å FCM token
      await _getFCMToken();

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      await _checkAndRefreshToken();

      // ‡∏ü‡∏±‡∏á token refresh
      _firebaseMessaging.onTokenRefresh.listen(_handleTokenRefresh);

      _isInitialized = true;
      print('‚úÖ NotificationService: Initialization completed');
    } catch (e, stackTrace) {
      print('‚ùå NotificationService: Initialization failed: $e');
      print('Stack trace: $stackTrace');
    }
  }

  /// üìú **‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô**
  static Future<void> _requestPermission() async {
    try {
      print('üîî NotificationService: Requesting notification permission...');

      final NotificationSettings settings =
          await _firebaseMessaging.requestPermission(
        alert: true,
        announcement: false,
        badge: true,
        carPlay: false,
        criticalAlert: false,
        provisional: false,
        sound: true,
      );

      print(
          'üîî NotificationService: Permission status: ${settings.authorizationStatus}');

      if (settings.authorizationStatus == AuthorizationStatus.authorized) {
        print('‚úÖ NotificationService: Notification permission granted');
      } else if (settings.authorizationStatus ==
          AuthorizationStatus.provisional) {
        print(
            '‚ö†Ô∏è NotificationService: Notification permission granted provisionally');
      } else {
        print('‚ùå NotificationService: Notification permission denied');
      }
    } catch (e) {
      print('‚ùå NotificationService: Error requesting permission: $e');
    }
  }

  /// üîë **‡∏î‡∏∂‡∏á FCM Token ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
  static Future<String?> _getFCMToken() async {
    try {
      print('üîî NotificationService: Getting FCM token...');

      final String? token = await _firebaseMessaging.getToken();
      if (token != null) {
        print(
            '‚úÖ NotificationService: FCM token received: ${token.substring(0, 20)}...');
        _cachedToken = token;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡∏•‡∏á Firestore (‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
        await _saveTokenToFirestore(token);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡∏•‡∏á SharedPreferences ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        await _saveTokenLocally(token);

        return token;
      } else {
        print('‚ùå NotificationService: Failed to get FCM token');
        return null;
      }
    } catch (e) {
      print('‚ùå NotificationService: Error getting FCM token: $e');
      return null;
    }
  }

  /// üíæ **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡∏•‡∏á Firestore ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á**
  static Future<void> _saveTokenToFirestore(String token) async {
    try {
      final String? userId = AuthService.currentUser?.uid;

      if (userId == null) {
        print(
            '‚ö†Ô∏è NotificationService: User not logged in, saving token locally only');
        return;
      }

      print(
          'üîî NotificationService: Saving token to Firestore for user: $userId');

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô collection 'users' -> document userId -> field 'fcmToken' (‡πÄ‡∏Å‡πà‡∏≤)
      await _firestore.collection('users').doc(userId).set({
        'fcmToken': token,
        'lastTokenUpdate': FieldValue.serverTimestamp(),
        'platform': Platform.isIOS ? 'ios' : 'android',
      }, SetOptions(merge: true));

      // üåç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Smart Geographic Targeting
      await SmartLocationService.updateUserLocation(forceUpdate: true);
      Map<String, dynamic> locationData =
          await SmartLocationService.getCurrentLocationData();

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô collection 'user_tokens' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud Functions (‡πÉ‡∏´‡∏°‡πà) + ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      await _firestore.collection('user_tokens').doc(userId).set({
        'userId': userId, // ‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ï userId field
        'tokens': [token], // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ device
        'lastUpdated': FieldValue.serverTimestamp(),
        'platform': Platform.isIOS ? 'ios' : 'android',
        'isActive': true,
        // üåç Smart Location Data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Geographic Targeting
        'lastKnownLat': locationData['lat'],
        'lastKnownLng': locationData['lng'],
        'lastKnownProvince': locationData['province'],
        'lastKnownDistrict': locationData['district'],
        'lastKnownSubDistrict': locationData['subDistrict'],
        'lastLocationUpdate': FieldValue.serverTimestamp(),
        'locationAccuracy': locationData['accuracy'],
      }, SetOptions(merge: true));

      print(
          '‚úÖ NotificationService: Token and location saved to both collections successfully');
      print(
          'üåç Location data: ${locationData['province']}, ${locationData['district']}');
    } catch (e) {
      print('‚ùå NotificationService: Error saving token to Firestore: $e');
    }
  }

  /// üì± **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡∏•‡∏á SharedPreferences**
  static Future<void> _saveTokenLocally(String token) async {
    try {
      final SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.setString('fcm_token', token);
      print('‚úÖ NotificationService: Token saved locally');
    } catch (e) {
      print('‚ùå NotificationService: Error saving token locally: $e');
    }
  }

  /// üîÑ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ Token ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡πÉ‡∏´‡∏°‡πà)**
  static Future<void> _handleTokenRefresh(String newToken) async {
    try {
      print(
          'üîî NotificationService: Token refreshed: ${newToken.substring(0, 20)}...');
      _cachedToken = newToken;

      await _saveTokenToFirestore(newToken);
      await _saveTokenLocally(newToken);

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô retry queue
      await _processRetryQueue();

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï retry attempts
      _retryAttempts = 0;
      _isRefreshing = false;
    } catch (e) {
      print('‚ùå NotificationService: Error handling token refresh: $e');
    }
  }

  /// üîç **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Token**
  static Future<void> _checkAndRefreshToken() async {
    try {
      print('üîî NotificationService: Checking token validity...');

      final String? currentToken = await _firebaseMessaging.getToken();
      if (currentToken == null) {
        print(
            '‚ö†Ô∏è NotificationService: No token available, starting retry process');
        await _retryTokenRefresh();
      } else {
        print('‚úÖ NotificationService: Token is valid');
        _cachedToken = currentToken;
        await _saveTokenToFirestore(currentToken);
      }
    } catch (e) {
      print('‚ùå NotificationService: Error checking token: $e');
      await _retryTokenRefresh();
    }
  }

  /// üîÑ **‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Token ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á**
  static Future<void> _retryTokenRefresh() async {
    if (_isRefreshing) {
      print('üîî NotificationService: Token refresh already in progress');
      return;
    }

    if (_retryAttempts >= _maxRetryAttempts) {
      print('‚ùå NotificationService: Max retry attempts reached');
      return;
    }

    _isRefreshing = true;
    _retryAttempts++;

    try {
      print(
          'üîî NotificationService: Retry attempt $_retryAttempts/$_maxRetryAttempts');

      // ‡∏£‡∏≠‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      final delayMinutes = _retryDelayMinutes[_retryAttempts - 1];
      print(
          'üîî NotificationService: Waiting $delayMinutes minutes before retry...');

      _retryTimer?.cancel();
      _retryTimer = Timer(Duration(minutes: delayMinutes), () async {
        try {
          // ‡∏•‡∏ö token ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà
          await _firebaseMessaging.deleteToken();
          await Future.delayed(const Duration(seconds: 2));

          final String? newToken = await _firebaseMessaging.getToken();
          if (newToken != null) {
            print('‚úÖ NotificationService: Successfully got new token on retry');
            _cachedToken = newToken;
            await _saveTokenToFirestore(newToken);
            await _saveTokenLocally(newToken);

            // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
            await _processRetryQueue();

            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï retry attempts
            _retryAttempts = 0;
            _isRefreshing = false;
          } else {
            print('‚ùå NotificationService: Failed to get token on retry');
            // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            if (_retryAttempts < _maxRetryAttempts) {
              _isRefreshing = false;
              await _retryTokenRefresh();
            }
          }
        } catch (e) {
          print('‚ùå NotificationService: Error in retry process: $e');
          _isRefreshing = false;

          // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
          if (_retryAttempts < _maxRetryAttempts) {
            await _retryTokenRefresh();
          }
        }
      });
    } catch (e) {
      print('‚ùå NotificationService: Error setting up retry: $e');
      _isRefreshing = false;
    }
  }

  /// üì§ **‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Retry Queue**
  static Future<void> _processRetryQueue() async {
    try {
      if (_retryQueue.isEmpty) {
        print('üîî NotificationService: Retry queue is empty');
        return;
      }

      print(
          'üîî NotificationService: Processing ${_retryQueue.length} items in retry queue');

      final List<Map<String, dynamic>> queueCopy = List.from(_retryQueue);
      _retryQueue.clear();

      for (final item in queueCopy) {
        try {
          await _sendQueuedNotification(item);
        } catch (e) {
          print('‚ùå NotificationService: Error processing queued item: $e');
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          _retryQueue.add(item);
        }
      }

      print('‚úÖ NotificationService: Retry queue processed');
    } catch (e) {
      print('‚ùå NotificationService: Error processing retry queue: $e');
    }
  }

  /// üì® **‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô Queue**
  static Future<void> _sendQueuedNotification(Map<String, dynamic> item) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      final String type = item['type'] ?? 'unknown';
      final Map<String, dynamic> data = item['data'] ?? {};

      print('üîî NotificationService: Sending queued notification: $type');

      // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á notification ‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      // ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏Ñ‡πà log ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
      print('üì§ NotificationService: Would send notification with data: $data');
    } catch (e) {
      print('‚ùå NotificationService: Error sending queued notification: $e');
      rethrow;
    }
  }

  /// üì• **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Retry Queue**
  static void _addToRetryQueue(String type, Map<String, dynamic> data) {
    try {
      final item = {
        'type': type,
        'data': data,
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      };

      _retryQueue.add(item);
      print(
          'üì• NotificationService: Added to retry queue: $type (Queue size: ${_retryQueue.length})');
    } catch (e) {
      print('‚ùå NotificationService: Error adding to retry queue: $e');
    }
  }

  /// üìû **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏û‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (Foreground)**
  static void _handleForegroundMessage(RemoteMessage message) {
    try {
      print('üîî NotificationService: Foreground message received');
      print('Title: ${message.notification?.title}');
      print('Body: ${message.notification?.body}');
      print('Data: ${message.data}');

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Stream ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á in-app notification)
      _messageStreamController.add(message);

      // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á SnackBar ‡∏´‡∏£‡∏∑‡∏≠ in-app notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏≠‡∏û
      // ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà notification ‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      print(
          '‚úÖ NotificationService: Foreground message processed (no in-app display)');
    } catch (e) {
      print('‚ùå NotificationService: Error handling foreground message: $e');

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ retry queue ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      _addToRetryQueue('foreground_message', {
        'notification': {
          'title': message.notification?.title,
          'body': message.notification?.body,
        },
        'data': message.data,
      });
    }
  }

  /// Ô∏è **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡∏∞ Notification**
  static void _handleNotificationTap(RemoteMessage message) {
    try {
      print('üîî NotificationService: Notification tapped');
      print('Data: ${message.data}');

      _handleNotificationAction(message);
    } catch (e) {
      print('‚ùå NotificationService: Error handling notification tap: $e');
    }
  }

  /// ‚ö° **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Action ‡∏Ç‡∏≠‡∏á Notification**
  /// ‚ö†Ô∏è **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡∏∞ notification ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  /// ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ notification ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏û
  static void _handleNotificationAction(RemoteMessage message) {
    try {
      final Map<String, dynamic> data = message.data;
      final String? type = data['type'];
      final String? reportId = data['reportId'];
      final String? action = data['action'];

      print(
          'üîî NotificationService: User tapped notification - Type: $type, Action: $action, ReportId: $reportId');

      final BuildContext? context = navigatorKey.currentContext;
      if (context == null) {
        print('‚ö†Ô∏è NotificationService: No context available for navigation');
        return;
      }

      // ‚úÖ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡∏∞ notification ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ List Screen
      // ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î Comment ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      switch (action) {
        case 'open_comment':
          // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ List Screen ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î Comment ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
          _navigateToListScreen(context);
          break;

        case 'open_post':
          // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ List Screen
          _navigateToListScreen(context);
          break;

        default:
          // Legacy support - ‡πÉ‡∏ä‡πâ type ‡πÅ‡∏ó‡∏ô action
          switch (type) {
            case 'new_comment':
              // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ List Screen ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î Comment ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
              _navigateToListScreen(context);
              break;
            case 'new_post':
              _navigateToListScreen(context);
              break;
            default:
              print(
                  '‚ö†Ô∏è NotificationService: Unknown notification type/action: $type/$action');
              _navigateToListScreen(context);
          }
      }
    } catch (e) {
      print('‚ùå NotificationService: Error handling notification action: $e');
    }
  }

  /// üìÑ **‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á List Screen**
  static void _navigateToListScreen(BuildContext context) {
    try {
      print('üîî NotificationService: Attempting to navigate to List Screen');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ List Screen ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final String currentRoute = ModalRoute.of(context)?.settings.name ?? '';
      print('üîî Current route: $currentRoute');

      if (currentRoute.contains('list') || currentRoute == '/list') {
        print('üîî NotificationService: Already on List Screen');
        return;
      }

      // ‚úÖ ‡πÉ‡∏ä‡πâ pushNamedAndRemoveUntil ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á List Screen
      // ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ route ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ó‡∏£‡∏Å‡∏Ç‡∏ß‡∏≤‡∏á
      Navigator.of(context).pushNamedAndRemoveUntil(
        '/list',
        (Route<dynamic> route) => route.settings.name == '/' || route.isFirst,
      );

      print('‚úÖ NotificationService: Navigation to List Screen requested');
    } catch (e) {
      print('‚ùå NotificationService: Error navigating to List Screen: $e');
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ
      try {
        Navigator.of(context).pushNamed('/list');
        print('‚úÖ NotificationService: Fallback navigation to List Screen');
      } catch (fallbackError) {
        print(
            '‚ùå NotificationService: Fallback navigation also failed: $fallbackError');
      }
    }
  }

  ///  **‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Token ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö**
  static Future<void> updateTokenOnLogin() async {
    try {
      print('üîî NotificationService: Updating token on login...');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
      await _checkAndRefreshToken();

      final String? token = _cachedToken ?? await _getFCMToken();
      if (token != null) {
        await _saveTokenToFirestore(token);

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login
        await _processRetryQueue();
      } else {
        print(
            '‚ö†Ô∏è NotificationService: No token available, starting retry process');
        await _retryTokenRefresh();
      }
    } catch (e) {
      print('‚ùå NotificationService: Error updating token on login: $e');

      // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° retry
      await _retryTokenRefresh();
    }
  }

  /// üóëÔ∏è **‡∏•‡∏ö Token ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö**
  static Future<void> removeTokenOnLogout() async {
    try {
      print('üîî NotificationService: Removing token on logout...');

      final String? userId = AuthService.currentUser?.uid;
      if (userId != null) {
        await _firestore.collection('users').doc(userId).update({
          'fcmToken': FieldValue.delete(),
          'lastTokenUpdate': FieldValue.serverTimestamp(),
        });
      }

      // ‡∏•‡∏ö token ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢
      final SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.remove('fcm_token');

      _cachedToken = null;
      print('‚úÖ NotificationService: Token removed successfully');
    } catch (e) {
      print('‚ùå NotificationService: Error removing token on logout: $e');
    }
  }

  /// üìä **‡∏î‡∏∂‡∏á Token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô**
  static String? get currentToken => _cachedToken;

  /// üìä **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Retry System**
  static Map<String, dynamic> get retryStatus => {
        'isRefreshing': _isRefreshing,
        'retryAttempts': _retryAttempts,
        'maxRetryAttempts': _maxRetryAttempts,
        'queueSize': _retryQueue.length,
        'hasActiveTimer': _retryTimer?.isActive ?? false,
      };

  /// üîÑ **‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Token (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug)**
  static Future<void> forceTokenRefresh() async {
    try {
      print('üîî NotificationService: Force refreshing token...');

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï retry attempts
      _retryAttempts = 0;
      _isRefreshing = false;

      await _retryTokenRefresh();
    } catch (e) {
      print('‚ùå NotificationService: Error force refreshing token: $e');
    }
  }

  /// üì§ **‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Retry Queue (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug)**
  static Future<void> forceProcessRetryQueue() async {
    try {
      print('üîî NotificationService: Force processing retry queue...');
      await _processRetryQueue();
    } catch (e) {
      print('‚ùå NotificationService: Error force processing retry queue: $e');
    }
  }

  /// üßπ **‡∏•‡πâ‡∏≤‡∏á Retry Queue**
  static void clearRetryQueue() {
    try {
      final int oldSize = _retryQueue.length;
      _retryQueue.clear();
      print('üîî NotificationService: Cleared retry queue (was $oldSize items)');
    } catch (e) {
      print('‚ùå NotificationService: Error clearing retry queue: $e');
    }
  }

  /// üö´ **‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô**
  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  static Future<void> disableNotifications() async {
    try {
      print('üîî NotificationService: Disabling notifications...');

      final String? userId = AuthService.currentUser?.uid;
      if (userId != null) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await _firestore
            .collection('user_tokens')
            .where('userId', isEqualTo: userId)
            .get()
            .then((snapshot) async {
          for (var doc in snapshot.docs) {
            await doc.reference.update({
              'isActive': false,
              'lastUpdated': FieldValue.serverTimestamp(),
            });
          }
        });
      }

      // ‡∏•‡∏ö FCM token
      await _firebaseMessaging.deleteToken();

      // ‡∏•‡∏ö token ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢
      final SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.remove('fcm_token');

      _cachedToken = null;
      print('‚úÖ NotificationService: Notifications disabled successfully');
    } catch (e) {
      print('‚ùå NotificationService: Error disabling notifications: $e');
    }
  }

  /// üîî **‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏û‡∏™‡πÉ‡∏´‡∏°‡πà**
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  static Future<void> triggerNewPostNotification(String reportId) async {
    try {
      print(
          'üîî NotificationService: Triggering new post notification for report: $reportId');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ service ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!_isInitialized) {
        print('‚ö†Ô∏è NotificationService: Not initialized, initializing now...');
        await initialize();
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ FCM token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (_cachedToken == null) {
        print(
            '‚ö†Ô∏è NotificationService: No FCM token available, getting new token...');
        await _getFCMToken();
      }

      // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà frontend
      // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Cloud Functions ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ document ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô reports collection
      print(
          '‚úÖ NotificationService: New post notification triggered successfully');
      print(
          'üìù Note: Cloud Functions will handle the actual notification sending');
    } catch (e) {
      print(
          '‚ùå NotificationService: Error triggering new post notification: $e');
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™
    }
  }

  /// üßπ **‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Notification**
  static void dispose() {
    try {
      // ‡∏õ‡∏¥‡∏î Stream Controller
      _messageStreamController.close();

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Timer ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
      _retryTimer?.cancel();
      _retryTimer = null;

      // ‡∏•‡πâ‡∏≤‡∏á retry queue
      _retryQueue.clear();

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
      _isInitialized = false;
      _isRefreshing = false;
      _retryAttempts = 0;
      _cachedToken = null;

      print('üîî NotificationService: Disposed with cleanup');
    } catch (e) {
      print('‚ùå NotificationService: Error disposing: $e');
    }
  }
}

/// üåê **Background Message Handler**
/// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏û‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
///
/// **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô top-level function (‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô class)
/// ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ annotation @pragma('vm:entry-point')
@pragma('vm:entry-point')
Future<void> _handleBackgroundMessage(RemoteMessage message) async {
  try {
    print('üîî NotificationService: Background message received');
    print('Title: ${message.notification?.title}');
    print('Body: ${message.notification?.body}');
    print('Data: ${message.data}');

    // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    // ‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
  } catch (e) {
    print('‚ùå NotificationService: Error handling background message: $e');
  }
}
