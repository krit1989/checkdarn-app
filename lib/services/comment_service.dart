import 'package:cloud_firestore/cloud_firestore.dart';

class CommentService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const int _maxCommentsPerDay = 10; // 10 ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
  static const int _maxCommentLength = 200; // 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  static Future<bool> canUserCommentToday(String userId) async {
    try {
      final today = DateTime.now();
      final startOfDay = DateTime(today.year, today.month, today.day);
      final endOfDay = startOfDay.add(const Duration(days: 1));

      // ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      final todayComments = await _firestore
          .collectionGroup('comments') // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å comments collection
          .where('userId', isEqualTo: userId)
          .where('timestamp',
              isGreaterThanOrEqualTo: Timestamp.fromDate(startOfDay))
          .where('timestamp', isLessThan: Timestamp.fromDate(endOfDay))
          .get();

      final commentCount = todayComments.docs.length;
      print(
          'Debug: User $userId has commented $commentCount times today (limit: $_maxCommentsPerDay)');

      return commentCount < _maxCommentsPerDay;
    } catch (e) {
      print('Error checking daily comment limit: $e');
      return true; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ
    }
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  static Future<String> addComment({
    required String reportId,
    required String comment,
    required String userId,
    String? displayName, // ‡πÄ‡∏û‡∏¥‡πà‡∏° displayName ‡πÄ‡∏õ‡πá‡∏ô optional
  }) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      if (comment.trim().length > _maxCommentLength) {
        throw Exception('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');
      }

      if (comment.trim().isEmpty) {
        throw Exception('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
      final canComment = await canUserCommentToday(userId);
      if (!canComment) {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ');
      }

      // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
      final filteredComment = _filterBadWords(comment.trim());

      final now = DateTime.now();
      final expireAt =
          now.add(const Duration(days: 7)); // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡∏≤‡∏° TTL ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå

      final docRef = await _firestore
          .collection('reports')
          .doc(reportId)
          .collection('comments')
          .add({
        'comment': filteredComment,
        'userId': userId,
        'displayName': displayName ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠', // ‡πÄ‡∏û‡∏¥‡πà‡∏° displayName
        'timestamp': FieldValue.serverTimestamp(),
        'expireAt': Timestamp.fromDate(expireAt), // TTL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
        'reported': false, // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
        'reportCount': 0, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
      });

      print('Comment added successfully with ID: ${docRef.id}');

      // üîî ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
      await _notifyPostOwner(reportId, userId, filteredComment, displayName);

      return docRef.id;
    } catch (e) {
      print('Error adding comment: $e');
      rethrow;
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
  static Stream<QuerySnapshot> getCommentsStream(String reportId) {
    return _firestore
        .collection('reports')
        .doc(reportId)
        .collection('comments')
        .orderBy('timestamp', descending: true) // ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
        .limit(50) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 50 ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        .snapshots();
  }

  /// ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  static Future<void> reportComment({
    required String reportId,
    required String commentId,
    required String reporterId,
  }) async {
    try {
      final commentRef = _firestore
          .collection('reports')
          .doc(reportId)
          .collection('comments')
          .doc(commentId);

      await commentRef.update({
        'reportCount': FieldValue.increment(1),
        'reported': true,
        'lastReportedBy': reporterId,
        'lastReportedAt': FieldValue.serverTimestamp(),
      });

      print('Comment reported successfully');
    } catch (e) {
      print('Error reporting comment: $e');
      rethrow;
    }
  }

  /// ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
  static Future<int> getCommentCount(String reportId) async {
    try {
      final snapshot = await _firestore
          .collection('reports')
          .doc(reportId)
          .collection('comments')
          .get();

      return snapshot.docs.length;
    } catch (e) {
      print('Error getting comment count: $e');
      return 0;
    }
  }

  /// ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢)
  static String _filterBadWords(String text) {
    final badWords = [
      '‡∏´‡πà‡∏≤',
      '‡πÄ‡∏´‡∏µ‡πâ‡∏¢',
      '‡∏™‡∏±‡∏™',
      '‡∏Ñ‡∏ß‡∏≤‡∏¢',
      '‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™',
      '‡πÄ‡∏®‡∏£‡πâ‡∏≤',
      '‡πÇ‡∏á‡πà',
      '‡∏õ‡∏µ‡πâ',
      '‡πÅ‡∏°‡πà‡∏á',
      '‡∏ü‡∏≤‡∏Ñ',
      'fuck',
      'shit',
      'damn'
    ];

    String filteredText = text;
    for (String word in badWords) {
      final regex = RegExp(word, caseSensitive: false);
      filteredText = filteredText.replaceAll(regex, '*' * word.length);
    }

    return filteredText;
  }

  /// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
  static String formatCommentTime(Timestamp? timestamp) {
    if (timestamp == null) return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';

    final dateTime = timestamp.toDate();
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inMinutes < 1) {
      return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß';
    } else if (difference.inDays < 1) {
      return '${difference.inHours} ‡∏ä‡∏°.‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß';
    } else if (difference.inDays < 7) {
      return '${difference.inDays} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß';
    } else {
      return '${dateTime.day}/${dateTime.month}/${dateTime.year + 543}';
    }
  }

  /// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
  static int get maxCommentsPerDay => _maxCommentsPerDay;
  static int get maxCommentLength => _maxCommentLength;

  /// üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  /// - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Index ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ doc.get() ‡πÅ‡∏ó‡∏ô query
  /// - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏≠‡∏á
  static Future<void> _notifyPostOwner(
    String reportId,
    String commenterUserId,
    String comment,
    String? commenterDisplayName,
  ) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
      final reportDoc =
          await _firestore.collection('reports').doc(reportId).get();

      if (!reportDoc.exists) {
        print('Report not found: $reportId');
        return;
      }

      final reportData = reportDoc.data() as Map<String, dynamic>;
      final postOwnerId = reportData['userId'] as String?;
      final postTitle = reportData['title'] as String? ??
          reportData['description'] as String? ??
          '‡πÇ‡∏û‡∏™‡∏ï‡πå';

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏≠‡∏á
      if (postOwnerId == null || postOwnerId == commenterUserId) {
        print('Skip notification: same user or no owner');
        return;
      }

      print('üîî Sending notification to post owner: $postOwnerId');
      print('üìù Post: $postTitle');
      print(
          'üí¨ Comment: ${comment.length > 50 ? comment.substring(0, 50) + '...' : comment}');
      print('üë§ Commenter: ${commenterDisplayName ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}');

      // TODO: ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏ú‡πà‡∏≤‡∏ô FCM
      // - ‡∏î‡∏∂‡∏á FCM token ‡∏Ç‡∏≠‡∏á postOwnerId
      // - ‡∏™‡πà‡∏á push notification
      // - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    } catch (e) {
      print('Error notifying post owner: $e');
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    }
  }
}
