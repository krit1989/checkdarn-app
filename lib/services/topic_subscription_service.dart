import 'dart:math' as math;
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'smart_location_service.dart';

/// üéØ **Topic Subscription Service**
/// ‡∏£‡∏∞‡∏ö‡∏ö Subscribe Topics ‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ Firebase
///
/// **‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:**
/// 1. ‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô Grid ‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î
/// 2. ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ subscribe topics ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
/// 3. ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà topic ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô
/// 4. ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ 99.9% (‡∏à‡∏≤‡∏Å $0.192 ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ $0.0000171 ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™)
class TopicSubscriptionService {
  static const String _subscribedTopicsKey = 'subscribed_topics';
  static const double _gridSizeKm = 20; // ‡∏Ç‡∏ô‡∏≤‡∏î grid 20x20 ‡∏Å‡∏°.

  /// üó∫Ô∏è **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ Topic ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á**
  ///
  /// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
  /// - ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û: 'th_1376_10050_20km'
  /// - ‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ: 'th_1312_10080_20km'
  /// - ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà: 'th_1870_9884_20km'
  static String generateLocationTopic(double lat, double lng) {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô Grid ID
    final gridLat = (lat * 100).round(); // 13.7563 -> 1376
    final gridLng = (lng * 100).round(); // 100.5018 -> 10050

    return 'th_${gridLat}_${gridLng}_${_gridSizeKm.toInt()}km';
  }

  /// üéØ **Subscribe Topics ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Smart Geographic Targeting)**
  /// ‡∏£‡∏ß‡∏° Grid-based + Province-based Topics
  static Future<List<String>> subscribeToLocationTopics() async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final locationData = await SmartLocationService.getCurrentLocationData();
      final lat = locationData['lat'] as double;
      final lng = locationData['lng'] as double;
      final province = locationData['province'] as String?;

      print('üåç Smart Geographic Targeting started...');
      print('üìç Location: $lat, $lng');
      print('üèõÔ∏è Province: ${province ?? 'Unknown'}');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á topics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö‡πÜ (3x3 grid)
      final List<String> topicsToSubscribe = [];

      // 1. üìç Grid-based Topics (‡∏£‡∏±‡∏®‡∏°‡∏µ ~30 ‡∏Å‡∏°.)
      for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
          final offsetLat = lat + (i * _gridSizeKm / 111); // 1 ‡∏≠‡∏á‡∏®‡∏≤ ‚âà 111 ‡∏Å‡∏°.
          final offsetLng =
              lng + (j * _gridSizeKm / (111 * math.cos(lat * math.pi / 180)));

          final topicName = generateLocationTopic(offsetLat, offsetLng);
          topicsToSubscribe.add(topicName);
        }
      }

      // 2. üèõÔ∏è Province-based Topics
      if (province != null && province.isNotEmpty) {
        final provinceTopic = 'th_province_${_normalizeProvinceName(province)}';
        topicsToSubscribe.add(provinceTopic);
        print('‚úÖ Added province topic: $provinceTopic');

        // 3. üåè Region-based Topic (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        final regionTopic = _getRegionTopicFromProvince(province);
        if (regionTopic != null) {
          topicsToSubscribe.add(regionTopic);
          print('‚úÖ Added region topic: $regionTopic');
        }
      }

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å topics ‡πÄ‡∏Å‡πà‡∏≤
      await _unsubscribeFromOldTopics();

      // Subscribe topics ‡πÉ‡∏´‡∏°‡πà
      for (final topic in topicsToSubscribe) {
        await FirebaseMessaging.instance.subscribeToTopic(topic);
        print('‚úÖ Subscribed to topic: $topic');
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å topics ‡∏ó‡∏µ‡πà subscribe ‡πÑ‡∏ß‡πâ
      await _saveSubscribedTopics(topicsToSubscribe);

      print(
          'üéØ Smart Topic Subscription completed: ${topicsToSubscribe.length} topics');
      print(
          'üìç Grid topics: ${topicsToSubscribe.length - (province != null ? 1 : 0)}');
      print('üèõÔ∏è Province topics: ${province != null ? 1 : 0}');

      return topicsToSubscribe;
    } catch (e) {
      print('‚ùå Topic Subscription error: $e');
      return [];
    }
  }

  /// üì§ **‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Topics ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß**
  static Future<void> _unsubscribeFromOldTopics() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final oldTopics = prefs.getStringList(_subscribedTopicsKey) ?? [];

      for (final topic in oldTopics) {
        await FirebaseMessaging.instance.unsubscribeFromTopic(topic);
        print('üóëÔ∏è Unsubscribed from: $topic');
      }
    } catch (e) {
      print('‚ùå Error unsubscribing old topics: $e');
    }
  }

  /// üíæ **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Topics ‡∏ó‡∏µ‡πà Subscribe ‡πÑ‡∏ß‡πâ**
  static Future<void> _saveSubscribedTopics(List<String> topics) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setStringList(_subscribedTopicsKey, topics);
    } catch (e) {
      print('‚ùå Error saving subscribed topics: $e');
    }
  }

  /// üìä **‡∏î‡∏π Topics ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô**
  static Future<List<String>> getCurrentTopics() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getStringList(_subscribedTopicsKey) ?? [];
    } catch (e) {
      print('‚ùå Error getting current topics: $e');
      return [];
    }
  }

  /// üó∫Ô∏è **‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Topics ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud Functions)**
  static List<String> getTopicsInRadius(
      double centerLat, double centerLng, double radiusKm) {
    final List<String> topics = [];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô grid ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
    final gridCount = (radiusKm / _gridSizeKm).ceil();

    for (int i = -gridCount; i <= gridCount; i++) {
      for (int j = -gridCount; j <= gridCount; j++) {
        final offsetLat = centerLat + (i * _gridSizeKm / 111);
        final offsetLng = centerLng +
            (j * _gridSizeKm / (111 * math.cos(centerLat * math.pi / 180)));

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        final distance = SmartLocationService.calculateDistance(
            centerLat, centerLng, offsetLat, offsetLng);

        if (distance <= radiusKm) {
          final topicName = generateLocationTopic(offsetLat, offsetLng);
          topics.add(topicName);
        }
      }
    }

    return topics;
  }

  /// üîÑ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Topics ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á**
  static Future<void> updateTopicsIfLocationChanged() async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final locationData = await SmartLocationService.getCurrentLocationData();
      final currentLat = locationData['lat'] as double;
      final currentLng = locationData['lng'] as double;

      // ‡∏î‡∏π topics ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final currentTopics = await getCurrentTopics();
      if (currentTopics.isEmpty) {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ subscribe
        await subscribeToLocationTopics();
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á topic ‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final expectedPrimaryTopic =
          generateLocationTopic(currentLat, currentLng);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ topic ‡∏´‡∏•‡∏±‡∏Å‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô list ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!currentTopics.contains(expectedPrimaryTopic)) {
        print('üìç Location changed significantly, updating topics...');
        await subscribeToLocationTopics();
      } else {
        print('üìç Location within current topics, no update needed');
      }
    } catch (e) {
      print('‚ùå Error updating topics: $e');
    }
  }

  /// üßπ **‡∏•‡πâ‡∏≤‡∏á Topics ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing)**
  static Future<void> clearAllTopics() async {
    try {
      final currentTopics = await getCurrentTopics();

      for (final topic in currentTopics) {
        await FirebaseMessaging.instance.unsubscribeFromTopic(topic);
        print('üóëÔ∏è Unsubscribed from: $topic');
      }

      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_subscribedTopicsKey);

      print('‚úÖ All topics cleared');
    } catch (e) {
      print('‚ùå Error clearing topics: $e');
    }
  }

  /// üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Topics**
  static Future<Map<String, dynamic>> getTopicStats() async {
    try {
      final topics = await getCurrentTopics();
      final locationData = await SmartLocationService.getCurrentLocationData();

      return {
        'subscribedTopics': topics.length,
        'currentLocation':
            '${locationData['province']}, ${locationData['district']}',
        'gridSize': '${_gridSizeKm}km x ${_gridSizeKm}km',
        'coverage': '${topics.length * _gridSizeKm * _gridSizeKm} sq km',
        'topics': topics,
      };
    } catch (e) {
      return {'error': e.toString()};
    }
  }

  /// üîß **Normalize Province Name ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Topic**
  static String _normalizeProvinceName(String provinceName) {
    const normalizedMap = {
      '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£': 'bangkok',
      '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': 'nonthaburi',
      '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ': 'pathum_thani',
      '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£': 'samut_prakan',
      '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£': 'samut_sakhon',
      '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°': 'nakhon_pathom',
      '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà': 'chiangmai',
      '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢': 'chiangrai',
      '‡∏•‡∏≥‡∏û‡∏π‡∏ô': 'lamphun',
      '‡∏•‡∏≥‡∏õ‡∏≤‡∏á': 'lampang',
      '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô': 'khon_kaen',
      '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤': 'nakhon_ratchasima',
      '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ': 'udon_thani',
      '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ': 'chonburi',
      '‡∏£‡∏∞‡∏¢‡∏≠‡∏á': 'rayong',
      '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': 'chanthaburi',
      '‡∏™‡∏á‡∏Ç‡∏•‡∏≤': 'songkhla',
      '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï': 'phuket',
      '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà': 'krabi',
      '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ': 'surat_thani',
    };

    return normalizedMap[provinceName] ??
        provinceName.toLowerCase().replaceAll(' ', '_');
  }

  /// üåè **‡∏´‡∏≤ Region Topic ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î**
  static String? _getRegionTopicFromProvince(String provinceName) {
    const regionMap = {
      // ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á
      '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£': 'th_region_central',
      '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': 'th_region_central',
      '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ': 'th_region_central',
      '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£': 'th_region_central',
      '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£': 'th_region_central',
      '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°': 'th_region_central',

      // ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
      '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà': 'th_region_north',
      '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢': 'th_region_north',
      '‡∏•‡∏≥‡∏û‡∏π‡∏ô': 'th_region_north',
      '‡∏•‡∏≥‡∏õ‡∏≤‡∏á': 'th_region_north',

      // ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
      '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô': 'th_region_northeast',
      '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤': 'th_region_northeast',
      '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ': 'th_region_northeast',

      // ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
      '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ': 'th_region_east',
      '‡∏£‡∏∞‡∏¢‡∏≠‡∏á': 'th_region_east',
      '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': 'th_region_east',

      // ‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ
      '‡∏™‡∏á‡∏Ç‡∏•‡∏≤': 'th_region_south',
      '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï': 'th_region_south',
      '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà': 'th_region_south',
      '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ': 'th_region_south',
    };

    return regionMap[provinceName];
  }
}

/// üó∫Ô∏è **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á Topics ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢**
/// 
/// **‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•:**
/// - th_1376_10050_20km (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á)
/// - th_1380_10070_20km (‡∏£‡∏±‡∏á‡∏™‡∏¥‡∏ï/‡∏î‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á)
/// - th_1370_10030_20km (‡∏ò‡∏ô‡∏ö‡∏∏‡∏£‡∏µ/‡∏ö‡∏≤‡∏á‡πÅ‡∏Ñ)
/// - th_1356_10078_20km (‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£)
/// 
/// **‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠:**
/// - th_1870_9884_20km (‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà)
/// - th_1765_9933_20km (‡∏•‡∏≥‡∏õ‡∏≤‡∏á)
/// - th_1636_10156_20km (‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢)
/// 
/// **‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô:**
/// - th_1740_10242_20km (‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô)
/// - th_1494_10488_20km (‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ)
/// - th_1757_10299_20km (‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ)
/// 
/// **‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ:**
/// - th_1312_10080_20km (‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ/‡∏û‡∏±‡∏ó‡∏¢‡∏≤)
/// - th_759_9840_20km (‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà)
/// - th_798_9833_20km (‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï)
