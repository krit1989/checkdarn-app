import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'budget_monitoring_service.dart';

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Firebase Storage
/// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase Blaze Plan (Pay-as-you-go) ‡∏û‡∏£‡πâ‡∏≠‡∏° Budget Monitoring
class StorageMonitorService {
  static const double maxStorageGB =
      10.0; // Blaze Plan ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 10GB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  static const double warningThresholdPercent = 80.0; // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 80%
  static const double emergencyThresholdPercent = 95.0; // ‡πÇ‡∏´‡∏°‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏µ‡πà 95%

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Storage ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏ß‡∏° Budget Monitoring)
  static Future<Map<String, dynamic>> getStorageUsage() async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Budget status ‡∏Å‡πà‡∏≠‡∏ô
      final budgetStatus =
          await BudgetMonitoringService.getCurrentBudgetStatus();
      final canUpload = budgetStatus['can_upload'] ?? true;
      final budgetCompressionMode =
          budgetStatus['compression_mode'] ?? 'normal';

      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏° (‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
      final cameraReports = await FirebaseFirestore.instance
          .collection('camera_reports')
          .where('imageUrl', isNotEqualTo: null)
          .get();

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ √ó ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
      final totalImages = cameraReports.docs.length;
      final estimatedSizeBytes =
          totalImages * 200 * 1024; // ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô 200KB ‡∏ï‡πà‡∏≠‡∏£‡∏π‡∏õ (Blaze Plan)
      final estimatedSizeGB = estimatedSizeBytes / (1024 * 1024 * 1024);

      final usagePercent = (estimatedSizeGB / maxStorageGB) * 100;
      final remainingGB = maxStorageGB - estimatedSizeGB;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô)
      final sevenDaysAgo = DateTime.now().subtract(const Duration(days: 7));
      final recentReports = await FirebaseFirestore.instance
          .collection('camera_reports')
          .where('timestamp', isGreaterThan: Timestamp.fromDate(sevenDaysAgo))
          .where('imageUrl', isNotEqualTo: null)
          .get();

      final dailyAverageImages = recentReports.docs.length / 7;
      final dailyAverageMB =
          dailyAverageImages * 0.2; // 200KB = 0.2MB (Blaze Plan)

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      final remainingMB = remainingGB * 1024;
      final estimatedDaysLeft =
          dailyAverageMB > 0 ? (remainingMB / dailyAverageMB).round() : 999;

      if (kDebugMode) {
        print('üìä Storage Usage Analysis (Blaze Plan - 10GB):');
        print('   Total images: $totalImages');
        print('   Estimated size: ${estimatedSizeGB.toStringAsFixed(3)} GB');
        print('   Usage: ${usagePercent.toStringAsFixed(1)}%');
        print('   Remaining: ${remainingGB.toStringAsFixed(3)} GB');
        print('   Daily average: ${dailyAverageMB.toStringAsFixed(2)} MB');
        print('   Estimated days left: $estimatedDaysLeft');
      }

      return {
        'total_images': totalImages,
        'estimated_size_gb': double.parse(estimatedSizeGB.toStringAsFixed(2)),
        'usage_percent': double.parse(usagePercent.toStringAsFixed(1)),
        'remaining_gb': double.parse(remainingGB.toStringAsFixed(2)),
        'daily_average_mb': double.parse(dailyAverageMB.toStringAsFixed(1)),
        'estimated_days_left': estimatedDaysLeft,
        'warning_level': _getWarningLevel(usagePercent),
        'can_upload': canUpload, // ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Budget Monitoring
        'compression_mode': budgetCompressionMode, // ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Budget Monitoring
        'budget_status': budgetStatus['status'],
        'budget_message': budgetStatus['message'],
      };
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting storage usage: $e');
      }
      return {
        'error': e.toString(),
        'can_upload': true,
        'compression_mode': 'normal',
      };
    }
  }

  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  static String _getWarningLevel(double usagePercent) {
    if (usagePercent >= emergencyThresholdPercent) {
      return 'emergency'; // üî¥ ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
    } else if (usagePercent >= warningThresholdPercent) {
      return 'warning'; // üü° ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    } else if (usagePercent >= 50) {
      return 'caution'; // üü† ‡∏£‡∏∞‡∏ß‡∏±‡∏á
    } else {
      return 'normal'; // üü¢ ‡∏õ‡∏Å‡∏ï‡∏¥
    }
  }

  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î (‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö Budget Monitoring)
  static Future<String> getOptimalCompressionMode() async {
    // ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Budget Monitoring ‡∏Å‡πà‡∏≠‡∏ô
    final budgetMode =
        await BudgetMonitoringService.getOptimalCompressionMode();
    if (budgetMode != 'normal') {
      return budgetMode;
    }

    // ‡∏ñ‡πâ‡∏≤ Budget Monitoring ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Storage usage
    final usage = await getStorageUsage();
    final usagePercent = usage['usage_percent'] ?? 0.0;
    return _getCompressionMode(usagePercent);
  }

  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î (‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Blaze Plan)
  static String _getCompressionMode(double usagePercent) {
    if (usagePercent >= emergencyThresholdPercent) {
      return 'emergency'; // ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏™‡∏∏‡∏î 150KB, 50%
    } else if (usagePercent >= warningThresholdPercent) {
      return 'aggressive'; // ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÅ‡∏£‡∏á 180KB, 55%
    } else if (usagePercent >= 50) {
      return 'moderate'; // ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ 200KB, 60%
    } else {
      return 'normal'; // ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÄ‡∏ö‡∏≤ 250KB, 70%
    }
  }

  /// ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Blaze Plan)
  static Map<String, dynamic> getCompressionSettings(String mode) {
    switch (mode) {
      case 'emergency':
        return {
          'quality': 50,
          'maxWidth': 600,
          'maxHeight': 400,
          'targetSize': 150 * 1024, // 150KB
          'description': '‡πÇ‡∏´‡∏°‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏™‡∏π‡∏á',
        };
      case 'aggressive':
        return {
          'quality': 55,
          'maxWidth': 700,
          'maxHeight': 500,
          'targetSize': 180 * 1024, // 180KB
          'description': '‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î - ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        };
      case 'moderate':
        return {
          'quality': 60,
          'maxWidth': 800,
          'maxHeight': 600,
          'targetSize': 200 * 1024, // 200KB
          'description': '‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÄ‡∏ö‡∏≤',
        };
      case 'normal':
      default:
        return {
          'quality': 70,
          'maxWidth': 1000,
          'maxHeight': 800,
          'targetSize': 250 * 1024, // 250KB
          'description': '‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô - ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ',
        };
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ Budget Monitoring)
  static Future<bool> canUploadImage() async {
    return await BudgetMonitoringService.canUploadImage();
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Storage
  static String getStorageMessage(Map<String, dynamic> usage) {
    final usagePercent = usage['usage_percent'] ?? 0.0;
    final remainingGB = usage['remaining_gb'] ?? 5.0;
    final daysLeft = usage['estimated_days_left'] ?? 999;

    if (usagePercent >= emergencyThresholdPercent) {
      return 'üî¥ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏°! ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainingGB.toStringAsFixed(2)}GB (${usagePercent.toStringAsFixed(1)}%) \n‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà';
    } else if (usagePercent >= warningThresholdPercent) {
      return 'üü° ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°! ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainingGB.toStringAsFixed(2)}GB (${usagePercent.toStringAsFixed(1)}%) \n‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥';
    } else if (usagePercent >= 50) {
      return 'üü† ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${usagePercent.toStringAsFixed(1)}% \n‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì $daysLeft ‡∏ß‡∏±‡∏ô';
    } else {
      return 'üü¢ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (${usagePercent.toStringAsFixed(1)}% ‡∏Ç‡∏≠‡∏á 10GB Blaze Plan)';
    }
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  static Future<void> logStorageUsage() async {
    try {
      final usage = await getStorageUsage();

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
      await FirebaseFirestore.instance.collection('storage_logs').add({
        ...usage,
        'timestamp': FieldValue.serverTimestamp(),
        'logged_by': 'auto_system',
      });

      if (kDebugMode) {
        print('üìù Storage usage logged successfully');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error logging storage usage: $e');
      }
    }
  }

  /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Storage logs ‡πÄ‡∏Å‡πà‡∏≤
  static Future<void> cleanupStorageLogs() async {
    try {
      final thirtyDaysAgo = DateTime.now().subtract(const Duration(days: 30));

      final oldLogs = await FirebaseFirestore.instance
          .collection('storage_logs')
          .where('timestamp', isLessThan: Timestamp.fromDate(thirtyDaysAgo))
          .limit(100)
          .get();

      final batch = FirebaseFirestore.instance.batch();

      for (final doc in oldLogs.docs) {
        batch.delete(doc.reference);
      }

      if (oldLogs.docs.isNotEmpty) {
        await batch.commit();
        if (kDebugMode) {
          print('üóëÔ∏è Cleaned up ${oldLogs.docs.length} old storage logs');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error cleaning up storage logs: $e');
      }
    }
  }

  /// ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
  static List<String> getOptimizationSuggestions(Map<String, dynamic> usage) {
    final usagePercent = usage['usage_percent'] ?? 0.0;
    final dailyAverage = usage['daily_average_mb'] ?? 0.0;
    final suggestions = <String>[];

    if (usagePercent > 80) {
      suggestions.add('üîß ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
      suggestions.add('üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 60 ‡∏ß‡∏±‡∏ô');
    }

    if (dailyAverage > 50) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 10MB ‡πÄ‡∏õ‡πá‡∏ô 50MB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Blaze Plan
      suggestions.add('üìâ ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô 200KB');
      suggestions.add('üéØ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô 60%');
    }

    if (usagePercent > 50) {
      suggestions.add('üì± ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î');
      suggestions.add('‚ö° ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ WebP format ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà 30%');
    }

    if (suggestions.isEmpty) {
      suggestions.add('‚úÖ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥');
    }

    return suggestions;
  }
}
