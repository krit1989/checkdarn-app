import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';
import 'auth_service.dart';

/// üåç **Smart Location Service**
/// ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Geographic Targeting
///
/// **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:**
/// - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
/// - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô user_tokens collection
/// - Reverse geocoding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
/// - Smart update (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
class SmartLocationService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏°‡∏ï‡∏£)
  static const double _minimumDistanceForUpdate = 1000; // 1 ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£

  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏ô‡∏≤‡∏ó‡∏µ)
  static const int _minimumUpdateIntervalMinutes = 15;

  static Position? _lastKnownPosition;
  static DateTime? _lastUpdateTime;

  /// üöÄ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Smart Geographic Targeting**
  static Future<bool> updateUserLocation({bool forceUpdate = false}) async {
    try {
      final String? userId = AuthService.currentUser?.uid;
      if (userId == null) {
        print(
            '‚ö†Ô∏è SmartLocationService: User not logged in, cannot update location');
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (!forceUpdate && _lastUpdateTime != null) {
        final timeSinceLastUpdate = DateTime.now().difference(_lastUpdateTime!);
        if (timeSinceLastUpdate.inMinutes < _minimumUpdateIntervalMinutes) {
          print(
              'üïí SmartLocationService: Too soon to update (${timeSinceLastUpdate.inMinutes} minutes ago)');
          return false;
        }
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      Map<String, dynamic> locationData = await _getCurrentLocationData();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (!forceUpdate && _lastKnownPosition != null) {
        final distance = Geolocator.distanceBetween(
          _lastKnownPosition!.latitude,
          _lastKnownPosition!.longitude,
          locationData['lat'],
          locationData['lng'],
        );

        if (distance < _minimumDistanceForUpdate) {
          print(
              'üìç SmartLocationService: Position not changed significantly (${distance.toStringAsFixed(0)}m)');
          return false;
        }
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô user_tokens collection
      await _firestore.collection('user_tokens').doc(userId).update({
        'lastKnownLat': locationData['lat'],
        'lastKnownLng': locationData['lng'],
        'lastKnownProvince': locationData['province'],
        'lastKnownDistrict': locationData['district'],
        'lastKnownSubDistrict': locationData['subDistrict'],
        'lastLocationUpdate': FieldValue.serverTimestamp(),
        'locationAccuracy': locationData['accuracy'],
      });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ cache
      _lastKnownPosition = Position(
        latitude: locationData['lat'],
        longitude: locationData['lng'],
        timestamp: DateTime.now(),
        accuracy: locationData['accuracy'],
        altitude: 0,
        altitudeAccuracy: 0,
        heading: 0,
        headingAccuracy: 0,
        speed: 0,
        speedAccuracy: 0,
      );
      _lastUpdateTime = DateTime.now();

      print('üåç SmartLocationService: User location updated successfully');
      print(
          'üìç Location: ${locationData['province']}, ${locationData['district']}');
      print('üìä Accuracy: ${locationData['accuracy'].toStringAsFixed(1)}m');
      return true;
    } catch (e) {
      print('‚ùå SmartLocationService: Error updating user location: $e');
      return false;
    }
  }

  /// üåç **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° Reverse Geocoding (Public)**
  static Future<Map<String, dynamic>> getCurrentLocationData() async {
    return await _getCurrentLocationData();
  }

  /// üèõÔ∏è **‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø) (Public)**
  static Map<String, dynamic> getDefaultLocation() {
    return _getDefaultLocation();
  }

  /// üåç **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° Reverse Geocoding (Private)**
  static Future<Map<String, dynamic>> _getCurrentLocationData() async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
      }

      if (permission == LocationPermission.denied ||
          permission == LocationPermission.deniedForever) {
        print(
            '‚ö†Ô∏è SmartLocationService: Location permission denied, using default location');
        return _getDefaultLocation();
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö location services
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print(
            '‚ö†Ô∏è SmartLocationService: Location services disabled, using default location');
        return _getDefaultLocation();
      }

      // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: const Duration(seconds: 15),
      );

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
      Map<String, String> addressData =
          await _reverseGeocode(position.latitude, position.longitude);

      return {
        'lat': position.latitude,
        'lng': position.longitude,
        'province': addressData['province'] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
        'district': addressData['district'] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏≠‡∏≥‡πÄ‡∏†‡∏≠',
        'subDistrict': addressData['subDistrict'] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ï‡∏≥‡∏ö‡∏•',
        'accuracy': position.accuracy,
      };
    } catch (e) {
      print('‚ùå SmartLocationService: Error getting location data: $e');
      return _getDefaultLocation();
    }
  }

  /// üó∫Ô∏è **Reverse Geocoding - ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà**
  static Future<Map<String, String>> _reverseGeocode(
      double lat, double lng) async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(lat, lng);

      if (placemarks.isNotEmpty) {
        final placemark = placemarks.first;

        return {
          'province': placemark.administrativeArea ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
          'district': placemark.locality ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏≠‡∏≥‡πÄ‡∏†‡∏≠',
          'subDistrict': placemark.subLocality ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ï‡∏≥‡∏ö‡∏•',
        };
      }
    } catch (e) {
      print('‚ùå SmartLocationService: Reverse geocoding error: $e');
    }

    return {
      'province': '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
      'district': '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏≠‡∏≥‡πÄ‡∏†‡∏≠',
      'subDistrict': '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ï‡∏≥‡∏ö‡∏•',
    };
  }

  /// üèõÔ∏è **‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)**
  static Map<String, dynamic> _getDefaultLocation() {
    return {
      'lat': 13.7563,
      'lng': 100.5018,
      'province': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      'district': '‡πÄ‡∏Ç‡∏ï‡∏û‡∏ç‡∏≤‡πÑ‡∏ó',
      'subDistrict': '‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏∏‡πà‡∏á‡∏û‡∏ç‡∏≤‡πÑ‡∏ó',
      'accuracy': 0.0,
    };
  }

  /// üìä **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä**
  static Map<String, dynamic>? getLastKnownLocation() {
    if (_lastKnownPosition == null) return null;

    return {
      'lat': _lastKnownPosition!.latitude,
      'lng': _lastKnownPosition!.longitude,
      'accuracy': _lastKnownPosition!.accuracy,
      'timestamp': _lastKnownPosition!.timestamp,
    };
  }

  /// üîÑ **‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ**
  static Future<bool> forceUpdateLocation() async {
    return await updateUserLocation(forceUpdate: true);
  }

  /// üì± **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå**
  static StreamSubscription<Position>? _positionStreamSubscription;

  static void startLocationTracking() {
    // ‡∏´‡∏¢‡∏∏‡∏î stream ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    stopLocationTracking();

    const LocationSettings locationSettings = LocationSettings(
      accuracy: LocationAccuracy.high,
      distanceFilter: 500, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 500 ‡πÄ‡∏°‡∏ï‡∏£
    );

    _positionStreamSubscription = Geolocator.getPositionStream(
      locationSettings: locationSettings,
    ).listen(
      (Position position) {
        print(
            'üìç SmartLocationService: Position changed: ${position.latitude}, ${position.longitude}');
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        updateUserLocation();
      },
      onError: (error) {
        print('‚ùå SmartLocationService: Location tracking error: $error');
      },
    );

    print('üéØ SmartLocationService: Started real-time location tracking');
  }

  /// ‚èπÔ∏è **‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á**
  static void stopLocationTracking() {
    _positionStreamSubscription?.cancel();
    _positionStreamSubscription = null;
    print('‚èπÔ∏è SmartLocationService: Stopped location tracking');
  }

  /// üìè **‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£)**
  static double calculateDistance(
      double lat1, double lng1, double lat2, double lng2) {
    return Geolocator.distanceBetween(lat1, lng1, lat2, lng2) /
        1000; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô km
  }
}
