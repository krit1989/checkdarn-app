import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'notification_service.dart';
import 'auth_service.dart';

/// üîî **Push Notification Service - Business Logic**
/// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Push Notification ‡∏£‡∏∞‡∏î‡∏±‡∏ö Business Logic
///
/// **‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:**
/// - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
/// - Handle notification clicks ‡πÅ‡∏•‡∏∞ navigation
/// - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ notification preferences
/// - Integration ‡∏Å‡∏±‡∏ö UI components
class PushNotificationService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  static bool _isInitialized = false;
  static String? _pendingReportId; // ‡πÄ‡∏Å‡πá‡∏ö reportId ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ app ‡∏û‡∏£‡πâ‡∏≠‡∏°

  /// üöÄ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Push Notification Business Logic**
  static Future<void> initialize() async {
    if (_isInitialized) {
      print('üîî PushNotificationService: Already initialized');
      return;
    }

    try {
      print('üîî PushNotificationService: Starting initialization...');

      // ‡∏ü‡∏±‡∏á notification stream ‡∏à‡∏≤‡∏Å NotificationService
      NotificationService.onMessageReceived.listen(_handleNotificationReceived);

      _isInitialized = true;
      print('‚úÖ PushNotificationService: Initialization completed');
    } catch (e) {
      print('‚ùå PushNotificationService: Initialization failed: $e');
    }
  }

  /// üì± **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Notification ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤**
  static void _handleNotificationReceived(dynamic message) {
    try {
      print('üîî PushNotificationService: Notification received');

      // Extract data from message
      final Map<String, dynamic> data = message.data ?? {};
      final String? type = data['type'];
      final String? reportId = data['reportId'];

      print('üîî Notification type: $type, reportId: $reportId');

      // Handle based on notification type
      switch (type) {
        case 'new_post':
          _handleNewPostNotification(reportId);
          break;

        case 'new_comment':
          _handleNewCommentNotification(reportId);
          break;

        default:
          print('‚ö†Ô∏è Unknown notification type: $type');
      }
    } catch (e) {
      print('‚ùå PushNotificationService: Error handling notification: $e');
    }
  }

  /// üìÑ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡πÉ‡∏´‡∏°‡πà**
  static void _handleNewPostNotification(String? reportId) {
    try {
      print('üîî PushNotificationService: Handling new post notification');

      if (reportId != null) {
        // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á List Screen
        _navigateToListScreen();
      }
    } catch (e) {
      print(
          '‚ùå PushNotificationService: Error handling new post notification: $e');
    }
  }

  /// üí¨ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà**
  static void _handleNewCommentNotification(String? reportId) {
    try {
      print('üîî PushNotificationService: Handling new comment notification');

      if (reportId != null) {
        // ‡πÄ‡∏Å‡πá‡∏ö reportId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î comment sheet ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        _pendingReportId = reportId;

        // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á List Screen ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î comment
        _navigateToListScreenWithComment(reportId);
      }
    } catch (e) {
      print(
          '‚ùå PushNotificationService: Error handling new comment notification: $e');
    }
  }

  /// üìÑ **‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á List Screen**
  static void _navigateToListScreen() {
    try {
      final BuildContext? context =
          NotificationService.navigatorKey.currentContext;
      if (context == null) {
        print(
            '‚ö†Ô∏è PushNotificationService: No context available for navigation');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö route ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final String? currentRoute = ModalRoute.of(context)?.settings.name;
      print('üîî Current route: $currentRoute');

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà List Screen ‡πÉ‡∏´‡πâ‡πÑ‡∏õ
      if (currentRoute != '/list') {
        Navigator.of(context).pushNamedAndRemoveUntil(
          '/list',
          (route) => route.settings.name == '/',
        );
      }
    } catch (e) {
      print('‚ùå PushNotificationService: Error navigating to List Screen: $e');
    }
  }

  /// üí¨ **‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á List Screen ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Comment**
  static void _navigateToListScreenWithComment(String reportId) {
    try {
      final BuildContext? context =
          NotificationService.navigatorKey.currentContext;
      if (context == null) {
        print(
            '‚ö†Ô∏è PushNotificationService: No context available for navigation');
        return;
      }

      // ‡πÑ‡∏õ‡∏ó‡∏µ‡πà List Screen ‡∏Å‡πà‡∏≠‡∏ô
      _navigateToListScreen();

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î comment sheet
      Future.delayed(const Duration(milliseconds: 1000), () {
        _openCommentSheet(context, reportId);
      });
    } catch (e) {
      print('‚ùå PushNotificationService: Error navigating to comment: $e');
    }
  }

  /// üí¨ **‡πÄ‡∏õ‡∏¥‡∏î Comment Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Report ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î**
  static Future<void> _openCommentSheet(
      BuildContext context, String reportId) async {
    try {
      print(
          'üîî PushNotificationService: Opening comment sheet for reportId: $reportId');

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ title ‡πÅ‡∏•‡∏∞ category
      final DocumentSnapshot reportDoc =
          await _firestore.collection('reports').doc(reportId).get();

      if (!reportDoc.exists) {
        print('‚ùå Report not found: $reportId');
        return;
      }

      final Map<String, dynamic> data =
          reportDoc.data() as Map<String, dynamic>;
      final String title = data['title'] ??
          data['description']?.toString().split(' ').take(3).join(' ') ??
          '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠';
      final String category = data['category'] ?? data['type'] ?? 'other';

      // ‡πÄ‡∏õ‡∏¥‡∏î Comment Bottom Sheet (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ dynamic import)
      _showCommentBottomSheet(context, reportId, title, category);
    } catch (e) {
      print('‚ùå PushNotificationService: Error opening comment sheet: $e');
    }
  }

  /// üí¨ **‡πÅ‡∏™‡∏î‡∏á Comment Bottom Sheet**
  static void _showCommentBottomSheet(
      BuildContext context, String reportId, String title, String category) {
    try {
      // ‡πÉ‡∏ä‡πâ showModalBottomSheet ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô list_screen.dart
      showModalBottomSheet(
        context: context,
        isScrollControlled: true,
        useRootNavigator: true,
        backgroundColor: Colors.transparent,
        barrierColor: Colors.black54,
        isDismissible: true,
        enableDrag: true,
        useSafeArea: true,
        clipBehavior: Clip.antiAlias,
        builder: (context) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á Comment Bottom Sheet ‡πÅ‡∏ö‡∏ö dynamic
          return _buildCommentBottomSheet(reportId, category);
        },
      );
    } catch (e) {
      print(
          '‚ùå PushNotificationService: Error showing comment bottom sheet: $e');
    }
  }

  /// üèóÔ∏è **‡∏™‡∏£‡πâ‡∏≤‡∏á Comment Bottom Sheet Widget**
  static Widget _buildCommentBottomSheet(String reportId, String category) {
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Header
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey[100],
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(20),
                topRight: Radius.circular(20),
              ),
            ),
            child: Row(
              children: [
                const Icon(Icons.chat_bubble_outline, color: Color(0xFFFF9800)),
                const SizedBox(width: 8),
                const Expanded(
                  child: Text(
                    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w600,
                      fontFamily: 'NotoSansThai',
                    ),
                  ),
                ),
                IconButton(
                  onPressed: () => Navigator.of(
                          NotificationService.navigatorKey.currentContext!)
                      .pop(),
                  icon: const Icon(Icons.close),
                ),
              ],
            ),
          ),

          // Content
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                const Icon(Icons.chat, size: 64, color: Colors.grey),
                const SizedBox(height: 16),
                Text(
                  '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô...',
                  style: const TextStyle(
                    fontSize: 16,
                    color: Colors.grey,
                    fontFamily: 'NotoSansThai',
                  ),
                ),
                const SizedBox(height: 16),
                Text(
                  'Report ID: $reportId',
                  style: const TextStyle(
                    fontSize: 12,
                    color: Colors.grey,
                    fontFamily: 'NotoSansThai',
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// üîÑ **Refresh Notifications**
  static Future<void> refreshNotifications() async {
    try {
      print('üîî PushNotificationService: Refreshing notifications...');

      // Re-initialize if needed
      if (!_isInitialized) {
        await initialize();
      }
    } catch (e) {
      print('‚ùå PushNotificationService: Error refreshing notifications: $e');
    }
  }

  /// üìã **‡∏î‡∏∂‡∏á Pending Report ID**
  static String? getPendingReportId() {
    final String? reportId = _pendingReportId;
    _pendingReportId = null; // Clear ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ
    return reportId;
  }

  /// ÔøΩ **‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö**
  static Future<void> sendTestNotification() async {
    try {
      print('üß™ PushNotificationService: Sending test notification...');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ
      final BuildContext? context =
          NotificationService.navigatorKey.currentContext;
      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.notifications_active, color: Colors.white),
                const SizedBox(width: 8),
                const Expanded(
                  child: Text(
                    'üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!',
                    style: TextStyle(fontFamily: 'NotoSansThai'),
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            margin: const EdgeInsets.all(16),
            duration: const Duration(seconds: 3),
          ),
        );
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° HTTP request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloud Functions
      // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

      print('‚úÖ PushNotificationService: Test notification sent');
    } catch (e) {
      print('‚ùå PushNotificationService: Error sending test notification: $e');
      throw e;
    }
  }

  /// ÔøΩüßπ **‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö**
  static void dispose() {
    try {
      _isInitialized = false;
      _pendingReportId = null;
      print('üîî PushNotificationService: Disposed');
    } catch (e) {
      print('‚ùå PushNotificationService: Error disposing: $e');
    }
  }
}
