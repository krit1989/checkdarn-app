import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '../screens/login_screen.dart';
import 'secure_storage_service.dart';
import 'notification_service.dart';

// Mock UserCredential class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ type casting error
class MockUserCredential implements UserCredential {
  @override
  final User? user;

  @override
  final AdditionalUserInfo? additionalUserInfo;

  @override
  final AuthCredential? credential;

  MockUserCredential({
    required this.user,
    this.additionalUserInfo,
    this.credential,
  });
}

class AuthService {
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static final GoogleSignIn _googleSignIn = GoogleSignIn();
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Local cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  static bool _isUserLoggedIn = false;
  static bool _isInitialized = false;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ local cache)
  static bool get isLoggedIn {
    if (!_isInitialized) {
      print('WARNING: AuthService not initialized yet, forcing check...');
      final currentUser = _auth.currentUser;
      _isUserLoggedIn = currentUser != null;
      print('Force check result: $_isUserLoggedIn (user: ${currentUser?.uid})');
    }
    return _isUserLoggedIn;
  }

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
  static User? get currentUser {
    try {
      return _auth.currentUser;
    } catch (e) {
      print('Error getting current user: $e');
      return null;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö masked ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏ä‡πà‡∏ô kritchapon *****)
  static String getMaskedDisplayName() {
    final user = currentUser;
    if (user == null) return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';

    final displayName = user.displayName;
    if (displayName == null || displayName.isEmpty) {
      // ‡πÉ‡∏ä‡πâ email ‡πÅ‡∏ó‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ displayName
      final email = user.email;
      if (email != null && email.isNotEmpty) {
        final username = email.split('@').first;
        return maskName(username);
      }
      return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
    }

    return maskName(displayName);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mask ‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô kritchapon prommali -> kritchapon *****)
  static String maskName(String name) {
    final parts = name.trim().split(' ');

    if (parts.isEmpty) return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
    if (parts.length == 1) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å + *****
      final firstName = parts[0];
      if (firstName.length <= 3) return firstName;
      return '${firstName.substring(0, 3)}*****';
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡πÄ‡∏ï‡πá‡∏° + mask ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    final firstName = parts[0];
    return '$firstName *****';
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AuthService ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ auth state listener
  static Future<void> initialize() async {
    try {
      print('Starting AuthService initialization...');

      // Initialize secure storage first
      await SecureStorageService.initialize();

      // Check for existing secure session
      final hasValidSession = await SecureStorageService.hasValidSession();
      if (hasValidSession) {
        final credentials = await SecureStorageService.getUserCredentials();
        if (credentials != null) {
          print(
              'üîí Found valid secure session for user: ${credentials['email']}');
        }
      }

      // Clear any cached authentication state to prevent conflicts
      await _googleSignIn.signOut();

      // Setup auth state listener to catch state changes immediately
      _auth.authStateChanges().listen((User? user) async {
        final wasLoggedIn = _isUserLoggedIn;
        _isUserLoggedIn = user != null;

        print(
            'Auth state changed: ${user?.uid ?? 'null'} (isLoggedIn: $_isUserLoggedIn)');

        if (wasLoggedIn != _isUserLoggedIn) {
          print('Auth state transition: $wasLoggedIn -> $_isUserLoggedIn');
          if (user != null) {
            print('User logged in: ${user.uid}');
            print('Email: ${user.email}');

            // Store user credentials securely
            await SecureStorageService.storeUserCredentials(
              userId: user.uid,
              email: user.email ?? '',
              displayName: user.displayName,
              photoUrl: user.photoURL,
            );

            // Store auth token if available
            try {
              final idToken = await user.getIdToken();
              if (idToken != null) {
                await SecureStorageService.storeAuthToken(idToken);
              }
            } catch (e) {
              print('‚ö†Ô∏è Could not store auth token: $e');
            }
          } else {
            print('User logged out');
            // Clear secure storage on logout
            await SecureStorageService.clearAuthData();
          }
        }
      });

      // Wait for Firebase Auth to initialize properly
      await Future.delayed(const Duration(milliseconds: 500));

      // Check current user and force sync state
      final currentUser = _auth.currentUser;
      _isUserLoggedIn = currentUser != null;
      _isInitialized = true;

      print('AuthService initialized: $_isUserLoggedIn (FIXED)');
      if (currentUser != null) {
        print('Current user: ${currentUser.uid}');
        print('Email: ${currentUser.email}');
        print('Firebase Auth state: USER_LOGGED_IN');
      } else {
        print('No current user found');
        print('Firebase Auth state: NO_USER');
      }

      // Force trigger auth state consistency check
      print('Force checking auth state consistency...');
      final authStateCheck = _auth.currentUser != null;
      if (authStateCheck != _isUserLoggedIn) {
        print(
            'INCONSISTENCY DETECTED: Firebase=${authStateCheck}, AuthService=${_isUserLoggedIn}');
        _isUserLoggedIn = authStateCheck;
        print(
            'Fixed inconsistency: AuthService now reports ${_isUserLoggedIn}');
      } else {
        print('Auth states are consistent: ${_isUserLoggedIn}');
      }
    } catch (e) {
      print('Error initializing AuthService: $e');
      _isUserLoggedIn = false;
      _isInitialized = true;
    }
  }

  // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏û‡∏£‡πâ‡∏≠‡∏° Context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ UI
  static Future<UserCredential?> signInWithGoogle(
      {BuildContext? context}) async {
    try {
      print('Starting Google Sign-In process...');

      // ‡∏•‡πâ‡∏≤‡∏á Google Sign-In cache ‡∏Å‡πà‡∏≠‡∏ô
      await _googleSignIn.signOut();

      print('2. Starting Google Sign-In dialog...');
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();

      if (googleUser == null) {
        print('User cancelled Google Sign-In');
        return null;
      }

      print('3. Google account selected: ${googleUser.email}');
      print('4. Getting authentication details...');

      final GoogleSignInAuthentication googleAuth;
      try {
        googleAuth = await googleUser.authentication;
      } catch (e) {
        print('Error getting Google authentication: $e');
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏à‡∏≤‡∏Å Google ‡πÑ‡∏î‡πâ');
      }

      if (googleAuth.accessToken == null || googleAuth.idToken == null) {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö tokens ‡∏à‡∏≤‡∏Å Google ‡πÑ‡∏î‡πâ');
      }

      print('5. Creating Firebase credential...');
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      print('6. Signing in to Firebase...');
      UserCredential? userCredential;

      // ‡∏•‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ PigeonUserDetails error
      for (int attempt = 1; attempt <= 3; attempt++) {
        try {
          print('6.${attempt} Firebase sign-in attempt $attempt/3...');
          userCredential = await _auth.signInWithCredential(credential);
          print('6.${attempt} Firebase sign-in successful on attempt $attempt');
          break;
        } catch (e) {
          print('6.${attempt} Firebase sign-in error attempt $attempt: $e');

          if (e.toString().contains('PigeonUserDetails') ||
              e.toString().contains('type cast') ||
              e.toString().contains('List<Object?>')) {
            print('6.${attempt} Detected known casting error, retrying...');

            // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            await Future.delayed(Duration(milliseconds: 500 * attempt));

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            await Future.delayed(const Duration(milliseconds: 200));
            final currentUser = _auth.currentUser;
            if (currentUser != null && currentUser.email == googleUser.email) {
              print(
                  '6.${attempt} Actually logged in successfully despite error');
              userCredential = MockUserCredential(user: currentUser);
              break;
            }

            if (attempt == 3) {
              // ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              await Future.delayed(const Duration(milliseconds: 1000));
              final finalUser = _auth.currentUser;
              if (finalUser != null) {
                print('6.${attempt} Final check: User is logged in');
                userCredential = MockUserCredential(user: finalUser);
                break;
              } else {
                throw Exception(
                    '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Firebase ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
              }
            }
          } else {
            throw Exception(
                '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Firebase ‡πÑ‡∏î‡πâ: ${e.toString()}');
          }
        }
      }

      if (userCredential?.user != null) {
        final user = userCredential!.user!;
        print('7. Firebase sign-in successful!');
        print('User ID: ${user.uid}');
        print('Email: ${user.email}');
        print('Display Name: ${user.displayName}');

        // Update local state immediately
        _isUserLoggedIn = true;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Firestore
        await _saveUserData(user);

        // üîî ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Notification Token ‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await NotificationService.updateTokenOnLogin();

        // ‡πÅ‡∏™‡∏î‡∏á success message ‡∏´‡∏≤‡∏Å‡∏°‡∏µ context
        if (context != null) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${getMaskedDisplayName()}',
                style: const TextStyle(fontFamily: 'Kanit'),
              ),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 3),
            ),
          );
        }

        print('8. Login process completed successfully');
        return userCredential;
      } else {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firebase ‡πÑ‡∏î‡πâ');
      }
    } on Exception catch (e) {
      print('Google Sign-In Exception: $e');

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              e.toString().replaceAll('Exception: ', ''),
              style: const TextStyle(fontFamily: 'Kanit'),
            ),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
          ),
        );
      }

      return null;
    } catch (e) {
      print('Google Sign-In unexpected error: $e');

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î
      String errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î';

      if (e.toString().contains('PigeonUserDetails')) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô PigeonUserDetails error ‡πÅ‡∏ï‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error
        final currentUser = _auth.currentUser;
        if (currentUser != null) {
          print(
              'PigeonUserDetails error but login successful, skipping error message');
          _isUserLoggedIn = true;
          await _saveUserData(currentUser);

          if (context != null) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(
                  '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${getMaskedDisplayName()}',
                  style: const TextStyle(fontFamily: 'Kanit'),
                ),
                backgroundColor: Colors.green,
                duration: const Duration(seconds: 3),
              ),
            );
          }

          return MockUserCredential(user: currentUser);
        }
        errorMessage = '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
      } else if (e.toString().contains('network')) {
        errorMessage = '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';
      }

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              errorMessage,
              style: const TextStyle(fontFamily: 'Kanit'),
            ),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
          ),
        );
      }

      return null;
    }
  }

  // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå
  static Future<void> signOut({BuildContext? context}) async {
    try {
      print('Starting sign out process...');

      // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏à‡∏≤‡∏Å Google
      await _googleSignIn.signOut();
      print('Google Sign-In signed out');

      // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏à‡∏≤‡∏Å Firebase
      await _auth.signOut();
      print('Firebase signed out');

      // üîî ‡∏•‡∏ö Notification Token ‡πÄ‡∏°‡∏∑‡πà‡∏≠ logout
      await NotificationService.removeTokenOnLogout();

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï local cache
      _isUserLoggedIn = false;

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text(
              '‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
              style: TextStyle(fontFamily: 'Kanit'),
            ),
            backgroundColor: Colors.green,
          ),
        );
      }

      print('Sign out completed successfully');
    } catch (e) {
      print('Sign out error: $e');

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå: $e',
              style: const TextStyle(fontFamily: 'Kanit'),
            ),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Firestore
  static Future<void> _saveUserData(User user) async {
    try {
      final userDoc = _firestore.collection('users').doc(user.uid);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final docSnapshot = await userDoc.get();

      Map<String, dynamic> userData = {
        'email': user.email,
        'displayName': user.displayName,
        'photoURL': user.photoURL,
        'lastLoginAt': FieldValue.serverTimestamp(),
      };

      if (docSnapshot.exists) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        await userDoc.update({
          'email': user.email,
          'displayName': user.displayName,
          'photoURL': user.photoURL,
          'lastLoginAt': FieldValue.serverTimestamp(),
        });
        print('User data updated in Firestore');
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        userData['createdAt'] = FieldValue.serverTimestamp();
        await userDoc.set(userData);
        print('New user data created in Firestore');
      }
    } catch (e) {
      print('Error saving user data: $e');
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  static void showLoginScreen(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
            style: TextStyle(fontFamily: 'Kanit')),
        backgroundColor: Colors.orange,
      ),
    );
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  static Future<bool> requireAuth(BuildContext context) async {
    if (isLoggedIn) {
      return true;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    showLoginScreen(context);
    return false;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (force check)
  static bool checkAuthStatus() {
    final currentUser = _auth.currentUser;
    _isUserLoggedIn = currentUser != null;
    print(
        'Force auth status check: $_isUserLoggedIn (user: ${currentUser?.uid})');
    return _isUserLoggedIn;
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
  static Future<bool> showLoginDialog(BuildContext context) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const LoginScreen(),
        fullscreenDialog: true,
      ),
    );

    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (result == true || isLoggedIn) {
      return true;
    }

    return false;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  static Future<bool> ensureUserLoggedIn(BuildContext context) async {
    if (isLoggedIn) {
      return true;
    }

    return await showLoginDialog(context);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Authentication
  static Future<void> debugAuthStatus() async {
    print('üîç === DEBUG AUTH STATUS ===');
    print('üîê Is Logged In: $isLoggedIn');

    if (currentUser != null) {
      print('üë§ User ID: ${currentUser!.uid}');
      print('üìß Email: ${currentUser!.email}');
      print('üë§ Display Name: ${currentUser!.displayName}');
      print('üì∑ Photo URL: ${currentUser!.photoURL}');
      print(
          'üîê Provider Data: ${currentUser!.providerData.map((p) => p.providerId).join(', ')}');
      print('‚úÖ Email Verified: ${currentUser!.emailVerified}');
      print('üìÖ Creation Time: ${currentUser!.metadata.creationTime}');
      print('üìÖ Last Sign In: ${currentUser!.metadata.lastSignInTime}');

      try {
        final token = await currentUser!.getIdToken();
        print('üé´ Firebase Token Available: ${token != null ? 'YES' : 'NO'}');
        if (token != null && token.length > 20) {
          print('üé´ Token Preview: ${token.substring(0, 20)}...');
        }
      } catch (e) {
        print('‚ùå Token Error: $e');
      }
    } else {
      print('‚ùå No user logged in');
    }
    print('üîç === END DEBUG ===');
  }
}
