import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:latlong2/latlong.dart';
import 'dart:math' as math;
import 'dart:io';
import 'dart:async';
import '../models/event_model.dart';
import 'enhanced_cache_service.dart';

class FirebaseService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseStorage _storage = FirebaseStorage.instance;
  static const String _collection = 'reports';

  // üõ°Ô∏è Enhanced Rate Limiting System
  static const int _maxPostsPerDay = 5; // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 5 ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡∏™‡∏°‡∏î‡∏∏‡∏•)
  static const int _maxPostsPerHour = 3; // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 3 ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  static const int _maxPostsPerMinute = 1; // ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°: ‡∏à‡∏≥‡∏Å‡∏±‡∏î 1 ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ

  // üìä Category-specific limits (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö 5 ‡πÇ‡∏û‡∏™‡∏ï‡πå/‡∏ß‡∏±‡∏ô)
  static const Map<String, int> _categoryDailyLimits = {
    'animalLost': 3, // ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏≤‡∏¢ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 3 (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
    'accident': 4, // ‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 4 (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    'traffic': 5, // ‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£ - ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà (‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢)
    'other': 3, // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 3 (‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
  };

  /// üöÄ Smart Prefetch System - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏â‡∏•‡∏≤‡∏î
  static Future<void> prefetchRecentReports() async {
    try {
      print('üöÄ Starting smart prefetch...');

      // Check if we have valid cached data first
      final cachedReports =
          await EnhancedCacheService.get<List<Map<String, dynamic>>>(
              'reports_recent');
      if (cachedReports != null) {
        print('‚úÖ Using cached prefetch data: ${cachedReports.length} reports');
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô cache
      final snapshot = await _firestore
          .collection(_collection)
          .where('status', isEqualTo: 'active')
          .orderBy('timestamp', descending: true)
          .limit(15) // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 15 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          .get(const GetOptions(source: Source.server)) // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
          .timeout(const Duration(seconds: 10));

      // Convert to serializable format and cache
      final reportsData = snapshot.docs
          .map((doc) => {
                'id': doc.id,
                'data': doc.data(),
              })
          .toList();

      await EnhancedCacheService.set(
        'reports_recent',
        reportsData,
        ttl: const Duration(minutes: 10),
        persistent: true,
      );

      print('‚úÖ Prefetch completed: ${snapshot.docs.length} reports cached');
    } catch (e) {
      print('‚ö†Ô∏è Prefetch failed (non-critical): $e');
    }
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ Firebase Storage ‡∏û‡∏£‡πâ‡∏≠‡∏° retry mechanism
  static Future<String?> uploadImage(File imageFile, String reportId) async {
    return _uploadImageWithRetry(imageFile, reportId, maxRetries: 2);
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏° retry mechanism
  static Future<String?> _uploadImageWithRetry(
    File imageFile,
    String reportId, {
    int maxRetries = 2,
    int currentAttempt = 1,
  }) async {
    try {
      print(
          'üì§ Starting image upload (attempt $currentAttempt/$maxRetries)...');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
      if (!await imageFile.exists()) {
        print('‚ùå Image file does not exist: ${imageFile.path}');
        return null;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
      final fileSize = await imageFile.length();
      print('üìÅ File size: ${fileSize ~/ 1024} KB');

      if (fileSize > 5 * 1024 * 1024) {
        // 5MB limit
        print('‚ùå File too large: ${fileSize ~/ 1024} KB (max 5MB)');
        return null;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      final String fileName =
          'report_${reportId}_${DateTime.now().millisecondsSinceEpoch}.jpg';
      final Reference ref =
          _storage.ref().child('report_images').child(fileName);

      print('üåê Uploading to: report_images/$fileName');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á metadata ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô NullPointerException
      final SettableMetadata metadata = SettableMetadata(
        contentType: 'image/jpeg',
        cacheControl: 'max-age=86400', // 1 day cache
        customMetadata: {
          'reportId': reportId,
          'uploadTime': DateTime.now().toIso8601String(),
        },
      );

      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏° metadata ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      final UploadTask uploadTask = ref.putFile(imageFile, metadata);

      // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° progress (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å)
      uploadTask.snapshotEvents.listen((TaskSnapshot snapshot) {
        final progress =
            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
        print('üìà Upload progress: ${progress.toInt()}%');
      }, onError: (error) {
        print('‚ö†Ô∏è Upload progress error: $error');
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ timeout ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
      final TaskSnapshot snapshot = await uploadTask.timeout(
        const Duration(seconds: 30), // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏° fast fail
        onTimeout: () => throw TimeoutException(
            'Image upload timeout - network may be slow',
            const Duration(seconds: 30)),
      );

      // ‡∏î‡∏∂‡∏á download URL
      final String downloadUrl = await snapshot.ref.getDownloadURL();
      print('‚úÖ Image uploaded successfully: $downloadUrl');

      return downloadUrl;
    } on TimeoutException catch (e) {
      print('‚è∞ Image upload timeout: ${e.message}');

      // ‡∏•‡∏≠‡∏á retry ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô maxRetries
      if (currentAttempt < maxRetries) {
        print('üîÑ Retrying upload... ($currentAttempt/$maxRetries)');
        await Future.delayed(
            const Duration(seconds: 2)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô retry
        return _uploadImageWithRetry(
          imageFile,
          reportId,
          maxRetries: maxRetries,
          currentAttempt: currentAttempt + 1,
        );
      }
      return null;
    } on FirebaseException catch (e) {
      print('üî• Firebase error: ${e.code} - ${e.message}');
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      if (e.code == 'storage/unauthorized') {
        print('üîí Storage permission denied - check Firebase rules');
      } else if (e.code == 'storage/canceled') {
        print('üö´ Upload was canceled');
      } else if (e.code == 'storage/unknown') {
        print('‚ùì Unknown storage error - likely network issue');

        // ‡∏•‡∏≠‡∏á retry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö network issues
        if (currentAttempt < maxRetries) {
          print(
              'üîÑ Retrying upload after network error... ($currentAttempt/$maxRetries)');
          await Future.delayed(const Duration(seconds: 3));
          return _uploadImageWithRetry(
            imageFile,
            reportId,
            maxRetries: maxRetries,
            currentAttempt: currentAttempt + 1,
          );
        }
      } else if (e.code == 'storage/retry-limit-exceeded') {
        print('üîÑ Upload retry limit exceeded');
      }
      return null;
    } catch (e) {
      print('‚ùå Error uploading image: $e');

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      if (e.toString().contains('channel-error')) {
        print('üì° Channel connection error - network or Firebase issue');
        print('üí° Try again or submit without image');

        // ‡∏•‡∏≠‡∏á retry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö channel errors (Xiaomi issue)
        if (currentAttempt < maxRetries) {
          print(
              'üîÑ Retrying upload after channel error... ($currentAttempt/$maxRetries)');
          await Future.delayed(const Duration(seconds: 2));
          return _uploadImageWithRetry(
            imageFile,
            reportId,
            maxRetries: maxRetries,
            currentAttempt: currentAttempt + 1,
          );
        }
      } else if (e.toString().contains('Unable to establish connection')) {
        print('üåê Network connection problem');
        print('üí° Check your internet connection');
      } else if (e.toString().contains('NullPointerException')) {
        print('üêõ Firebase Storage metadata error');
        print('üí° This is a known issue with some Android versions');
      } else if (e.toString().contains('storage')) {
        print('üí° This might be a Firebase Storage configuration issue');
      } else if (e.toString().contains('permission')) {
        print('üí° Check Firebase Storage security rules');
      }
      return null;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
  static Future<bool> canUserPostToday(String userId) async {
    try {
      final now = DateTime.now();
      final startOfDay = DateTime(now.year, now.month, now.day);
      
      print('üîç Checking daily post limit for user: $userId');
      print('‚è∞ Check range: ${startOfDay.toIso8601String()} to ${now.toIso8601String()}');

      // ‡πÉ‡∏ä‡πâ count() query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á - ‡πÉ‡∏ä‡πâ timestamp field ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
      final querySnapshot = await _firestore
          .collection(_collection)
          .where('userId', isEqualTo: userId)
          .where('timestamp', isGreaterThanOrEqualTo: Timestamp.fromDate(startOfDay))
          .where('status', isEqualTo: 'active')
          .count()
          .get();

      final postsToday = querySnapshot.count ?? 0;
      print('üìä Posts today: $postsToday / $_maxPostsPerDay');

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
      if (postsToday >= 3 && postsToday < _maxPostsPerDay) {
        print('‚ö†Ô∏è Warning: User approaching daily limit ($postsToday/${_maxPostsPerDay})');
      }

      final canPost = postsToday < _maxPostsPerDay;
      print(canPost ? '‚úÖ User can post' : 'üö´ Daily limit exceeded');
      
      return canPost;
    } catch (e) {
      print('‚ùå Error checking daily post limit: $e');
      
      // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      final errorMessage = e.toString().toLowerCase();
      if (errorMessage.contains('failed-precondition') ||
          errorMessage.contains('requires an index') ||
          errorMessage.contains('index') ||
          errorMessage.contains('composite')) {
        print('üîß Firebase Index missing - blocking posts for security');
        print('üìã Please create composite index: userId + timestamp + status');
        print('üö´ Returning false to prevent unlimited posting');
        return false; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å true ‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ bypass
      }

      print('‚ö†Ô∏è Unknown error - blocking post for security: $e');
      return false; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å true ‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    }
  }
  static Future<bool> canUserPostToday(String userId) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö: ‡∏ô‡∏≤‡∏ó‡∏µ -> ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á -> ‡∏ß‡∏±‡∏ô
      final canPostMinute = await _checkRateLimit(
          userId, _maxPostsPerMinute, Duration(minutes: 1));
      if (!canPostMinute) {
        print('ÔøΩ Rate limit exceeded: Too many posts in the last minute');
        return false;
      }

      final canPostHour =
          await _checkRateLimit(userId, _maxPostsPerHour, Duration(hours: 1));
      if (!canPostHour) {
        print('üö´ Rate limit exceeded: Too many posts in the last hour');
        return false;
      }

      final canPostDay =
          await _checkRateLimit(userId, _maxPostsPerDay, Duration(days: 1));
      if (!canPostDay) {
        print('üö´ Rate limit exceeded: Too many posts today');
        return false;
      }

      print('‚úÖ User $userId can post (passed all rate limits)');
      return true;
    } catch (e) {
      print('‚ùå Error checking daily post limit: $e');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á index ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      final errorMessage = e.toString().toLowerCase();
      if (errorMessage.contains('failed-precondition') ||
          errorMessage.contains('requires an index') ||
          errorMessage.contains('index') ||
          errorMessage.contains('composite')) {
        print('üîß Firebase Index missing - This is expected for new projects');
        print(
            'üìã To fix this permanently, create a composite index with fields:');
        print('   - userId (Ascending)');
        print('   - timestamp (Ascending)');
        print('   - status (Ascending)');
        print(
            'üí° App will continue working - bypassing daily limit check temporarily');
        return true; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ index ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
      }

      // Log error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
      print('‚ö†Ô∏è  Unknown error type - blocking post for security: $e');
      return false; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å true ‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    }
  }

  /// üõ°Ô∏è Enhanced Rate Limiting Helper Function
  static Future<bool> _checkRateLimit(
      String userId, int maxPosts, Duration timeWindow) async {
    final now = DateTime.now();
    final startTime = now.subtract(timeWindow);

    print(
        'üîç Checking ${timeWindow.inDays > 0 ? '${timeWindow.inDays}d' : timeWindow.inHours > 0 ? '${timeWindow.inHours}h' : '${timeWindow.inMinutes}m'} limit for user: $userId');
    print(
        '‚è∞ Time range: ${startTime.toIso8601String()} to ${now.toIso8601String()}');

    final recentPosts = await _firestore
        .collection(_collection)
        .where('userId', isEqualTo: userId)
        .where('timestamp', isGreaterThan: Timestamp.fromDate(startTime))
        .where('status', isEqualTo: 'active')
        .get();

    final postCount = recentPosts.docs.length;
    print(
        'üìä Found $postCount posts in the last ${timeWindow.inDays > 0 ? '${timeWindow.inDays} day(s)' : timeWindow.inHours > 0 ? '${timeWindow.inHours} hour(s)' : '${timeWindow.inMinutes} minute(s)'} (limit: $maxPosts)');

    return postCount < maxPosts;
  }

  /// üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö limit ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  static Future<bool> canUserPostCategory(
      String userId, EventCategory category) async {
    try {
      final categoryName = category.name.toLowerCase();
      final categoryLimit =
          _categoryDailyLimits[categoryName] ?? _maxPostsPerDay;

      final today = DateTime.now();
      final startOfDay = DateTime(today.year, today.month, today.day);

      final todayCategoryPosts = await _firestore
          .collection(_collection)
          .where('userId', isEqualTo: userId)
          .where('category', isEqualTo: categoryName)
          .where('timestamp', isGreaterThan: Timestamp.fromDate(startOfDay))
          .where('status', isEqualTo: 'active')
          .get();

      final categoryPostCount = todayCategoryPosts.docs.length;
      print(
          'üìä User $userId has posted $categoryPostCount times in category $categoryName today (limit: $categoryLimit)');

      return categoryPostCount < categoryLimit;
    } catch (e) {
      print('‚ùå Error checking category limit: $e');
      return true; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    }
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏ß‡∏° TTL ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå)
  static Future<String> submitReport({
    required EventCategory category,
    required String description,
    required LatLng location,
    required String district,
    required String province,
    String? imageUrl,
    File? imageFile,
    String? userId,
    String? userName,
  }) async {
    try {
      final effectiveUserId = userId ?? 'anonymous';
      print('üöÄ Starting report submission for user: $effectiveUserId');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞ ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà)
      final canPost = await canUserPostToday(effectiveUserId);
      if (!canPost) {
        throw Exception(
            '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î: ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î $_maxPostsPerDay ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      final canPostCategory =
          await canUserPostCategory(effectiveUserId, category);
      if (!canPostCategory) {
        final categoryName = category.name.toLowerCase();
        final categoryLimit =
            _categoryDailyLimits[categoryName] ?? _maxPostsPerDay;
        throw Exception(
            '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î ${category.label}: ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î $categoryLimit ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á document ‡∏≠‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ ID
      final docRef = _firestore.collection(_collection).doc();
      final reportId = docRef.id;
      print('üìÑ Created document ID: $reportId');

      String? finalImageUrl = imageUrl;

      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏û‡∏£‡πâ‡∏≠‡∏° timeout)
      if (imageFile != null) {
        print('üì∑ Uploading image...');
        try {
          finalImageUrl = await uploadImage(imageFile, reportId).timeout(
            const Duration(seconds: 45), // timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
            onTimeout: () {
              print('‚è∞ Image upload timeout - continuing without image');
              return null;
            },
          );

          if (finalImageUrl != null) {
            print('‚úÖ Image uploaded successfully');
          } else {
            print('‚ö†Ô∏è Image upload failed - saving report without image');
          }
        } catch (e) {
          print('‚ùå Image upload error: $e - continuing without image');
          finalImageUrl = null;
        }
      }

      final now = DateTime.now();
      final expireAt = now.add(const Duration(days: 7)); // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô

      print('üíæ Saving report with TURBO Transaction mode...');

      // üöÄ ‡πÉ‡∏ä‡πâ Transaction ‡πÅ‡∏ó‡∏ô Batch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      await _firestore.runTransaction((transaction) async {
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
        transaction.set(docRef, {
          'title': _generateTitle(category, description),
          'description': description,
          'category': _getCategoryKey(category),
          'type': _getCategoryName(category),
          'timestamp': FieldValue.serverTimestamp(), // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
          'lat': location.latitude,
          'lng': location.longitude,
          'location': _formatLocationString(district, province),
          'district': district,
          'province': province,
          'imageUrl': finalImageUrl ?? '',
          'userId': effectiveUserId,
          'userName': userName ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
          'displayName': userName ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
          'status': 'active',
          'expireAt': Timestamp.fromDate(expireAt),
        });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user stats ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô - ‡πÉ‡∏ä‡πâ UID ‡πÄ‡∏õ‡πá‡∏ô document ID ‡∏ï‡∏≤‡∏° Firebase Rules
        final userStatsRef =
            _firestore.collection('user_stats').doc(effectiveUserId);
        transaction.set(
            userStatsRef,
            {
              'userId': effectiveUserId, // ‡πÄ‡∏û‡∏¥‡πà‡∏° userId field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
              'lastReportAt': FieldValue.serverTimestamp(),
              'totalReports': FieldValue.increment(1),
              'lastReportLocation': _formatLocationString(district, province),
              'updatedAt': FieldValue.serverTimestamp(),
            },
            SetOptions(merge: true)); // merge ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°

        print('üöÄ Transaction completed - ultra fast atomic operation!');
      }).timeout(
        const Duration(seconds: 12), // ‡∏•‡∏î timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö transaction
        onTimeout: () => throw TimeoutException(
            'Transaction timeout - ultra fast mode',
            const Duration(seconds: 12)),
      );

      print('‚úÖ Report submitted successfully with ID: ${docRef.id}');
      print('‚è∞ Report will auto-delete after: $expireAt');
      if (finalImageUrl != null) {
        print('üñºÔ∏è Image URL: $finalImageUrl');
      }
      return docRef.id;
    } on TimeoutException catch (e) {
      print('‚è∞ Timeout during report submission: ${e.message}');
      throw Exception('‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } catch (e) {
      print('‚ùå Error submitting report: $e');

      // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
      if (e.toString().contains('network')) {
        throw Exception('‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
      } else if (e.toString().contains('permission')) {
        throw Exception('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà');
      } else if (e.toString().contains('storage')) {
        throw Exception('‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà');
      }

      rethrow;
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
  static Stream<QuerySnapshot> getReportsStream() {
    print('Debug: Getting reports stream from collection: $_collection');
    return _firestore
        .collection(_collection)
        .orderBy('timestamp', descending: true)
        .limit(100) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î
        .snapshots();
  }

  /// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  static Stream<QuerySnapshot> getReportsInRadius({
    required LatLng center,
    required double radiusKm,
  }) {
    final latRange = radiusKm / 111.0; // 1 ‡∏≠‡∏á‡∏®‡∏≤ ‚âà 111 ‡∏Å‡∏°.

    return _firestore
        .collection(_collection)
        .where('status', isEqualTo: 'active')
        .where('lat', isGreaterThanOrEqualTo: center.latitude - latRange)
        .where('lat', isLessThanOrEqualTo: center.latitude + latRange)
        .orderBy('timestamp', descending: true)
        .orderBy('lat')
        .snapshots();
  }

  /// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ListScreen) ‡∏û‡∏£‡πâ‡∏≠‡∏° cache optimization
  static Stream<QuerySnapshot> getRecentReports({int limit = 20}) {
    // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 20
    return _firestore
        .collection(_collection)
        .where('status', isEqualTo: 'active')
        .orderBy('timestamp', descending: true)
        .limit(limit) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ bandwidth
        .snapshots();
  }

  /// ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô inactive)
  static Future<void> deleteReport(String reportId) async {
    try {
      await _firestore.collection(_collection).doc(reportId).update({
        'status': 'inactive',
        'deletedAt': FieldValue.serverTimestamp(),
      });
      print('Report marked as inactive: $reportId');
    } catch (e) {
      print('Error deleting report: $e');
      rethrow;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  static Future<void> updateReportStatus(String reportId, String status) async {
    try {
      await _firestore.collection(_collection).doc(reportId).update({
        'status': status,
        'updatedAt': FieldValue.serverTimestamp(),
      });
      print('Report status updated: $reportId -> $status');
    } catch (e) {
      print('Error updating report status: $e');
      rethrow;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ TTL field (‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠ migrate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  static Future<void> migrateExistingReportsToTTL() async {
    try {
      print('Debug: Starting migration of existing reports to TTL...');

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ expireAt field
      final QuerySnapshot existingReports = await _firestore
          .collection(_collection)
          .where('status', isEqualTo: 'active')
          .get();

      print('Debug: Found ${existingReports.docs.length} reports to migrate');

      if (existingReports.docs.isEmpty) {
        print('Debug: No reports to migrate');
        return;
      }

      WriteBatch batch = _firestore.batch();
      int batchCount = 0;
      int migratedCount = 0;

      for (var doc in existingReports.docs) {
        final data = doc.data() as Map<String, dynamic>;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ expireAt field ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (!data.containsKey('expireAt') || data['expireAt'] == null) {
          final Timestamp? timestamp = data['timestamp'] as Timestamp?;

          if (timestamp != null) {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì expireAt ‡∏à‡∏≤‡∏Å timestamp + 7 ‡∏ß‡∏±‡∏ô
            final expireAt = timestamp.toDate().add(const Duration(days: 7));

            batch.update(doc.reference, {
              'expireAt': Timestamp.fromDate(expireAt),
            });

            batchCount++;
            migratedCount++;

            // Firestore batch ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î 500 operations
            if (batchCount >= 500) {
              await batch.commit();
              print('Debug: Committed batch of $batchCount operations');
              batch = _firestore.batch();
              batchCount = 0;
            }
          }
        }
      }

      // Commit batch ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      if (batchCount > 0) {
        await batch.commit();
        print('Debug: Committed final batch of $batchCount operations');
      }

      print('Successfully migrated $migratedCount reports to TTL');
    } catch (e) {
      print('Error migrating reports to TTL: $e');
      rethrow;
    }
  }

  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ initialization ‡πÅ‡∏•‡∏∞ migration ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
  static Future<void> initializeAndMigrate() async {
    try {
      print('Debug: Initializing Firebase service with TTL migration...');
      await migrateExistingReportsToTTL();
      print('Debug: TTL initialization and migration completed successfully');
    } catch (e) {
      print('Error during initialization: $e');
      // ‡πÑ‡∏°‡πà rethrow ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£ migration ‡πÑ‡∏õ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ
    }
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á EventCategory ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
  static String _getCategoryName(EventCategory category) {
    switch (category) {
      case EventCategory.floodRain:
        return '‡∏ù‡∏ô‡∏ï‡∏Å';
      case EventCategory.accident:
        return '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏';
      case EventCategory.fire:
        return '‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ';
      case EventCategory.earthquake:
        return '‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß';
      case EventCategory.tsunami:
        return '‡∏™‡∏∂‡∏ô‡∏≤‡∏°‡∏¥';
      case EventCategory.checkpoint:
        return '‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à';
      case EventCategory.animalLost:
        return '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏≤‡∏¢';
      case EventCategory.question:
        return '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°';
    }
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á EventCategory ‡πÄ‡∏õ‡πá‡∏ô key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database
  static String _getCategoryKey(EventCategory category) {
    switch (category) {
      case EventCategory.floodRain:
        return 'floodRain';
      case EventCategory.accident:
        return 'accident';
      case EventCategory.fire:
        return 'fire';
      case EventCategory.earthquake:
        return 'earthquake';
      case EventCategory.tsunami:
        return 'tsunami';
      case EventCategory.checkpoint:
        return 'checkpoint';
      case EventCategory.animalLost:
        return 'animalLost';
      case EventCategory.question:
        return 'question';
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á title ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å category ‡πÅ‡∏•‡∏∞ description
  static String _generateTitle(EventCategory category, String description) {
    final categoryName = _getCategoryName(category);

    // ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á description ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô title
    final words = description.trim().split(' ');
    if (words.length <= 3) {
      return '$categoryName: $description';
    }

    final shortDesc = words.take(3).join(' ');
    return '$categoryName: $shortDesc...';
  }

  /// ‡∏£‡∏ß‡∏° district ‡πÅ‡∏•‡∏∞ province ‡πÄ‡∏õ‡πá‡∏ô location string
  static String _formatLocationString(String district, String province) {
    List<String> parts = [];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° district ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (district.isNotEmpty) {
      parts.add(district);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° province ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (province.isNotEmpty) {
      parts.add(province);
    }

    return parts.isNotEmpty ? parts.join(' ') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á';
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô EventCategory
  static EventCategory getCategoryFromName(String name) {
    switch (name.toLowerCase()) {
      // ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      case '‡∏ù‡∏ô‡∏ï‡∏Å':
      case '‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°':
        return EventCategory.floodRain;
      case '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏':
      case '‡∏£‡∏ñ‡∏ä‡∏ô':
        return EventCategory.accident;
      case '‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ':
      case '‡πÑ‡∏ü':
        return EventCategory.fire;
      case '‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß':
        return EventCategory.earthquake;
      case '‡∏™‡∏∂‡∏ô‡∏≤‡∏°‡∏¥':
        return EventCategory.tsunami;
      case '‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à':
      case '‡∏î‡πà‡∏≤‡∏ô':
        return EventCategory.checkpoint;
      case '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏≤‡∏¢':
        return EventCategory.animalLost;
      case '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°':
      case '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ':
        return EventCategory.question;

      // Enum strings
      case 'checkpoint':
        return EventCategory.checkpoint;
      case 'accident':
        return EventCategory.accident;
      case 'fire':
        return EventCategory.fire;
      case 'floodrain':
      case 'flood':
      case 'rain':
        return EventCategory.floodRain;
      case 'tsunami':
        return EventCategory.tsunami;
      case 'earthquake':
        return EventCategory.earthquake;
      case 'animallost':
      case 'animal':
        return EventCategory.animalLost;
      case 'question':
        return EventCategory.question;

      // Legacy support
      case 'incident':
      case 'other':
        return EventCategory.accident;
      case 'type':
        return EventCategory.checkpoint;

      default:
        print('Debug: Unknown category name: $name, defaulting to checkpoint');
        return EventCategory.checkpoint; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å accident ‡πÄ‡∏õ‡πá‡∏ô checkpoint
    }
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (Haversine formula)
  static double calculateDistance(
    double lat1,
    double lon1,
    double lat2,
    double lon2,
  ) {
    const double radiusEarth = 6371; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£

    final double dLat = _degToRad(lat2 - lat1);
    final double dLon = _degToRad(lon2 - lon1);

    final double a = math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(_degToRad(lat1)) *
            math.cos(_degToRad(lat2)) *
            math.sin(dLon / 2) *
            math.sin(dLon / 2);

    final double c = 2 * math.asin(math.sqrt(a));
    return radiusEarth * c;
  }

  static double _degToRad(double deg) {
    return deg * (math.pi / 180);
  }

  /// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ó‡πÄ‡∏ß‡∏•‡∏≤
  static String formatTimestamp(Timestamp? timestamp) {
    if (timestamp == null) return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏ß‡∏•‡∏≤';

    final dateTime = timestamp.toDate();
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inDays > 0) {
      return '${difference.inDays} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß';
    } else if (difference.inHours > 0) {
      return '${difference.inHours} ‡∏ä‡∏°.';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß';
    } else {
      return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
    }
  }
}
