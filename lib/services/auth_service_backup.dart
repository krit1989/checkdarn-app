import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '../screens/login_screen.dart';

// Mock UserCredential class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ type casting error
class MockUserCredential implements UserCredential {
  @override
  final User? user;

  MockUserCredential(this.user);

  @override
  AdditionalUserInfo? get additionalUserInfo => null;

  @override
  AuthCredential? get credential => null;
}

class AuthService {
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static final GoogleSignIn _googleSignIn = GoogleSignIn();
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Local cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  static bool _isUserLoggedIn = false;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ local cache)
  static bool get isLoggedIn => _isUserLoggedIn;

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
  static User? get currentUser {
    try {
      return _auth.currentUser;
    } catch (e) {
      print('‚ö†Ô∏è Error getting current user: $e');
      return null;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö masked ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏ä‡πà‡∏ô kritchapon *****)
  static String getMaskedDisplayName() {
    final user = currentUser;
    if (user == null) return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';

    final displayName = user.displayName;
    if (displayName == null || displayName.isEmpty) {
      // ‡πÉ‡∏ä‡πâ email ‡πÅ‡∏ó‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ displayName
      final email = user.email;
      if (email != null && email.isNotEmpty) {
        final username = email.split('@').first;
        return maskName(username);
      }
      return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
    }

    return maskName(displayName);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mask ‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô kritchapon prommali -> kritchapon *****)
  static String maskName(String name) {
    final parts = name.trim().split(' ');

    if (parts.isEmpty) return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';

    if (parts.length == 1) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡πà‡∏ô "kritchapon" -> "krit*****"
      final firstPart = parts[0];
      if (firstPart.length <= 4) {
        return firstPart; // ‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÑ‡∏°‡πà mask
      }
      return '${firstPart.substring(0, 4)}${'*' * (firstPart.length - 4)}';
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô "kritchapon prommali" -> "kritchapon *******"
      final firstName = parts[0];
      final lastNameLength = parts.sublist(1).join(' ').length;
      return '$firstName ${'*' * lastNameLength}';
    }
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  static Future<void> initialize() async {
    try {
      // ‡∏ï‡∏±‡πâ‡∏á auth state listener ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö state ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      _auth.authStateChanges().listen((User? user) {
        final wasLoggedIn = _isUserLoggedIn;
        _isUserLoggedIn = user != null;
        
        if (wasLoggedIn != _isUserLoggedIn) {
          print('ÔøΩ Auth state changed: $_isUserLoggedIn');
          if (user != null) {
            print('üë§ User logged in: ${user.uid}');
          } else {
            print('ÔøΩ User logged out');
          }
        }
      });
      
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ Firebase Auth ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• auth state ‡∏Å‡πà‡∏≠‡∏ô
      await Future.delayed(const Duration(milliseconds: 100));
      
      final currentUser = _auth.currentUser;
      _isUserLoggedIn = currentUser != null;
      
      print('ÔøΩ AuthService initialized: $_isUserLoggedIn');
      if (currentUser != null) {
        print('üë§ Current user: ${currentUser.uid}');
        print('ÔøΩ Email: ${currentUser.email}');
      }
      
    } catch (e) {
      print('‚ö†Ô∏è Error initializing AuthService: $e');
      _isUserLoggedIn = false;
    }
  }

  // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏û‡∏£‡πâ‡∏≠‡∏° Context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ UI
  static Future<UserCredential?> signInWithGoogle(
      {BuildContext? context}) async {
    try {
      print('üöÄ 1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Google Sign-In...');

      // 1. ‡∏•‡πâ‡∏≤‡∏á session ‡πÄ‡∏Å‡πà‡∏≤
      print('üîπ 2. ‡∏•‡πâ‡∏≤‡∏á session ‡πÄ‡∏Å‡πà‡∏≤...');
      await _googleSignIn.signOut();
      await _auth.signOut();
      _isUserLoggedIn = false;

      // 2. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      print('üîπ 3. ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Gmail...');
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();

      if (googleUser == null) {
        print('‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô');
        return null;
      }

      print('üîπ 4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${googleUser.email}');
      print('üîπ Google User: ${googleUser.email}');
      print('üîπ Google User ID: ${googleUser.id}');
      print('üîπ Google User Display Name: ${googleUser.displayName}');

      // 3. ‡∏£‡∏±‡∏ö Credentials
      print('üîπ 5. ‡∏£‡∏±‡∏ö authentication credentials...');
      final GoogleSignInAuthentication googleAuth =
          await googleUser.authentication;

      if (googleAuth.accessToken == null || googleAuth.idToken == null) {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö authentication tokens ‡πÑ‡∏î‡πâ');
      }

      print('üîπ Google Auth Access Token: ${googleAuth.accessToken}');
      print('üîπ Google Auth ID Token: ${googleAuth.idToken}');
      print(
          'üîπ 6. Access Token: ${googleAuth.accessToken?.substring(0, 20)}...');
      print('üîπ 7. ID Token: ${googleAuth.idToken?.substring(0, 20)}...');

      // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase Credential
      print('üîπ 8. ‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase credential...');
      final AuthCredential credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      // 5. ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Firebase
      print('üîπ 9. ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Firebase...');
      final UserCredential userCredential =
          await _auth.signInWithCredential(credential);

      if (userCredential.user == null) {
        throw Exception('‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      print('üîπ 10. ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      print('üë§ User ID: ${userCredential.user!.uid}');
      print('üìß Email: ${userCredential.user!.email}');
      print('üë§ Display Name: ${userCredential.user!.displayName}');

      // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      print('üîπ 11. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firestore...');
      await _saveUserToFirestore(userCredential.user!);

      // 7. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï local state
      _isUserLoggedIn = true;
      print('‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

      return userCredential;
    } on FirebaseAuthException catch (e) {
      print('‚ùå Firebase Auth Error: ${e.code} - ${e.message}');

      // ‡∏•‡πâ‡∏≤‡∏á state
      _isUserLoggedIn = false;

      throw Exception(_getFriendlyError(e.code));
    } catch (e) {
      print('‚ùå Google Sign-In Error: $e');
      print('üì± Error Type: ${e.runtimeType}');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Firebase Auth ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ error
      print('üîç Checking if Firebase Auth actually succeeded...');
      await Future.delayed(
          const Duration(milliseconds: 500)); // ‡∏£‡∏≠ Firebase update

      final currentFirebaseUser = _auth.currentUser;
      if (currentFirebaseUser != null) {
        print(
            'üéâ Firebase Auth actually succeeded! User: ${currentFirebaseUser.uid}');
        _isUserLoggedIn = true;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á UserCredential ‡∏à‡∏≤‡∏Å current user
        print('üîπ Creating UserCredential from Firebase current user...');
        await _saveUserToFirestore(currentFirebaseUser);

        print('‚úÖ Recovered from Google Sign-In error - Login successful!');
        return MockUserCredential(currentFirebaseUser);
      }

      // ‡∏•‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á cache
      try {
        await _googleSignIn.signOut();
        await _auth.signOut();
        _isUserLoggedIn = false;
      } catch (cleanupError) {
        print('‚ö†Ô∏è Cleanup error: $cleanupError');
      }

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      String errorMessage = '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö type casting error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å Google Sign-In plugin
      if (e.toString().contains('PigeonUserDetails') ||
          e.toString().contains('List<Object?>') ||
          e.toString().contains('type cast')) {
        errorMessage =
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Google Sign-In\n‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏≤‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
        print(
            'üîß Type casting error detected - but login might have succeeded');
      } else if (e.toString().contains('sign_in_failed')) {
        errorMessage =
            '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sign-In ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö';
      } else if (e.toString().contains('network')) {
        errorMessage =
            '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
      } else if (e.toString().contains('canceled') ||
          e.toString().contains('cancelled')) {
        errorMessage = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô';
      } else if (e.toString().contains('10:')) {
        errorMessage =
            'Google Services ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Google Play Services';
      }

      throw Exception(errorMessage);
    }
  }

  // ‡πÅ‡∏õ‡∏•‡∏á Firebase error code ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  static String _getFriendlyError(String code) {
    switch (code) {
      case 'account-exists-with-different-credential':
        return '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏∑‡πà‡∏ô';
      case 'network-request-failed':
        return '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
      case 'user-disabled':
        return '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
      case 'user-not-found':
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
      case 'wrong-password':
        return '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      case 'invalid-credential':
        return '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      case 'operation-not-allowed':
        return '‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
      case 'too-many-requests':
        return '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
      default:
        return '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $code';
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firestore
  static Future<void> _saveUserToFirestore(User user) async {
    try {
      print('üîπ Saving user to Firestore: ${user.uid}');
      final userDoc = _firestore.collection('users').doc(user.uid);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final docSnapshot = await userDoc.get();

      final userData = {
        'uid': user.uid,
        'email': user.email,
        'displayName': user.displayName,
        'photoURL': user.photoURL,
        'lastLoginAt': FieldValue.serverTimestamp(),
        'provider': 'google',
      };

      if (docSnapshot.exists) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        await userDoc.update({
          'lastLoginAt': FieldValue.serverTimestamp(),
          'email': user.email,
          'displayName': user.displayName,
          'photoURL': user.photoURL,
        });
        print('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.uid}');
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
        userData['createdAt'] = FieldValue.serverTimestamp();
        userData['postCount'] = 0;
        userData['commentCount'] = 0;

        await userDoc.set(userData);
        print('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà: ${user.uid}');
      }
    } on FirebaseException catch (e) {
      if (e.code == 'permission-denied') {
        print('‚ùå Firestore Permission Denied: ${e.message}');
        print('üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firestore Security Rules');
        print('üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
      } else {
        print('‚ùå Firestore Error: ${e.code} - ${e.message}');
      }
    } catch (e) {
      print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: $e');
      print('üì± Error Type: ${e.runtimeType}');
    }
  }

  // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  static Future<void> signOut() async {
    try {
      await _googleSignIn.signOut();
      await _auth.signOut();
      _isUserLoggedIn = false; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï local state
      print('‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (e) {
      print('‚ùå ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
      throw Exception('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
  static Future<bool> showLoginDialog(BuildContext context) async {
    final result = await Navigator.of(context).push<bool>(
      MaterialPageRoute(
        builder: (context) => const LoginScreen(),
        fullscreenDialog: true,
      ),
    );

    return result ?? false;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  static Future<bool> ensureUserLoggedIn(BuildContext context) async {
    if (isLoggedIn) {
      return true;
    }

    return await showLoginDialog(context);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Authentication
  static Future<void> debugAuthStatus() async {
    print('üîç === DEBUG AUTH STATUS ===');
    print('üîê Is Logged In: $isLoggedIn');

    if (currentUser != null) {
      print('üë§ User ID: ${currentUser!.uid}');
      print('üìß Email: ${currentUser!.email}');
      print('üë§ Display Name: ${currentUser!.displayName}');
      print('üì∑ Photo URL: ${currentUser!.photoURL}');
      print(
          'üîê Provider Data: ${currentUser!.providerData.map((p) => p.providerId).join(', ')}');
      print('‚úÖ Email Verified: ${currentUser!.emailVerified}');
      print('üìÖ Creation Time: ${currentUser!.metadata.creationTime}');
      print('üìÖ Last Sign In: ${currentUser!.metadata.lastSignInTime}');

      try {
        final token = await currentUser!.getIdToken();
        print('üé´ Firebase Token Available: ${token != null ? 'YES' : 'NO'}');
        if (token != null && token.length > 20) {
          print('üé´ Token Preview: ${token.substring(0, 20)}...');
        }
      } catch (e) {
        print('‚ùå Token Error: $e');
      }
    } else {
      print('‚ùå No user logged in');
    }
    print('üîç === END DEBUG ===');
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
  static Future<void> testSimpleLogin() async {
    try {
      print('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢...');

      // ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á type casting error
      UserCredential? result;
      for (int attempt = 1; attempt <= 3; attempt++) {
        try {
          print('üîÑ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà $attempt...');
          result = await signInWithGoogle();
          break; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
        } catch (e) {
          print(
              '‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà $attempt ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.toString().substring(0, 100)}...');
          if (attempt < 3) {
            await Future.delayed(const Duration(seconds: 2)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          }
        }
      }

      if (result != null) {
        print('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.user?.uid}');
        print('üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${result.user?.displayName}');
        print('üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${result.user?.email}');
      } else {
        print('‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    } catch (e) {
      print('‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
    }
  }
}
