import 'package:flutter/material.dar      // ‡∏™‡∏£‡πâ‡∏≤‡∏á test report ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)
      final testReport = {
        'title': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô [TEST]',
        'description': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø [TEST DATA]',
        'category': 'traffic', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô traffic ‡πÅ‡∏ó‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß
        'type': '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£',
        'timestamp': FieldValue.serverTimestamp(),

        // ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ò‡∏¥‡∏õ‡πÑ‡∏ï‡∏¢)
        'lat': 13.7563, // Bangkok latitude (‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ò‡∏¥‡∏õ‡πÑ‡∏ï‡∏¢)
        'lng': 100.5018, // Bangkok longitude

        'location': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
        'district': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', 
        'province': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',kage:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(TestApp());
}

class TestApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Test Notification',
      home: TestNotificationScreen(),
    );
  }
}

class TestNotificationScreen extends StatefulWidget {
  @override
  _TestNotificationScreenState createState() => _TestNotificationScreenState();
}

class _TestNotificationScreenState extends State<TestNotificationScreen> {
  bool _isCreating = false;
  String _result = '';

  Future<void> _createTestReport() async {
    setState(() {
      _isCreating = true;
      _result = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á test report...';
    });

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á test report ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)
      final testReport = {
        'title': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô [TEST]',
        'description': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø [TEST DATA]',
        'category': 'traffic', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô traffic ‡πÅ‡∏ó‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß
        'type': '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£',
        'timestamp': FieldValue.serverTimestamp(),

        // ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ò‡∏¥‡∏õ‡πÑ‡∏ï‡∏¢)
        'lat': 13.7563, // Bangkok latitude (‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ò‡∏¥‡∏õ‡πÑ‡∏ï‡∏¢)
        'lng': 100.5018, // Bangkok longitude

        'location': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
        'district': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
        'province': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
        'userId': 'test_user_123',
        'userName': 'Kritchapon Test',
        'displayName': 'Kritchapon Test',
        'reporterName': 'Kritchapon Prommali', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ mask
        'status': 'active',
        'imageUrl': '',
        'expireAt': Timestamp.fromDate(DateTime.now().add(Duration(days: 7))),
      };

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firestore
      final docRef = await FirebaseFirestore.instance
          .collection('reports')
          .add(testReport);

      setState(() {
        _result = '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á test report ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n'
            'Document ID: ${docRef.id}\n'
            'Location: lat=${testReport['lat']}, lng=${testReport['lng']}\n'
            '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cloud Functions logs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå';
      });

      print('üéâ Test report created successfully!');
      print('üìç Location: ${testReport['lat']}, ${testReport['lng']}');
      print('üìã Document ID: ${docRef.id}');
    } catch (error) {
      setState(() {
        _result = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error';
      });
      print('‚ùå Error creating test report: $error');
    }

    setState(() {
      _isCreating = false;
    });
  }

  Future<void> _checkRecentReports() async {
    setState(() {
      _result = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reports ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...';
    });

    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('reports')
          .orderBy('timestamp', descending: true)
          .limit(3)
          .get();

      String resultText =
          'üìä Reports ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${snapshot.docs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n';

      for (int i = 0; i < snapshot.docs.length; i++) {
        final doc = snapshot.docs[i];
        final data = doc.data();

        resultText += '${i + 1}. ${doc.id}\n';
        resultText += '   Title: ${data['title'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n';
        resultText += '   Category: ${data['category'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n';

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location
        if (data['lat'] != null && data['lng'] != null) {
          resultText += '   ‚úÖ Location: ${data['lat']}, ${data['lng']}\n';
        } else {
          resultText += '   ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• lat/lng\n';
        }

        if (data['timestamp'] != null) {
          final timestamp = data['timestamp'] as Timestamp;
          resultText += '   Time: ${timestamp.toDate().toString()}\n';
        }

        resultText += '\n';
      }

      setState(() {
        _result = resultText;
      });
    } catch (error) {
      setState(() {
        _result = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Test Notification System'),
        backgroundColor: Color(0xFFFDC621),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            ElevatedButton(
              onPressed: _isCreating ? null : _createTestReport,
              child: _isCreating
                  ? Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        ),
                        SizedBox(width: 8),
                        Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...'),
                      ],
                    )
                  : Text('‡∏™‡∏£‡πâ‡∏≤‡∏á Test Report'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFF4673E5),
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 12),
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _checkRecentReports,
              child: Text('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Reports ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 12),
              ),
            ),
            SizedBox(height: 24),
            Expanded(
              child: Container(
                padding: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: SingleChildScrollView(
                  child: Text(
                    _result.isEmpty ? '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö' : _result,
                    style: TextStyle(
                      fontFamily: 'monospace',
                      fontSize: 14,
                    ),
                  ),
                ),
              ),
            ),
            Container(
              padding: EdgeInsets.all(12),
              margin: EdgeInsets.only(top: 16),
              decoration: BoxDecoration(
                color: Colors.blue[50],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue[200]!),
              ),
              child: Text(
                'üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:\n'
                '1. ‡∏Å‡∏î "‡∏™‡∏£‡πâ‡∏≤‡∏á Test Report" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á report ‡∏ó‡∏î‡∏™‡∏≠‡∏ö\n'
                '2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cloud Functions logs ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\n'
                '3. ‡∏Å‡∏î "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Reports ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                style: TextStyle(fontSize: 12, color: Colors.blue[800]),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
