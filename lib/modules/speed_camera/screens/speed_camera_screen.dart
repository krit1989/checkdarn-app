import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:wakelock_plus/wakelock_plus.dart';
import 'dart:async';
import 'dart:math';
import '../models/speed_camera_model.dart';
import '../services/speed_camera_service.dart';
import '../../../services/smart_security_service.dart';
import '../../../services/sound_manager.dart';
import '../../../services/smart_tile_provider.dart';
import '../../../services/connection_manager.dart';
import '../../../services/map_cache_manager.dart';
import '../../../services/auth_service.dart';
import '../../../screens/sound_settings_screen.dart';
import 'camera_report_screen.dart';
import '../widgets/speed_camera_marker.dart';
import '../widgets/circular_speed_widget.dart';

class SpeedCameraScreen extends StatefulWidget {
  const SpeedCameraScreen({super.key});

  @override
  State<SpeedCameraScreen> createState() => _SpeedCameraScreenState();
}

class _SpeedCameraScreenState extends State<SpeedCameraScreen>
    with WidgetsBindingObserver {
  LatLng currentPosition = const LatLng(13.7563, 100.5018); // Default Bangkok
  late MapController mapController;
  List<SpeedCamera> speedCameras = [];
  bool isLoadingLocation = false;
  bool isLoadingCameras = true;
  double currentSpeed = 0.0;
  SpeedCamera? nearestCamera;
  double distanceToNearestCamera = 0.0;
  // Intelligent Auto-Follow System - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
  DateTime? _lastUserInteraction; // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  bool _userIsManuallyControlling = false; // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏á

  // Badge Alert System - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Badge
  String _badgeText = '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß';
  Color _badgeColor =
      const Color(0xFFFFC107); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏û)
  Timer? _badgeResetTimer;

  StreamSubscription<Position>? _positionSubscription;
  Timer? _speedUpdateTimer;
  Timer? _followModeResetTimer; // Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ auto-follow
  double _smoothTravelHeading = 0.0; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö smooth rotation

  // ‡∏£‡∏∞‡∏ö‡∏ö Predict Movement
  List<Position> _positionHistory = [];
  LatLng? _predictedPosition;
  List<SpeedCamera> _predictedCameras = [];

  // ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ Analytics
  DateTime? _lastAlertTime;

  // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  final SoundManager _soundManager = SoundManager();

  // Progressive Beep Alert System - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ö‡∏µ‡πä‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ
  Timer? _progressiveBeepTimer;
  SpeedCamera? _currentBeepCamera;
  double _lastBeepDistance = 0.0;
  bool _isProgressiveBeepActive = false;

  // Smart Progressive Beep - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥
  Set<String> _alertedCameras = {};
  Timer? _cameraCleanupTimer;

  // Smart Security System variables
  bool _isSecurityModeActive = false;
  DateTime _sessionStartTime = DateTime.now();

  // Performance & Resource Protection - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  int _mapMovementCount = 0;
  DateTime? _lastMapMovement;
  final int _maxMapMovements =
      5000; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1000 ‡πÄ‡∏õ‡πá‡∏ô 5000 (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
  Timer? _resourceMonitorTimer;
  DateTime? _lastExcessiveWarning; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö throttle warnings
  final Duration _warningThrottle =
      const Duration(seconds: 10); // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

  // Data Validation & Integrity - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  double? _previousLatitude;
  double? _previousLongitude;
  final double _maxReasonableSpeed =
      180.0; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 200 ‡πÄ‡∏õ‡πá‡∏ô 180 ‡∏Å‡∏°./‡∏ä‡∏°. (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
  final double _maxLocationJump =
      500.0; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 1000 ‡πÄ‡∏õ‡πá‡∏ô 500 ‡πÄ‡∏°‡∏ï‡∏£ (‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)

  // GPS Anti-Spoofing System - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Fake GPS
  final double _maxAcceptableAccuracy =
      50.0; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (‡πÄ‡∏°‡∏ï‡∏£)
  final double _maxAcceptableSpeedAccuracy = 2.0; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
  Position? _lastTrustedPosition; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
  int _gpsAnomalyCount = 0; // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á GPS
  final int _maxGpsAnomalies =
      5; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Security Mode

  // Enhanced Security Thresholds - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
  final Duration _maxSessionDuration =
      Duration(hours: 6); // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 8 ‡πÄ‡∏õ‡πá‡∏ô 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

  // Smart map system
  SmartTileProvider? _smartTileProvider; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô nullable
  Timer? _connectionCheckTimer;
  Timer? _preloadTimer;

  // Smart Login Detection System - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  bool _hasShownLoginPrompt = false; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  int _movementCount = 0; // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
  DateTime? _firstMovementTime; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  double _totalDistanceTraveled = 0.0; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  LatLng? _lastMovementPosition; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á

  // Auto-refresh tracking system - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  bool _hasJustVoted = false; // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à
  DateTime? _lastVotingTime; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏ß‡∏ï
  final Duration _votingRefreshWindow =
      Duration(minutes: 2); // ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏ß‡∏ï
  Timer? _loginPromptTimer; // Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  int _appInteractionCount = 0; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ (‡πÅ‡∏ï‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á, ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)

  // Missing member variables for Smart Security System
  Timer? _securityCheckTimer;
  List<Position> _speedHistory = [];
  int _suspiciousActivityCount = 0;
  final int _maxSuspiciousActivity = 10;
  final Duration _securityCooldown = const Duration(minutes: 5);
  DateTime? _lastLocationUpdateTime;
  double? _lastValidSpeed;

  // Login Detection Thresholds - ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  static const int _minMovementCount = 3; // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  static const double _minTravelDistance =
      100.0; // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 100 ‡πÄ‡∏°‡∏ï‡∏£
  static const Duration _maxTimeBeforePrompt =
      Duration(seconds: 45); // ‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á 45 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  static const int _minInteractionCount = 2; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

  @override
  void initState() {
    super.initState();
    mapController = MapController();

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Smart Security ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Speed Camera (HIGH RISK)
    _initializeSmartSecurity();

    _getCurrentLocation();
    _loadSpeedCameras();
    _startSpeedTracking();
    _initializeSoundManager();
    _startConnectionMonitoring();
    _enableWakelock(); // ‡πÄ‡∏õ‡∏¥‡∏î wakelock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏î‡∏±‡∏ö
    _startCameraCleanupTimer(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    _startResourceMonitoring(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
    _initializeSmartLoginDetection(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

    // Initialize smart map system ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å widget build
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializeSmartMapSystem();
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° WidgetsBindingObserver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    WidgetsBinding.instance.addObserver(this);
  }

  // ==================== SMART SECURITY SYSTEM ====================

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Smart Security ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Speed Camera (HIGH RISK)
  void _initializeSmartSecurity() {
    SmartSecurityService.initialize();
    SmartSecurityService.setSecurityLevel(SecurityLevel.high);
    print('üîí Smart Security initialized for Speed Camera (HIGH RISK)');

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° security monitoring ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÉ‡∏ô Debug Mode)
    if (!kDebugMode) {
      _securityCheckTimer =
          Timer.periodic(const Duration(seconds: 30), (timer) {
        _performSecurityCheck();
      });
    } else {
      print('üîß Debug Mode: Security monitoring disabled');
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô session
    _sessionStartTime = DateTime.now();
  }

  // ==================== AUTO-REFRESH SYSTEM ====================

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏≠‡∏õ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto-Refresh ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏ß‡∏ï
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);

    print('üîÑ App lifecycle changed: $state');

    switch (state) {
      case AppLifecycleState.resumed:
        print('ÔøΩ App resumed - checking for voting refresh needs');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        final shouldRefreshAfterVoting = _hasJustVoted ||
            (_lastVotingTime != null &&
                DateTime.now().difference(_lastVotingTime!) <
                    _votingRefreshWindow);

        if (shouldRefreshAfterVoting) {
          print(
              'üó≥Ô∏è Detected recent voting activity - triggering auto-refresh');
          Future.delayed(const Duration(milliseconds: 500), () {
            if (mounted) {
              _refreshSpeedCamerasAfterVoting();
            }
          });

          // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï
          _hasJustVoted = false;
        } else {
          print('üì± Regular app resume - performing standard refresh');
          Future.delayed(const Duration(milliseconds: 500), () {
            if (mounted) {
              _refreshSpeedCamerasAfterVoting();
            }
          });
        }
        break;
      case AppLifecycleState.paused:
        print('üì± App paused');
        break;
      case AppLifecycleState.inactive:
        print('üì± App inactive');
        break;
      case AppLifecycleState.detached:
        print('üì± App detached');
        break;
      case AppLifecycleState.hidden:
        print('üì± App hidden');
        break;
    }
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏ß‡∏ï
  Future<void> _refreshSpeedCamerasAfterVoting() async {
    try {
      print('üîÑ === AUTO-REFRESH AFTER VOTING ===');
      print('üîÑ Starting comprehensive camera data refresh...');

      // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
      if (mounted) {
        _showBadgeAlert(
          '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á...',
          Colors.green,
          2000, // 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        );
      }

      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏à‡∏≤‡∏Å server
      await Future.delayed(const Duration(milliseconds: 1000));

      print('üîÑ Step 1: Loading updated speed camera data...');

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô method ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ force refresh ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß
      await _loadSpeedCameras();

      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      print('üîÑ Step 2: Verifying updated camera count...');
      final totalCameras = speedCameras.length;
      print('‚úÖ Total cameras after refresh: $totalCameras');

      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      final communityCameras = speedCameras
          .where((camera) =>
              camera.description?.contains('Community verified') == true ||
              camera.description?.contains('‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') == true)
          .toList();

      if (communityCameras.isNotEmpty) {
        print(
            'üèòÔ∏è Community verified cameras found: ${communityCameras.length}');
        for (final camera in communityCameras.take(3)) {
          print('   - ${camera.roadName} (${camera.description})');
        }
      }

      if (mounted) {
        print('‚úÖ Camera data refreshed successfully');
        print('‚úÖ Total cameras loaded: ${speedCameras.length}');
        print('‚úÖ Community cameras: ${communityCameras.length}');

        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (communityCameras.isNotEmpty) {
          _showBadgeAlert(
            'üéâ ‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ${communityCameras.length} ‡∏à‡∏∏‡∏î ‡∏ó‡∏µ‡πà‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô!',
            Colors.green,
            5000, // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          );
        } else {
          _showBadgeAlert(
            '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
            Colors.green,
            3000, // 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          );
        }
      }

      print('üîÑ === AUTO-REFRESH COMPLETED ===');
    } catch (e) {
      print('‚ùå Error refreshing camera data: $e');

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (mounted) {
        _showBadgeAlert(
          '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
          Colors.orange,
          3000, // 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        );
      }
    }
  }

  // ==================== SMART LOGIN DETECTION SYSTEM ====================

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  void _initializeSmartLoginDetection() {
    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if (AuthService.isLoggedIn) return;

    print('üîç Initializing smart login detection...');

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (fallback)
    _loginPromptTimer = Timer(_maxTimeBeforePrompt, () {
      if (!_hasShownLoginPrompt && !AuthService.isLoggedIn) {
        _showSmartLoginPrompt('time_based');
      }
    });
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  void _checkLoginPromptConditions() {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏î‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if (_hasShownLoginPrompt || AuthService.isLoggedIn) return;

    bool shouldPrompt = false;
    String reason = '';

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£
    if (_movementCount >= _minMovementCount &&
        _totalDistanceTraveled >= _minTravelDistance) {
      shouldPrompt = true;
      reason = 'movement_based';
    }

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£
    if (_appInteractionCount >= _minInteractionCount) {
      shouldPrompt = true;
      reason =
          reason.isEmpty ? 'interaction_based' : '${reason}_and_interaction';
    }

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö)
    if (_firstMovementTime != null &&
        DateTime.now().difference(_firstMovementTime!).inSeconds >= 30 &&
        _movementCount >= 2 &&
        _appInteractionCount >= 1) {
      shouldPrompt = true;
      reason = reason.isEmpty ? 'usage_pattern' : '${reason}_and_usage';
    }

    if (shouldPrompt) {
      _showSmartLoginPrompt(reason);
    }
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Smart ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  void _showSmartLoginPrompt(String reason) {
    if (_hasShownLoginPrompt) return;
    _hasShownLoginPrompt = true;

    print('üì± Showing smart login prompt: $reason');

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    _loginPromptTimer?.cancel();

    String title = '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô';
    String message = '';

    switch (reason) {
      case 'movement_based':
        message =
            '‡πÄ‡∏£‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á‡πÜ\n‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö';
        break;
      case 'interaction_based':
        message =
            '‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß\n‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö';
        break;
      case 'time_based':
        message =
            '‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏°‡∏≤‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö';
        break;
      default:
        message =
            '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö\n‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡πÇ‡∏´‡∏ß‡∏ï ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á';
    }

    showDialog(
      context: context,
      barrierDismissible: true,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          child: Container(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
                Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1158F2).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.account_circle,
                    size: 40,
                    color: Color(0xFF1158F2),
                  ),
                ),
                const SizedBox(height: 20),

                // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
                Text(
                  title,
                  style: const TextStyle(
                    fontFamily: 'NotoSansThai',
                    fontSize: 20,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 12),

                // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                Text(
                  message,
                  style: const TextStyle(
                    fontFamily: 'NotoSansThai',
                    fontSize: 14,
                    color: Colors.black54,
                    height: 1.5,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 24),

                // ‡∏õ‡∏∏‡πà‡∏°
                Row(
                  children: [
                    Expanded(
                      child: TextButton(
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                        style: TextButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                        child: const Text(
                          '‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á',
                          style: TextStyle(
                            fontFamily: 'NotoSansThai',
                            fontSize: 16,
                            color: Colors.grey,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      flex: 2,
                      child: ElevatedButton(
                        onPressed: () async {
                          Navigator.of(context).pop();

                          final success =
                              await AuthService.showLoginDialog(context);
                          if (success) {
                            if (mounted) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text(
                                    '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö',
                                    style:
                                        TextStyle(fontFamily: 'NotoSansThai'),
                                  ),
                                  backgroundColor: Colors.green,
                                ),
                              );
                            }
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF1158F2),
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: const Text(
                          '‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô',
                          style: TextStyle(
                            fontFamily: 'NotoSansThai',
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Smart Login Detection
  void _recordMovementForLoginDetection(LatLng newPosition) {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    _movementCount++;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    if (_firstMovementTime == null) {
      _firstMovementTime = DateTime.now();
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
    if (_lastMovementPosition != null) {
      final distance = Geolocator.distanceBetween(
        _lastMovementPosition!.latitude,
        _lastMovementPosition!.longitude,
        newPosition.latitude,
        newPosition.longitude,
      );
      _totalDistanceTraveled += distance;
    }

    _lastMovementPosition = newPosition;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    _checkLoginPromptConditions();
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Smart Login Detection
  void _recordAppInteraction() {
    _appInteractionCount++;
    _checkLoginPromptConditions();
  }

  // ==================== SMART SECURITY VALIDATION ====================

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Smart Security Service (Hybrid Mode)
  bool _validateSpeedCameraActionSimple(String action) {
    try {
      // ‡πÉ‡∏ä‡πâ Smart Security Level ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      final currentLevel = SmartSecurityService.getCurrentSecurityLevel();

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô High Security Level (Speed Camera) ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      if (currentLevel == SecurityLevel.high) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        final sessionDuration = DateTime.now().difference(_sessionStartTime);
        if (sessionDuration.inHours > 6) {
          print('üîí Session too long for high security action: $action');
          _isSecurityModeActive = true;
          return false;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
        if (currentSpeed > 200) {
          print('üîí Unrealistic speed detected: ${currentSpeed.toInt()} km/h');
          return false;
        }
      }

      return true;
    } catch (e) {
      print('‚ùå Security validation error: $e');
      return true; // ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    }
  }

  // ==================== SECURITY & ANTI-ABUSE SYSTEM ====================

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
  void _performSecurityCheck() {
    final now = DateTime.now();
    final sessionDuration = now.difference(_sessionStartTime);

    // ‡πÉ‡∏ä‡πâ Smart Security ‡πÅ‡∏ó‡∏ô legacy security service
    print('üîí Smart Security monitoring active');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ö‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö)
    if (sessionDuration.inHours > 8) {
      _trackSuspiciousActivity('long_session', 'Session longer than 8 hours');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    if (_speedHistory.length >= 5) {
      final avgSpeed =
          _speedHistory.map((p) => p.speed * 3.6).reduce((a, b) => a + b) /
              _speedHistory.length;
      if (avgSpeed > _maxReasonableSpeed) {
        _trackSuspiciousActivity(
            'unrealistic_speed', 'Average speed: ${avgSpeed.toInt()} km/h');
      } else {
        _lastValidSpeed = avgSpeed; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î (GPS spoofing)
    if (_previousLatitude != null && _previousLongitude != null) {
      final distance = Geolocator.distanceBetween(
        _previousLatitude!,
        _previousLongitude!,
        currentPosition.latitude,
        currentPosition.longitude,
      );

      final timeDiff = _lastLocationUpdateTime != null
          ? now.difference(_lastLocationUpdateTime!).inSeconds
          : 1;

      if (distance > _maxLocationJump && timeDiff < 5) {
        _trackSuspiciousActivity(
            'location_jump', 'Jumped ${distance.toInt()}m in ${timeDiff}s');
      }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    _previousLatitude = currentPosition.latitude;
    _previousLongitude = currentPosition.longitude;
    _lastLocationUpdateTime = now;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    _evaluateSecurityStatus();
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á GPS
  bool _isGpsTrusted(Position position) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    if (position.accuracy > _maxAcceptableAccuracy) {
      _gpsAnomalyCount++;
      print('‚ö†Ô∏è GPS accuracy too low: ${position.accuracy}m');
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    if (position.speedAccuracy > _maxAcceptableSpeedAccuracy) {
      _gpsAnomalyCount++;
      print('‚ö†Ô∏è GPS speed accuracy too low: ${position.speedAccuracy}');
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    if (_lastTrustedPosition != null) {
      final distance = Geolocator.distanceBetween(
        _lastTrustedPosition!.latitude,
        _lastTrustedPosition!.longitude,
        position.latitude,
        position.longitude,
      );

      final timeDiff = position.timestamp
          .difference(_lastTrustedPosition!.timestamp)
          .inSeconds;
      final maxPossibleDistance =
          (position.speed * timeDiff) + 100; // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ 100m

      if (distance > maxPossibleDistance && distance > 500) {
        _gpsAnomalyCount++;
        print('‚ö†Ô∏è Impossible GPS jump: ${distance}m in ${timeDiff}s');
        return false;
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    final speedKmh = position.speed * 3.6;
    if (speedKmh > _maxReasonableSpeed) {
      _gpsAnomalyCount++;
      print('‚ö†Ô∏è Unrealistic speed: ${speedKmh}km/h');
      return false;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    _lastTrustedPosition = position;
    if (_gpsAnomalyCount > 0) {
      _gpsAnomalyCount--; // ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    }

    return true;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  void _checkSessionDuration() {
    final now = DateTime.now();
    final sessionLength = now.difference(_sessionStartTime);

    if (sessionLength > _maxSessionDuration) {
      _trackSuspiciousActivity(
          'long_session', 'Session duration: ${sessionLength.inHours} hours');
    }
  }

  /// ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
  void _trackSuspiciousActivity(String type, String details) {
    _suspiciousActivityCount++;

    print('üö® Suspicious activity detected: $type - $details');
    print('üö® Total suspicious activities: $_suspiciousActivityCount');

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô analytics (‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡πÑ‡∏õ server)
    if (mounted) {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ analytics ‡∏´‡∏£‡∏∑‡∏≠ logging service
      _logSecurityEvent(type, details);
    }
  }

  /// ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô
  void _evaluateSecurityStatus() {
    if (_suspiciousActivityCount >= _maxSuspiciousActivity) {
      if (!_isSecurityModeActive) {
        _activateSecurityMode();
      }
    }
  }

  /// ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  void _activateSecurityMode() {
    _isSecurityModeActive = true;

    print('üî¥ SECURITY MODE ACTIVATED');
    print(
        'üî¥ Limiting app functionality for ${_securityCooldown.inMinutes} minutes');

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (mounted) {
      _showBadgeAlert(
        'üîí ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥',
        Colors.orange,
        10000, // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      );
    }

    // ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    _progressiveBeepTimer?.cancel();
    _badgeResetTimer?.cancel();

    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    Timer(_securityCooldown, () {
      _deactivateSecurityMode();
    });
  }

  /// ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  void _deactivateSecurityMode() {
    _isSecurityModeActive = false;
    _suspiciousActivityCount = 0;

    print('üü¢ Security mode deactivated');

    if (mounted) {
      _showBadgeAlert(
        '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
        Colors.green,
        5000, // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      );
    }
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  void _logSecurityEvent(String eventType, String details) {
    final event = {
      'timestamp': DateTime.now().toIso8601String(),
      'type': eventType,
      'details': details,
      'session_duration':
          DateTime.now().difference(_sessionStartTime).inMinutes,
      'current_speed': currentSpeed.toInt(),
      'last_valid_speed':
          _lastValidSpeed?.toInt() ?? 0, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      'suspicious_count': _suspiciousActivityCount,
    };

    print('üìä Security Event Logged: $event');
    // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase Analytics ‡∏´‡∏£‡∏∑‡∏≠ logging service
  }

  // ==================== RESOURCE PROTECTION SYSTEM ====================

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
  void _startResourceMonitoring() {
    print('üìä Starting resource monitoring...');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ
    _resourceMonitorTimer = Timer.periodic(const Duration(minutes: 1), (timer) {
      _checkResourceUsage();
      // Reset minute counters for the Smart Security Service
      print('üîÑ Resetting security counters');
    });
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  void _checkResourceUsage() {
    final now = DateTime.now();

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ)
    if (_lastMapMovement != null &&
        now.difference(_lastMapMovement!).inMinutes >= 5) {
      print('üìä Map movements in last 5 minutes: $_mapMovementCount');

      if (_mapMovementCount > _maxMapMovements) {
        _trackSuspiciousActivity('excessive_map_movement',
            'Map moved $_mapMovementCount times in 5 minutes');
      }

      _mapMovementCount = 0;
      _lastMapMovement = now;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö memory ‡πÅ‡∏•‡∏∞ performance metrics
    _checkPerformanceMetrics();
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö performance metrics
  void _checkPerformanceMetrics() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô timer ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    final activeTimers = [
      _progressiveBeepTimer,
      _badgeResetTimer,
      _followModeResetTimer,
      _securityCheckTimer,
      _resourceMonitorTimer,
      _connectionCheckTimer,
      _preloadTimer,
      _cameraCleanupTimer,
    ].where((timer) => timer != null).length;

    if (activeTimers > 8) {
      print('‚ö†Ô∏è Too many active timers: $activeTimers');
      _trackSuspiciousActivity(
          'excessive_timers', 'Active timers: $activeTimers');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô speed cameras ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î
    if (speedCameras.length > 10000) {
      print('‚ö†Ô∏è Too many speed cameras loaded: ${speedCameras.length}');
    }

    print(
        'üìä Performance check - Timers: $activeTimers, Cameras: ${speedCameras.length}');
  }

  // ==================== DATA VALIDATION SYSTEM ====================

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Progressive Beep
  bool _isSecureToPlayBeep() {
    if (_isSecurityModeActive) {
      print('üîí Progressive beep blocked - Security mode active');
      return false;
    }

    if (_suspiciousActivityCount >= _maxSuspiciousActivity / 2) {
      print('‚ö†Ô∏è Progressive beep limited - Suspicious activity detected');
      return false;
    }

    return true;
  }

  Future<void> _initializeSmartMapSystem() async {
    try {
      // Initialize smart map components
      await ConnectionManager.initialize();
      await MapCacheManager.initialize();

      _smartTileProvider = SmartTileProvider(
        urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
        additionalOptions: {
          'User-Agent': 'CheckDarn Speed Camera App/1.0',
        },
      );

      // Update UI ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å initialize
      if (mounted) {
        setState(() {
          // Smart tile provider ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        });
      }
    } catch (e) {
      print('Error initializing smart map system: $e');
    }
  }

  void _startConnectionMonitoring() {
    // Check connection every 30 seconds for background monitoring
    _connectionCheckTimer =
        Timer.periodic(const Duration(seconds: 30), (timer) async {
      await ConnectionManager.checkConnection();
      // Connection status is checked but not displayed in UI anymore
    });
  }

  Future<void> _initializeSoundManager() async {
    await _soundManager.initialize();
  }

  // ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  void _startCameraCleanupTimer() {
    _cameraCleanupTimer = Timer.periodic(const Duration(minutes: 5), (timer) {
      final oldSize = _alertedCameras.length;
      _alertedCameras.clear();

      print('=== CAMERA CLEANUP ===');
      print('Cleared ${oldSize} alerted cameras');
      print('Progressive Beep system reset');
      print('=====================');
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î wakelock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏î‡∏±‡∏ö
  Future<void> _enableWakelock() async {
    try {
      await WakelockPlus.enable();
      print('‚úÖ Wakelock enabled - Screen will stay on');
    } catch (e) {
      print('‚ùå Failed to enable wakelock: $e');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î wakelock ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤
  Future<void> _disableWakelock() async {
    try {
      await WakelockPlus.disable();
      print('üîí Wakelock disabled - Screen can turn off normally');
    } catch (e) {
      print('‚ùå Failed to disable wakelock: $e');
    }
  }

  @override
  void dispose() {
    // ‡∏•‡∏ö WidgetsBindingObserver
    WidgetsBinding.instance.removeObserver(this);

    _positionSubscription?.cancel();
    _speedUpdateTimer?.cancel();
    _connectionCheckTimer?.cancel();
    _preloadTimer?.cancel();
    _followModeResetTimer?.cancel(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° timer ‡πÉ‡∏´‡∏°‡πà
    _badgeResetTimer?.cancel(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° badge timer
    _progressiveBeepTimer?.cancel(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° progressive beep timer
    _cameraCleanupTimer?.cancel(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° camera cleanup timer
    _loginPromptTimer?.cancel(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° login prompt timer

    // ==================== SECURITY CLEANUP ====================
    _securityCheckTimer?.cancel(); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å security monitoring
    _resourceMonitorTimer?.cancel(); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å resource monitoring

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• security
    print('üîí Smart Security system cleaned up');
    _speedHistory.clear();
    _alertedCameras.clear();
    _suspiciousActivityCount = 0;

    print('üîí Security system cleaned up');
    print('üìä Resource monitoring stopped');

    _soundManager.dispose();
    mapController.dispose();
    _disableWakelock(); // ‡∏õ‡∏¥‡∏î wakelock ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤
    super.dispose();
  }

  Future<void> _getCurrentLocation() async {
    setState(() => isLoadingLocation = true);

    try {
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          _showLocationError('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á');
          return;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        _showLocationError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
        return;
      }

      final Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      if (mounted) {
        setState(() {
          currentPosition = LatLng(position.latitude, position.longitude);
          isLoadingLocation = false;
        });

        // ‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ FlutterMap render ‡πÅ‡∏•‡πâ‡∏ß)
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (mounted) {
            try {
              mapController.move(currentPosition, 15.0);
            } catch (e) {
              print('MapController not ready yet: $e');
              // ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
              Future.delayed(const Duration(seconds: 1), () {
                if (mounted) {
                  try {
                    mapController.move(currentPosition, 15.0);
                  } catch (e) {
                    print('MapController still not ready: $e');
                  }
                }
              });
            }
          }
        });
      }
    } catch (e) {
      print('Error getting location: $e');
      if (mounted) {
        setState(() => isLoadingLocation = false);
        _showLocationError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ');
      }
    }
  }

  Future<void> _loadSpeedCameras() async {
    try {
      final cameras = await SpeedCameraService.getSpeedCameras();
      if (mounted) {
        setState(() {
          speedCameras = cameras;
          isLoadingCameras = false;
        });
        _updateNearestCamera();
      }
    } catch (e) {
      print('Error loading speed cameras: $e');
      if (mounted) {
        setState(() => isLoadingCameras = false);
        _showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏î‡πâ');
      }
    }
  }

  void _startSpeedTracking() {
    // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö real-time
    _positionSubscription = Geolocator.getPositionStream(
      locationSettings: LocationSettings(
        accuracy: LocationAccuracy.high,
        distanceFilter:
            currentSpeed > 30 ? 8 : 5, // ‡∏õ‡∏£‡∏±‡∏ö distance filter ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        timeLimit: const Duration(seconds: 10), // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
      ),
    ).listen((Position position) {
      if (mounted) {
        final newPosition = LatLng(position.latitude, position.longitude);

        // ==================== SECURITY VALIDATION ====================

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS ‡∏î‡πâ‡∏ß‡∏¢ Enhanced Anti-Spoofing
        if (!_isGpsTrusted(position)) {
          print('üö® Untrusted GPS data detected, skipping update');

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î Security Mode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (_gpsAnomalyCount >= _maxGpsAnomalies) {
            _trackSuspiciousActivity('gps_spoofing',
                'GPS anomalies: $_gpsAnomalyCount, accuracy: ${position.accuracy}m');
          }
          return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        _checkSessionDuration();

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        _speedHistory.add(position);
        if (_speedHistory.length > 20) {
          _speedHistory.removeAt(0); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 20 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
        final speedKmh = position.speed * 3.6;
        if (speedKmh > _maxReasonableSpeed) {
          _trackSuspiciousActivity('unrealistic_speed',
              'Speed: ${speedKmh.toInt()} km/h at ${position.latitude}, ${position.longitude}');
        } else {
          _lastValidSpeed = speedKmh;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Predict Movement
        _positionHistory.add(position);
        if (_positionHistory.length > 10) {
          _positionHistory.removeAt(0); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        }

        setState(() {
          currentPosition = newPosition;
          currentSpeed = position.speed * 3.6; // m/s ‡πÄ‡∏õ‡πá‡∏ô km/h

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Smart Login Detection
          _recordMovementForLoginDetection(newPosition);

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å GPS (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà)
          if (currentSpeed > 5.0 && position.heading.isFinite) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏∏‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            final headingDiff = (position.heading - _smoothTravelHeading).abs();
            final normalizedDiff =
                headingDiff > 180 ? 360 - headingDiff : headingDiff;

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (> 1.5 ‡∏≠‡∏á‡∏®‡∏≤)
            // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 2.0 ‡πÄ‡∏õ‡πá‡∏ô 1.5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
            if (normalizedDiff > 1.5) {
              _smoothTravelHeading =
                  _interpolateHeading(_smoothTravelHeading, position.heading);
            }
          }
        });

        // Intelligent Auto-Follow: ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
        if (!_userIsManuallyControlling) {
          _intelligentMoveCamera(newPosition);
        }

        _updateNearestCamera();

        // ‡∏£‡∏∞‡∏ö‡∏ö Predict Movement
        if (_positionHistory.length >= 3) {
          _predictMovementAndCheck();
        }

        // Smart preload tiles around new position
        _schedulePreloadTiles(newPosition);
      }
    });
  }

  // ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
  void _predictMovementAndCheck() {
    if (_positionHistory.length < 3) return;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ 3 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    final recentPositions =
        _positionHistory.sublist(_positionHistory.length - 3);
    final avgSpeed =
        recentPositions.map((p) => p.speed * 3.6).reduce((a, b) => a + b) / 3;
    final avgHeading =
        recentPositions.map((p) => p.heading).reduce((a, b) => a + b) / 3;

    if (avgSpeed > 10.0 && avgHeading.isFinite) {
      // ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      final predictedDistanceMeters =
          (avgSpeed / 3.6) * 10; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô m/s * 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

      try {
        final predictedLat = currentPosition.latitude +
            (predictedDistanceMeters * cos(avgHeading * pi / 180)) / 111000;
        final predictedLng = currentPosition.longitude +
            (predictedDistanceMeters * sin(avgHeading * pi / 180)) /
                (111000 * cos(currentPosition.latitude * pi / 180));

        _predictedPosition = LatLng(predictedLat, predictedLng);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        _checkPredictedPath();
      } catch (e) {
        // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ
        print('Prediction calculation error: $e');
      }
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
  void _checkPredictedPath() {
    if (_predictedPosition == null) return;

    _predictedCameras.clear();

    for (final camera in speedCameras) {
      final distanceToPredicted = Geolocator.distanceBetween(
        _predictedPosition!.latitude,
        _predictedPosition!.longitude,
        camera.location.latitude,
        camera.location.longitude,
      );

      // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 200 ‡πÄ‡∏°‡∏ï‡∏£)
      if (distanceToPredicted <= 200) {
        final cameraDirection = Geolocator.bearingBetween(
          currentPosition.latitude,
          currentPosition.longitude,
          camera.location.latitude,
          camera.location.longitude,
        );

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
        if (_isCameraInTravelDirection(cameraDirection)) {
          _predictedCameras.add(camera);
        }
      }
    }

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    if (_predictedCameras.isNotEmpty && currentSpeed > 50) {
      _showPredictiveAlert();
    }
  }

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
  void _showPredictiveAlert() {
    final now = DateTime.now();
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if (_lastAlertTime != null &&
        now.difference(_lastAlertTime!).inSeconds < 30) {
      return;
    }

    _lastAlertTime = now;
    final nearestPredicted = _predictedCameras.first;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà sync ‡∏Å‡∏±‡∏ô
    const badgeMessage = 'üîÆ ‡∏à‡∏∞‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ';
    final ttsMessage =
        '‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡∏à‡∏∞‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ö‡∏ô ${nearestPredicted.roadName} ‡∏à‡∏≥‡∏Å‡∏±‡∏î ${nearestPredicted.speedLimit} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á';

    // Debug log
    print('=== PREDICTIVE ALERT SYNC ===');
    print('Badge: "$badgeMessage"');
    print('TTS: "$ttsMessage"');

    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    _soundManager.playPredictiveAlert(
      message: ttsMessage,
      roadName: nearestPredicted.roadName,
      speedLimit: nearestPredicted.speedLimit,
    );

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Badge
    _showBadgeAlert(
      badgeMessage,
      const Color(0xFF1158F2),
      6000, // 6 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    );
  }

  // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
  void _intelligentMoveCamera(LatLng newPosition) {
    try {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞
      double targetZoom = mapController.camera.zoom;

      // ‡∏õ‡∏£‡∏±‡∏ö zoom ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•‡∏Ç‡∏∂‡πâ‡∏ô
      if (currentSpeed < 30) {
        targetZoom = 16.5; // ‡∏ã‡∏π‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏±‡∏ö‡∏ä‡πâ‡∏≤
      } else if (currentSpeed < 60) {
        targetZoom = 15.5; // ‡∏ã‡∏π‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏±‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
      } else if (currentSpeed < 90) {
        targetZoom = 14.5; // ‡∏ã‡∏π‡∏°‡πÑ‡∏Å‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß
      } else {
        targetZoom = 13.5; // ‡∏ã‡∏π‡∏°‡πÑ‡∏Å‡∏•‡∏°‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å
      }

      // ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ö‡∏ö‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö zoom - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ target zoom ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
      final currentZoom = mapController.camera.zoom;
      final smoothZoom = currentZoom +
          ((targetZoom - currentZoom) * 0.1); // Gradual zoom change

      mapController.move(newPosition, smoothZoom);
    } catch (e) {
      print('MapController error in intelligent camera movement: $e');
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  void _onMapInteraction() {
    final now = DateTime.now();

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Smart Login Detection
    _recordAppInteraction();

    // ==================== SMART SECURITY CHECK ====================

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Smart Security Service
    if (!_validateSpeedCameraActionSimple('map_interaction')) {
      print('üîí Map interaction blocked by Smart Security');
      return;
    }

    // ‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö throttled (‡∏ó‡∏∏‡∏Å 100ms)
    if (_lastMapMovement == null ||
        now.difference(_lastMapMovement!).inMilliseconds >= 100) {
      _mapMovementCount++;
      _lastMapMovement = now;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÅ‡∏ï‡πà throttle warnings)
    if (_mapMovementCount > _maxMapMovements) {
      // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (_lastExcessiveWarning == null ||
          now.difference(_lastExcessiveWarning!).inSeconds >=
              _warningThrottle.inSeconds) {
        print(
            '‚ö†Ô∏è Excessive map interaction detected: $_mapMovementCount movements');
        _trackSuspiciousActivity(
            'excessive_map_interaction', 'Map moved $_mapMovementCount times');

        _lastExcessiveWarning = now;
      }

      // ‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
      if (_isSecurityModeActive) {
        print('üîí Map interaction blocked - Security mode active');
        return;
      }
    }

    setState(() {
      _userIsManuallyControlling = true;
      _lastUserInteraction = now;
    });

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡πÄ‡∏Å‡πà‡∏≤
    _followModeResetTimer?.cancel();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    final timeSinceLastInteraction = _lastUserInteraction != null
        ? now.difference(_lastUserInteraction!).inSeconds
        : 0;

    // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
    final waitTime = timeSinceLastInteraction < 5
        ? const Duration(seconds: 15) // ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏ö‡πà‡∏≠‡∏¢
        : const Duration(seconds: 10); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥

    // ‡∏ï‡∏±‡πâ‡∏á timer ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ auto-follow
    _followModeResetTimer = Timer(waitTime, () {
      if (mounted) {
        setState(() {
          _userIsManuallyControlling = false;
        });

        // ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - ‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πá‡∏û‡∏≠
      }
    });
  }

  double _interpolateHeading(double currentHeading, double targetHeading) {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö 360 -> 0 degrees)
    double diff = targetHeading - currentHeading;

    if (diff > 180) {
      diff -= 360;
    } else if (diff < -180) {
      diff += 360;
    }

    // Adaptive smooth interpolation - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    double smoothFactor = 0.25; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏ö‡∏ö gradient
    if (currentSpeed > 80) {
      smoothFactor = 0.6; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å = ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å
    } else if (currentSpeed > 60) {
      smoothFactor = 0.5; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á = ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    } else if (currentSpeed > 40) {
      smoothFactor = 0.35; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    } else if (currentSpeed > 20) {
      smoothFactor = 0.3; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡πà‡∏≥
    } else if (currentSpeed > 5) {
      smoothFactor = 0.2; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å = ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ä‡πâ‡∏≤‡∏•‡∏á
    } else {
      smoothFactor = 0.1; // ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏´‡∏¢‡∏∏‡∏î = ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏°‡∏∏‡∏°‡∏°‡∏≤‡∏Å - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    if (diff.abs() > 60) {
      smoothFactor *= 0.3; // ‡∏•‡∏î‡∏°‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 60 ‡∏≠‡∏á‡∏®‡∏≤
    } else if (diff.abs() > 30) {
      smoothFactor *= 0.5; // ‡∏•‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏≠‡∏á‡∏®‡∏≤
    } else if (diff.abs() > 15) {
      smoothFactor *= 0.7; // ‡∏•‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 15 ‡∏≠‡∏á‡∏®‡∏≤
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    final newHeading = currentHeading + (diff * smoothFactor);

    // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-360 ‡∏≠‡∏á‡∏®‡∏≤
    if (newHeading < 0) {
      return newHeading + 360;
    } else if (newHeading >= 360) {
      return newHeading - 360;
    }

    return newHeading;
  }

  // Smart tile preloading with performance optimization
  void _schedulePreloadTiles(LatLng position) {
    // Cancel existing timer
    _preloadTimer?.cancel();

    // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ preload ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    final preloadDelay = currentSpeed > 50
        ? const Duration(milliseconds: 1500) // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á = preload ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
        : const Duration(seconds: 2);

    _preloadTimer = Timer(preloadDelay, () async {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ SmartTileProvider ‡πÅ‡∏•‡∏∞ MapController ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if (_smartTileProvider != null) {
          final zoom = mapController.camera.zoom.round();
          // ‡∏õ‡∏£‡∏±‡∏ö radius ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
          final radius = currentSpeed > 60 ? 3 : 2;
          await _smartTileProvider!
              .preloadTilesAround(position, zoom, radius: radius);
        }
      } catch (e) {
        print('Error preloading tiles: $e');
        // ‡∏ñ‡πâ‡∏≤ MapController ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏ä‡πâ zoom level ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        try {
          if (_smartTileProvider != null) {
            await _smartTileProvider!
                .preloadTilesAround(position, 15, radius: 2);
          }
        } catch (e2) {
          print('Error preloading tiles with default zoom: $e2');
        }
      }
    });
  }

  void _updateNearestCamera() {
    if (speedCameras.isEmpty) return;

    double minDistance = double.infinity;
    SpeedCamera? closest;
    double cameraDirection = 0.0;

    for (final camera in speedCameras) {
      final distance = Geolocator.distanceBetween(
        currentPosition.latitude,
        currentPosition.longitude,
        camera.location.latitude,
        camera.location.longitude,
      );

      if (distance < minDistance) {
        minDistance = distance;
        closest = camera;
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        cameraDirection = Geolocator.bearingBetween(
          currentPosition.latitude,
          currentPosition.longitude,
          camera.location.latitude,
          camera.location.longitude,
        );
      }
    }

    setState(() {
      nearestCamera = closest;
      distanceToNearestCamera = minDistance;
    });

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡πÄ‡∏°‡∏ï‡∏£
    if (closest != null && minDistance > 100) {
      final removedCount = _alertedCameras.length;
      _alertedCameras.removeWhere((cameraId) {
        // ‡∏´‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        final alertedCamera = speedCameras.firstWhere(
          (cam) => cam.id == cameraId,
          orElse: () => speedCameras.first, // fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
        );
        final distanceToAlertedCamera = Geolocator.distanceBetween(
          currentPosition.latitude,
          currentPosition.longitude,
          alertedCamera.location.latitude,
          alertedCamera.location.longitude,
        );
        return distanceToAlertedCamera > 100; // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡πÄ‡∏°‡∏ï‡∏£
      });

      if (removedCount != _alertedCameras.length) {
        print('=== CAMERA RESET BY DISTANCE ===');
        print(
            'Removed ${removedCount - _alertedCameras.length} cameras from alerted list');
        print('Remaining alerted cameras: ${_alertedCameras.length}');
        print('=================================');
      }
    }

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
    if (closest != null) {
      _checkAdvancedWarning(closest, minDistance, cameraDirection);
    }
  }

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
  void _checkAdvancedWarning(
      SpeedCamera camera, double distance, double cameraDirection) {
    final alertDistance =
        _calculateOptimalAlertDistance(currentSpeed, camera.speedLimit);

    if (distance <= alertDistance) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (¬±45 ‡∏≠‡∏á‡∏®‡∏≤)
      final isInTravelDirection = _isCameraInTravelDirection(cameraDirection);

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      if (isInTravelDirection && currentSpeed > camera.speedLimit) {
        _showAdvancedSpeedAlert(camera, distance, isInTravelDirection);
      } else if (isInTravelDirection && distance <= 300) {
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)
        _showProximityAlert(camera, distance);
      }
    }

    // Progressive Beep Alert - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ 50 ‡πÄ‡∏°‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    if (distance <= 50 && currentSpeed > 5.0) {
      final isInTravelDirection = _isCameraInTravelDirection(cameraDirection);
      if (isInTravelDirection) {
        _startProgressiveBeep(camera, distance);
      }
    } else if (distance > 60 || currentSpeed <= 5.0) {
      // ‡∏´‡∏¢‡∏∏‡∏î Progressive Beep ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î/‡∏Ç‡∏±‡∏ö‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÑ‡∏ü‡πÅ‡∏î‡∏á/‡∏ï‡∏¥‡∏î‡∏£‡∏ñ)
      _stopProgressiveBeep();
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å (‚â§ 50m)
    if (distance <= 50 && currentSpeed > 10) {
      _logCameraPassing(camera);
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á
  void _logCameraPassing(SpeedCamera camera) {
    final wasOverSpeed = currentSpeed > camera.speedLimit;

    // ‡∏´‡∏¢‡∏∏‡∏î Progressive Beep ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å (‚â§ 50m)
    _stopProgressiveBeep();

    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á
    if (wasOverSpeed) {
      _soundManager.playProximityAlert(
        message: '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß',
        distance: 50.0,
      );

      // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Badge
      _showBadgeAlert(
        '‚ö†Ô∏è ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß',
        Colors.orange,
        5000, // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      );
    } else {
      _soundManager.playProximityAlert(
        message: '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
        distance: 50.0,
      );

      // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Badge
      _showBadgeAlert(
        '‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
        Colors.green,
        4000, // 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      );
    }

    print('Near camera: ${camera.roadName}, Speed: ${currentSpeed.toInt()}, '
        'Limit: ${camera.speedLimit}, Over: $wasOverSpeed');

    // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Analytics ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Beep Interval ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á - Progressive Timing
  int _calculateBeepInterval(double distance) {
    if (distance <= 10) {
      return 500; // 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ï‡∏¥‡∏î‡πÜ)
    } else if (distance <= 20) {
      return 1000; // 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    } else if (distance <= 30) {
      return 2000; // 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    } else if (distance <= 50) {
      return 3000; // 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    } else {
      return 0; // ‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    }
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° Progressive Beep Alert
  void _startProgressiveBeep(SpeedCamera camera, double distance) {
    // ==================== SMART SECURITY CHECK ====================

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Smart Security Service
    if (!_validateSpeedCameraActionSimple('progressive_beep')) {
      print('üîí Progressive beep blocked by Smart Security');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (_alertedCameras.contains(camera.id)) {
      print('=== PROGRESSIVE BEEP SKIPPED ===');
      print('Camera already alerted: ${camera.roadName}');
      print('Distance: ${distance.toInt()}m');
      print('Reason: Preventing duplicate alerts');
      print('=================================');
      return; // ‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (_currentBeepCamera?.id == camera.id &&
        (distance - _lastBeepDistance).abs() < 5) {
      return; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡∏Å
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    _alertedCameras.add(camera.id);

    // ‡∏´‡∏¢‡∏∏‡∏î Progressive Beep ‡πÄ‡∏Å‡πà‡∏≤
    _stopProgressiveBeep();

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° Progressive Beep ‡πÉ‡∏´‡∏°‡πà
    _currentBeepCamera = camera;
    _lastBeepDistance = distance;
    _isProgressiveBeepActive = true;

    final beepInterval = _calculateBeepInterval(distance);
    if (beepInterval > 0) {
      print('=== PROGRESSIVE BEEP START ===');
      print('Camera: ${camera.roadName}');
      print('Distance: ${distance.toInt()}m');
      print('Beep interval: ${beepInterval}ms');
      print('Added to alerted list: ${camera.id}');
      print('Total alerted cameras: ${_alertedCameras.length}');
      print(
          'Security status: ${_isSecurityModeActive ? "RESTRICTED" : "NORMAL"}');
      print('================================');

      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      _soundManager.playProgressiveBeep();

      // ‡∏ï‡∏±‡πâ‡∏á Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      _progressiveBeepTimer = Timer.periodic(
        Duration(milliseconds: beepInterval),
        (timer) {
          if (!_isProgressiveBeepActive || !mounted) {
            timer.cancel();
            return;
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
          if (!_isSecureToPlayBeep()) {
            timer.cancel();
            _stopProgressiveBeep();
            return;
          }

          _soundManager.playProgressiveBeep();
        },
      );

      // ‡πÅ‡∏™‡∏î‡∏á Badge ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      _showBadgeAlert(
        'üîä ‡πÄ‡∏£‡∏î‡∏≤‡∏£‡πå‡∏Å‡∏•‡πâ‡∏≠‡∏á ${distance.toInt()}m',
        const Color(0xFF1158F2),
        beepInterval + 1000, // ‡πÅ‡∏™‡∏î‡∏á‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ interval ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      );
    }
  }

  // ‡∏´‡∏¢‡∏∏‡∏î Progressive Beep Alert
  void _stopProgressiveBeep() {
    if (_isProgressiveBeepActive) {
      print('=== PROGRESSIVE BEEP STOP ===');
      _progressiveBeepTimer?.cancel();
      _progressiveBeepTimer = null;
      _currentBeepCamera = null;
      _lastBeepDistance = 0.0;
      _isProgressiveBeepActive = false;
    }
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏° 100km/h = 800m
  double _calculateOptimalAlertDistance(double speed, int speedLimit) {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∏‡∏î‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: 100 km/h = 800 ‡πÄ‡∏°‡∏ï‡∏£
    const referenceSpeed = 100.0; // km/h
    const referenceDistance = 800.0; // ‡πÄ‡∏°‡∏ï‡∏£

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    // ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£: distance = (speed/100)¬≤ √ó 800
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    final speedRatio = speed / referenceSpeed;
    final calculatedDistance = speedRatio * speedRatio * referenceDistance;

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞: ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 200m, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 1000m
    final finalDistance = calculatedDistance.clamp(200.0, 1000.0);

    // Debug log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    print('=== ALERT DISTANCE CALCULATION ===');
    print('Speed: ${speed.toStringAsFixed(1)} km/h');
    print('Speed ratio: ${speedRatio.toStringAsFixed(2)}');
    print('Calculated distance: ${calculatedDistance.toStringAsFixed(1)} m');
    print('Final distance: ${finalDistance.toStringAsFixed(1)} m');
    print('====================================');

    return finalDistance;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  bool _isCameraInTravelDirection(double cameraDirection) {
    if (currentSpeed < 5.0) return true; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ó‡∏¥‡∏®

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏∏‡∏°
    double angleDiff = (cameraDirection - _smoothTravelHeading).abs();
    if (angleDiff > 180) {
      angleDiff = 360 - angleDiff;
    }

    return angleDiff <= 45; // ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ¬±45 ‡∏≠‡∏á‡∏®‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  }

  void _showAdvancedSpeedAlert(
      SpeedCamera camera, double distance, bool isAhead) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô UI ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    final uiSpeed = currentSpeed.toInt(); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô UI
    final excessSpeed = uiSpeed - camera.speedLimit;
    final badgeMessage = 'üö® ‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô ${excessSpeed} km/h';
    final ttsMessage = '‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô ${excessSpeed} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á';

    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    print('=== SPEED ALERT SYNC DEBUG ===');
    print('Raw currentSpeed: $currentSpeed');
    print('UI Speed (toInt): $uiSpeed');
    print('Speed limit: ${camera.speedLimit}');
    print('Excess speed: $excessSpeed');
    print('Badge shows: "$badgeMessage"');
    print('TTS says: "$ttsMessage"');
    print('Values should now be identical!');

    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö UI
    _soundManager.playSpeedAlert(
      message: ttsMessage,
      currentSpeed: uiSpeed,
      speedLimit: camera.speedLimit,
    );

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Badge
    _showBadgeAlert(
      badgeMessage,
      Colors.orange,
      5000, // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    );
  }

  void _showProximityAlert(SpeedCamera camera, double distance) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô UI ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    final distanceInt = distance.toInt();
    final badgeMessage = 'üìç ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ${distanceInt}m';
    final ttsMessage =
        '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ${distanceInt} ‡πÄ‡∏°‡∏ï‡∏£ ‡∏à‡∏≥‡∏Å‡∏±‡∏î ${camera.speedLimit} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á';

    // Debug log
    print('=== PROXIMITY ALERT SYNC ===');
    print('Distance: ${distanceInt}m');
    print('Badge: "$badgeMessage"');
    print('TTS: "$ttsMessage"');

    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á
    _soundManager.playProximityAlert(
      message: ttsMessage,
      distance: distance,
    );

    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Badge
    _showBadgeAlert(
      badgeMessage,
      Colors.orange,
      4000, // 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Badge
  void _showBadgeAlert(String message, Color color, int durationMs) {
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡πÄ‡∏Å‡πà‡∏≤
    _badgeResetTimer?.cancel();

    setState(() {
      _badgeText = message;
      _badgeColor = color;
    });

    // ‡∏ï‡∏±‡πâ‡∏á timer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    _badgeResetTimer = Timer(Duration(milliseconds: durationMs), () {
      if (mounted) {
        setState(() {
          _badgeText = '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß';
          _badgeColor =
              const Color(0xFFFFC107); // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏û)
        });
      }
    });
  }

  void _showLocationError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content:
            Text(message, style: const TextStyle(fontFamily: 'NotoSansThai')),
        backgroundColor: Colors.orange,
        duration: const Duration(seconds: 5),
      ),
    );
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content:
            Text(message, style: const TextStyle(fontFamily: 'NotoSansThai')),
        backgroundColor: Colors.orange,
        duration: const Duration(seconds: 5),
      ),
    );
  }

  // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°

  Widget _buildTravelDirectionMarker() {
    // ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å GPS
    final markerColor = const Color(0xFF1158F2); // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì duration ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß - ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á
    final animationDuration = currentSpeed > 60
        ? const Duration(milliseconds: 150) // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á = ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏£‡πá‡∏ß
        : currentSpeed > 30
            ? const Duration(milliseconds: 250) // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            : const Duration(
                milliseconds: 400); // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡πà‡∏≥ = ‡∏´‡∏°‡∏∏‡∏ô‡∏ä‡πâ‡∏≤ ‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•

    return Stack(
      alignment: Alignment.center,
      children: [
        // ‡∏ß‡∏á‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡∏Ç‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
        Container(
          width: 70,
          height: 70,
          decoration: BoxDecoration(
            color: markerColor.withValues(alpha: 0.2), // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÉ‡∏™‡πÜ
            shape: BoxShape.circle,
            border: Border.all(
              color: markerColor.withValues(alpha: 0.2), // ‡∏Ç‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏°
              width: 1,
            ),
          ),
        ),

        // ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô - ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏π‡∏ó‡πÅ‡∏•‡∏∞‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•
        AnimatedRotation(
          turns: _smoothTravelHeading / 360, // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏õ‡πá‡∏ô turns (0-1)
          duration: animationDuration, // ‡πÉ‡∏ä‡πâ duration ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
          curve: Curves.easeInOutCubic, // curve ‡∏ó‡∏µ‡πà‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
          child: Icon(
            Icons.navigation,
            color: markerColor, // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            size: 48, // ‡∏Ç‡∏ô‡∏≤‡∏î 1.5 ‡πÄ‡∏ó‡πà‡∏≤
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent, // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏™
      extendBodyBehindAppBar: true, // ‡∏Ç‡∏¢‡∏≤‡∏¢ body ‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á AppBar
      extendBody:
          true, // ‡∏Ç‡∏¢‡∏≤‡∏¢ body ‡πÑ‡∏õ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô navigation bar
      resizeToAvoidBottomInset: false, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô navigation bar ‡πÇ‡∏ú‡∏•‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
      appBar: AppBar(
        backgroundColor: Colors.transparent, // AppBar ‡πÉ‡∏™
        elevation: 0, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏≤
        toolbarHeight: 0, // ‡∏ã‡πà‡∏≠‡∏ô toolbar ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö safe area
        systemOverlayStyle: const SystemUiOverlayStyle(
          statusBarColor: Colors.transparent, // Status bar ‡πÉ‡∏™
          statusBarIconBrightness: Brightness.dark, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°
          systemNavigationBarColor: Colors.transparent, // Navigation bar ‡πÉ‡∏™
          systemNavigationBarIconBrightness:
              Brightness.dark, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô navigation bar ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°
        ),
      ),
      body: Stack(
        children: [
          // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
          FlutterMap(
            mapController: mapController,
            options: MapOptions(
              initialCenter: currentPosition,
              initialZoom: 15.0,
              minZoom:
                  5.0, // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 8.0 ‡πÄ‡∏õ‡πá‡∏ô 5.0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ã‡∏π‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
              maxZoom: 18.0,
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
              onTap: (tapPosition, point) => _onMapInteraction(),
              onLongPress: (tapPosition, point) => _onMapInteraction(),
              onPositionChanged: (position, hasGesture) {
                if (hasGesture) {
                  _onMapInteraction();
                }
              },
            ),
            children: [
              TileLayer(
                tileProvider:
                    _smartTileProvider, // ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å ‡πÅ‡∏ï‡πà Flutter ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ
                urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                userAgentPackageName: 'com.checkdarn.app',
                maxZoom: 18,
                additionalOptions: const {
                  'User-Agent': 'CheckDarn Speed Camera App/1.0',
                },
              ),

              // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏∏‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå
              if (!isLoadingCameras)
                MarkerLayer(
                  markers: [
                    // Marker ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ä‡∏µ‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
                    Marker(
                      point: currentPosition,
                      width: 70, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 60 ‡πÄ‡∏õ‡πá‡∏ô 70 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÉ‡∏´‡∏°‡πà
                      height:
                          70, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 60 ‡πÄ‡∏õ‡πá‡∏ô 70 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÉ‡∏´‡∏°‡πà
                      child: _buildTravelDirectionMarker(),
                    ),

                    // Markers ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
                    ...speedCameras.map((camera) => Marker(
                          point: camera.location,
                          width: 40, // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 40
                          height: 40, // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 40
                          child: AnimatedScale(
                            scale: nearestCamera?.id == camera.id &&
                                    distanceToNearestCamera <= 500
                                ? 1.1 // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ 1.1 ‡πÄ‡∏ó‡πà‡∏≤ (10%)
                                : 1.0,
                            duration: const Duration(milliseconds: 300),
                            child: SpeedCameraMarker(
                              camera: camera,
                              onTap: () =>
                                  _recordAppInteraction(), // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
                            ),
                          ),
                        )),
                  ],
                ),
            ],
          ),

          // Title badge ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
          Positioned(
            top: 0, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ SafeArea ‡πÅ‡∏•‡∏∞ margin ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô map screen
            left: 0, // ‡πÉ‡∏ä‡πâ full width ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ Container ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ margin
            right: 0, // ‡πÉ‡∏ä‡πâ full width ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ Container ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ margin
            child: SafeArea(
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                margin: const EdgeInsets.only(
                    top: 10, left: 12, right: 12), // ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö map screen
                padding: const EdgeInsets.symmetric(
                    horizontal: 12, vertical: 6), // ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö map screen
                decoration: BoxDecoration(
                  color: _badgeColor, // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
                  borderRadius: BorderRadius.circular(
                      25), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏õ‡πá‡∏ô 25 ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô map screen
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withValues(alpha: 0.2),
                      blurRadius: 4,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: Row(
                  children: [
                    // ‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ - ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                    Tooltip(
                      message: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
                      textStyle: const TextStyle(
                        fontFamily: 'NotoSansThai',
                        fontSize: 12,
                        color: Colors.white,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.black.withValues(alpha: 0.8),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: GestureDetector(
                        onTap: () {
                          _recordAppInteraction(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => const SoundSettingsScreen(),
                            ),
                          );
                        },
                        child: Padding(
                          padding:
                              const EdgeInsets.all(8.0), // ‡πÄ‡∏û‡∏¥‡πà‡∏° touch area
                          child: SvgPicture.asset(
                            'assets/icons/speed_camera_screen/settings.svg',
                            width: 20, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö badge
                            height: 20,
                            colorFilter: ColorFilter.mode(
                              _soundManager.isSoundEnabled
                                  ? Colors.black // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
                                  : Colors.black54, // ‡∏™‡∏µ‡∏î‡∏≥‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
                              BlendMode.srcIn,
                            ),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 8),

                    // ‡πÉ‡∏ä‡πâ AnimatedSwitcher ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö fade
                    Expanded(
                      child: AnimatedSwitcher(
                        duration: const Duration(milliseconds: 400),
                        transitionBuilder:
                            (Widget child, Animation<double> animation) {
                          return FadeTransition(
                            opacity: animation,
                            child: SlideTransition(
                              position: Tween<Offset>(
                                begin: const Offset(0.3, 0),
                                end: Offset.zero,
                              ).animate(CurvedAnimation(
                                parent: animation,
                                curve: Curves.easeOut,
                              )),
                              child: child,
                            ),
                          );
                        },
                        child: Text(
                          _badgeText,
                          key: ValueKey(
                              _badgeText), // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AnimatedSwitcher
                          style: const TextStyle(
                            color: Colors.black, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
                            fontFamily: 'NotoSansThai',
                            fontSize: 15,
                            fontWeight: FontWeight.w500,
                          ),
                          overflow: TextOverflow.ellipsis,
                          maxLines: 1,
                        ),
                      ),
                    ),

                    const SizedBox(width: 8), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

                    // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏ß‡∏≤ - ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡πÅ‡∏ó‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á)
                    GestureDetector(
                      onTap: () async {
                        _recordAppInteraction(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö

                        print(
                            'üì± Navigating to CameraReportScreen for voting/reporting...');

                        // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ CameraReportScreen ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                        final result = await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => CameraReportScreen(
                              initialLocation: currentPosition,
                              initialRoadName: nearestCamera?.roadName,
                            ),
                          ),
                        );

                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                        if (mounted) {
                          print('üîÑ Returned from CameraReportScreen');
                          print('üîÑ Result: $result');

                          // ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠
                          // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
                          _hasJustVoted = true;
                          _lastVotingTime = DateTime.now();

                          print(
                              'üîÑ Triggering comprehensive refresh after returning from voting/reporting...');
                          await _refreshSpeedCamerasAfterVoting();
                        }
                      },
                      child: Padding(
                        padding: const EdgeInsets.all(8),
                        child: SvgPicture.asset(
                          'assets/icons/speed_camera_screen/add.svg',
                          width: 20,
                          height: 20,
                          colorFilter: const ColorFilter.mode(
                            Colors.black, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
                            BlendMode.srcIn,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // Loading indicator
          if (isLoadingLocation || isLoadingCameras)
            Container(
              color: Colors.black26,
              child: const Center(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text(
                      '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
                      style: TextStyle(
                        color: Colors.white,
                        fontFamily: 'NotoSansThai',
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              ),
            ),

          // Floating circular speed widget - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
          if (!isLoadingLocation && !isLoadingCameras)
            Positioned(
              bottom: 100,
              left: 20,
              child: CircularSpeedWidget(
                currentSpeed: currentSpeed,
                speedLimit: nearestCamera?.speedLimit.toDouble(),
                isMoving: currentSpeed > 5.0,
              ),
            ),
        ],
      ),
    );
  }
}
