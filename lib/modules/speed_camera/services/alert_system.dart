import 'dart:async';
import 'package:flutter/material.dart';
import '../../../generated/gen_l10n/app_localizations.dart';
import '../../../services/sound_manager.dart';

/// üîî **Alert System**
/// ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å SpeedCameraScreen
/// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤
class AlertSystem {
  final SoundManager _soundManager;

  // Badge state
  String _badgeText = 'Speed Camera';
  Color _badgeColor = const Color(0xFFFFC107);
  Timer? _badgeResetTimer;

  // Callbacks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
  final VoidCallback? onBadgeUpdate;

  AlertSystem(this._soundManager, {this.onBadgeUpdate});

  // Getters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI
  String get badgeText => _badgeText;
  Color get badgeColor => _badgeColor;

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  void showAlert(String message, Color color, int durationMs) {
    _badgeResetTimer?.cancel();

    _badgeText = message;
    _badgeColor = color;

    // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó
    onBadgeUpdate?.call();

    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    _badgeResetTimer = Timer(Duration(milliseconds: durationMs), () {
      _badgeText = 'Speed Camera';
      _badgeColor = const Color(0xFFFFC107);
      onBadgeUpdate?.call();
    });
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô
  void showSpeedAlert(
      double currentSpeed, int speedLimit, AppLocalizations localizations) {
    final excessSpeed = (currentSpeed - speedLimit).toInt();
    final message = localizations.badgeExceedingSpeed(excessSpeed);

    _soundManager.playSpeedAlert(
      message: '‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô $excessSpeed ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      currentSpeed: currentSpeed.toInt(),
      speedLimit: speedLimit,
    );

    showAlert(message, Colors.orange, 5000);
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á
  void showProximityAlert(double distance, AppLocalizations localizations) {
    final distanceInt = distance.toInt();
    final message = localizations.badgeCameraAhead(distanceInt);

    _soundManager.playProximityAlert(
      message: '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ $distanceInt ‡πÄ‡∏°‡∏ï‡∏£',
      distance: distance,
    );

    showAlert(message, Colors.orange, 4000);
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å - ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
  void showCloseProximityAlert(
      bool isOverSpeed, AppLocalizations localizations) {
    if (isOverSpeed) {
      _soundManager.playProximityAlert(
        message: '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß',
        distance: 50.0,
      );
      showAlert(localizations.badgeNearCameraReduceSpeed, Colors.orange, 5000);
    } else {
      _soundManager.playProximityAlert(
        message: '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
        distance: 50.0,
      );
      showAlert(localizations.badgeNearCameraGoodSpeed, Colors.green, 4000);
    }
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ radar
  void showRadarDetection(int distance, AppLocalizations localizations) {
    showAlert(
      localizations.badgeRadarDetection(distance),
      const Color(0xFF1158F2),
      2000,
    );
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
  void showPredictiveAlert(AppLocalizations localizations) {
    showAlert(
      localizations.badgePredictedCameraAhead,
      const Color(0xFF1158F2),
      6000,
    );
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  void showDataUpdateAlert(String message, {bool isSuccess = true}) {
    final color = isSuccess ? Colors.green : Colors.orange;
    showAlert(message, color, 3000);
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  void showSubtleUpdateNotification() {
    showAlert(
      'üì° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß',
      Colors.blue.withOpacity(0.8),
      2000,
    );
  }

  /// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  void showSecurityAlert(String message, {bool isCritical = false}) {
    final color = isCritical ? Colors.red : Colors.orange;
    final duration = isCritical ? 10000 : 5000;
    showAlert(message, color, duration);
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  void reset() {
    _badgeResetTimer?.cancel();
    _badgeText = 'Speed Camera';
    _badgeColor = const Color(0xFFFFC107);
    onBadgeUpdate?.call();
  }

  /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
  void dispose() {
    _badgeResetTimer?.cancel();
    _badgeResetTimer = null;
  }
}
