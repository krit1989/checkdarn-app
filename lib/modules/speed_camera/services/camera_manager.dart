import 'dart:async';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
import '../models/speed_camera_model.dart';
import '../services/speed_camera_service.dart';

/// üìπ **Camera Manager**
/// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
/// ‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
class CameraManager {
  final List<SpeedCamera> _cameras = [];

  // Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
  final Map<String, SpeedCamera> _cameraMap = {};
  DateTime? _lastLoadTime;

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> loadCameras() async {
    try {
      final cameras = await SpeedCameraService.getSpeedCameras();
      _cameras.clear();
      _cameras.addAll(cameras);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á cache map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      _cameraMap.clear();
      for (final camera in cameras) {
        _cameraMap[camera.id] = camera;
      }

      _lastLoadTime = DateTime.now();
      print('üìπ CameraManager: Loaded ${cameras.length} cameras');
    } catch (e) {
      print('‚ùå CameraManager: Error loading cameras: $e');
      rethrow;
    }
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  SpeedCamera? findNearestCamera(LatLng position) {
    if (_cameras.isEmpty) return null;

    SpeedCamera? nearest;
    double minDistance = double.infinity;

    for (final camera in _cameras) {
      final distance = _calculateDistance(position, camera.location);

      if (distance < minDistance) {
        minDistance = distance;
        nearest = camera;
      }
    }

    return nearest;
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
  List<SpeedCamera> findCamerasInRadius(
      LatLng position, double radiusInMeters) {
    if (_cameras.isEmpty) return [];

    final result = <SpeedCamera>[];

    for (final camera in _cameras) {
      final distance = _calculateDistance(position, camera.location);
      if (distance <= radiusInMeters) {
        result.add(camera);
      }
    }

    return result;
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  List<SpeedCamera> findCamerasInTravelDirection(
      LatLng position, double heading, double radiusInMeters,
      {double angleThreshold = 45.0}) {
    if (_cameras.isEmpty) return [];

    final result = <SpeedCamera>[];

    for (final camera in _cameras) {
      final distance = _calculateDistance(position, camera.location);
      if (distance > radiusInMeters) continue;

      final bearing = Geolocator.bearingBetween(
        position.latitude,
        position.longitude,
        camera.location.latitude,
        camera.location.longitude,
      );

      if (_isCameraInTravelDirection(bearing, heading, angleThreshold)) {
        result.add(camera);
      }
    }

    return result;
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° ID
  SpeedCamera? findCameraById(String id) {
    return _cameraMap[id];
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏ô‡∏ô
  List<SpeedCamera> findCamerasByRoadName(String roadName) {
    if (_cameras.isEmpty) return [];

    final lowerRoadName = roadName.toLowerCase();
    return _cameras.where((camera) {
      return camera.roadName.toLowerCase().contains(lowerRoadName);
    }).toList();
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  List<SpeedCamera> findCamerasBySpeedLimit(int speedLimit) {
    return _cameras.where((camera) => camera.speedLimit == speedLimit).toList();
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  Future<bool> refreshIfNeeded(
      {Duration maxAge = const Duration(minutes: 10)}) async {
    if (_lastLoadTime == null ||
        DateTime.now().difference(_lastLoadTime!).compareTo(maxAge) > 0) {
      await loadCameras();
      return true;
    }
    return false;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _isCameraInTravelDirection(
      double cameraBearing, double travelHeading, double threshold) {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏∏‡∏°
    double angleDiff = (cameraBearing - travelHeading).abs();
    if (angleDiff > 180) {
      angleDiff = 360 - angleDiff;
    }

    return angleDiff <= threshold;
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
  double _calculateDistance(LatLng from, LatLng to) {
    return Geolocator.distanceBetween(
      from.latitude,
      from.longitude,
      to.latitude,
      to.longitude,
    );
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏°‡∏ä‡∏ô
  List<SpeedCamera> findCommunityVerifiedCameras() {
    return _cameras.where((camera) {
      return camera.description?.contains('Community verified') == true ||
          camera.description?.contains('‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') == true;
    }).toList();
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  double calculateDistanceToNearest(LatLng position) {
    final nearest = findNearestCamera(position);
    if (nearest == null) return double.infinity;

    return _calculateDistance(position, nearest.location);
  }

  /// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á
  Map<String, dynamic> getStatistics() {
    final communityVerified = findCommunityVerifiedCameras();
    final speedLimitGroups = <int, int>{};

    for (final camera in _cameras) {
      speedLimitGroups[camera.speedLimit] =
          (speedLimitGroups[camera.speedLimit] ?? 0) + 1;
    }

    return {
      'totalCameras': _cameras.length,
      'communityVerified': communityVerified.length,
      'speedLimitGroups': speedLimitGroups,
      'lastLoadTime': _lastLoadTime?.toIso8601String(),
    };
  }

  // Getters
  List<SpeedCamera> get allCameras => List.unmodifiable(_cameras);
  int get cameraCount => _cameras.length;
  bool get isEmpty => _cameras.isEmpty;
  bool get isNotEmpty => _cameras.isNotEmpty;
  DateTime? get lastLoadTime => _lastLoadTime;

  /// ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  void clear() {
    _cameras.clear();
    _cameraMap.clear();
    _lastLoadTime = null;
  }

  /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
  void dispose() {
    clear();
  }
}
