import 'dart:async';
import 'dart:math';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';

/// üìç **Location Manager**
/// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
/// ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô GPS Spoofing ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
class LocationManager {
  // Current state
  final ValueNotifier<LatLng> currentPositionNotifier = ValueNotifier(
    const LatLng(13.7563, 100.5018), // Default Bangkok
  );
  final ValueNotifier<double> currentSpeedNotifier = ValueNotifier(0.0);
  final ValueNotifier<double> headingNotifier = ValueNotifier(0.0);

  // GPS tracking
  StreamSubscription<Position>? _positionSubscription;
  List<Position> _positionHistory = [];
  Position? _lastTrustedPosition;

  // Anti-spoofing system
  int _gpsAnomalyCount = 0;
  final int _maxGpsAnomalies = 5;
  final double _maxAcceptableAccuracy = 50.0; // ‡πÄ‡∏°‡∏ï‡∏£
  final double _maxAcceptableSpeedAccuracy = 2.0;
  final double _maxLocationJump = 500.0; // ‡πÄ‡∏°‡∏ï‡∏£
  final double _maxReasonableSpeed = 180.0; // km/h

  // Callbacks
  final Function(Position)? onPositionUpdate;
  final Function(String)? onSecurityAlert;

  LocationManager({
    this.onPositionUpdate,
    this.onSecurityAlert,
  });

  // Getters
  LatLng get currentPosition => currentPositionNotifier.value;
  double get currentSpeed => currentSpeedNotifier.value;
  double get heading => headingNotifier.value;
  List<Position> get positionHistory => List.unmodifiable(_positionHistory);
  bool get isTracking => _positionSubscription != null;

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  Future<void> startTracking() async {
    if (_positionSubscription != null) {
      print('üìç LocationManager: Already tracking');
      return;
    }

    try {
      // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      final permission = await _requestLocationPermission();
      if (!permission) {
        throw Exception('Location permission denied');
      }

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á - ‡πÉ‡∏ä‡πâ settings ‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      final locationSettings = Platform.isAndroid
          ? AndroidSettings(
              accuracy: LocationAccuracy.bestForNavigation,
              distanceFilter: 0,
              intervalDuration: const Duration(
                  milliseconds: 300), // 300ms ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android - ‡πÑ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
            )
          : AppleSettings(
              accuracy: LocationAccuracy.bestForNavigation,
              distanceFilter: 1, // ‡∏•‡∏î‡πÅ‡∏ö‡∏ï‡∏ö‡∏ô iOS
              pauseLocationUpdatesAutomatically: true,
            );

      _positionSubscription = Geolocator.getPositionStream(
        locationSettings: locationSettings,
      ).listen(
        _handlePositionUpdate,
        onError: _handleLocationError,
      );

      print('üìç LocationManager: Started tracking');
    } catch (e) {
      print('‚ùå LocationManager: Error starting tracking: $e');
      rethrow;
    }
  }

  /// ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  Future<void> stopTracking() async {
    await _positionSubscription?.cancel();
    _positionSubscription = null;
    print('üìç LocationManager: Stopped tracking');
  }

  /// ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  Future<bool> _requestLocationPermission() async {
    try {
      LocationPermission permission = await Geolocator.checkPermission();

      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          return false;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        return false;
      }

      return true;
    } catch (e) {
      print('‚ùå LocationManager: Error requesting permission: $e');
      return false;
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  void _handlePositionUpdate(Position position) {
    try {
      // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      if (!_isGpsTrusted(position)) return;

      final newSpeed = position.speed * 3.6; // m/s -> km/h

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö immediate
      currentSpeedNotifier.value = newSpeed;
      currentPositionNotifier.value =
          LatLng(position.latitude, position.longitude);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á interpolate ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á
      if (newSpeed > 10 && position.heading.isFinite) {
        headingNotifier.value = position.heading;
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      _addToHistory(position);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback
      onPositionUpdate?.call(position);
    } catch (e) {
      print('‚ùå LocationManager: Error handling position update: $e');
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á GPS
  bool _isGpsTrusted(Position position) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    if (position.accuracy > _maxAcceptableAccuracy) {
      _gpsAnomalyCount++;
      _reportSecurityIssue('GPS accuracy too low: ${position.accuracy}m');
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    if (position.speedAccuracy > _maxAcceptableSpeedAccuracy) {
      _gpsAnomalyCount++;
      _reportSecurityIssue(
          'GPS speed accuracy too low: ${position.speedAccuracy}');
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    if (_lastTrustedPosition != null) {
      final distance = Geolocator.distanceBetween(
        _lastTrustedPosition!.latitude,
        _lastTrustedPosition!.longitude,
        position.latitude,
        position.longitude,
      );

      final timeDiff = position.timestamp
          .difference(_lastTrustedPosition!.timestamp)
          .inSeconds;
      final maxPossibleDistance =
          (position.speed * timeDiff) + 100; // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ 100m

      if (distance > maxPossibleDistance && distance > _maxLocationJump) {
        _gpsAnomalyCount++;
        _reportSecurityIssue(
            'Impossible GPS jump: ${distance}m in ${timeDiff}s');
        return false;
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    final speedKmh = position.speed * 3.6;
    if (speedKmh > _maxReasonableSpeed) {
      _gpsAnomalyCount++;
      _reportSecurityIssue('Unrealistic speed: ${speedKmh}km/h');
      return false;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    _lastTrustedPosition = position;
    if (_gpsAnomalyCount > 0) {
      _gpsAnomalyCount--; // ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    }

    return true;
  }

  /// ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  void _reportSecurityIssue(String issue) {
    print('üö® LocationManager Security: $issue');
    print('üö® GPS anomaly count: $_gpsAnomalyCount/$_maxGpsAnomalies');

    onSecurityAlert?.call(issue);

    if (_gpsAnomalyCount >= _maxGpsAnomalies) {
      onSecurityAlert?.call('GPS_SPOOFING_DETECTED');
    }
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  void _addToHistory(Position position) {
    _positionHistory.add(position);

    // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 20 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (_positionHistory.length > 20) {
      _positionHistory.removeAt(0);
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  void _handleLocationError(Object error) {
    print('‚ùå LocationManager: Position stream error: $error');
    onSecurityAlert?.call('LOCATION_ERROR: $error');
  }

  /// ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  Future<Position?> getCurrentPosition() async {
    try {
      final permission = await _requestLocationPermission();
      if (!permission) return null;

      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      if (_isGpsTrusted(position)) {
        return position;
      }
      return null;
    } catch (e) {
      print('‚ùå LocationManager: Error getting current position: $e');
      return null;
    }
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  double getAverageSpeed({int lastNPositions = 5}) {
    if (_positionHistory.length < 2) return 0.0;

    final positions = _positionHistory.length > lastNPositions
        ? _positionHistory.sublist(_positionHistory.length - lastNPositions)
        : _positionHistory;

    final speeds = positions.map((p) => p.speed * 3.6).toList();
    return speeds.reduce((a, b) => a + b) / speeds.length;
  }

  /// ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
  LatLng? predictFuturePosition({int secondsAhead = 10}) {
    if (_positionHistory.length < 3) return null;

    final recent = _positionHistory.sublist(_positionHistory.length - 3);
    final avgSpeed = recent.map((p) => p.speed).reduce((a, b) => a + b) / 3;
    final avgHeading = recent.map((p) => p.heading).reduce((a, b) => a + b) / 3;

    if (avgSpeed < 2.0 || !avgHeading.isFinite) return null;

    try {
      final distanceMeters = avgSpeed * secondsAhead;
      final currentPos = currentPosition;

      final predictedLat = currentPos.latitude +
          (distanceMeters * cos(avgHeading * pi / 180)) / 111000;
      final predictedLng = currentPos.longitude +
          (distanceMeters * sin(avgHeading * pi / 180)) /
              (111000 * cos(currentPos.latitude * pi / 180));

      return LatLng(predictedLat, predictedLng);
    } catch (e) {
      print('‚ùå LocationManager: Error predicting position: $e');
      return null;
    }
  }

  /// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö GPS
  Map<String, dynamic> getGpsStatistics() {
    return {
      'anomalyCount': _gpsAnomalyCount,
      'maxAnomalies': _maxGpsAnomalies,
      'historySize': _positionHistory.length,
      'isTracking': isTracking,
      'lastTrustedPosition': _lastTrustedPosition?.timestamp.toIso8601String(),
      'averageSpeed': getAverageSpeed(),
    };
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  void resetSecurityCounters() {
    _gpsAnomalyCount = 0;
    print('üìç LocationManager: Security counters reset');
  }

  /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
  void dispose() {
    _positionSubscription?.cancel();
    _positionSubscription = null;
    _positionHistory.clear();
    currentPositionNotifier.dispose();
    currentSpeedNotifier.dispose();
    headingNotifier.dispose();
  }
}
