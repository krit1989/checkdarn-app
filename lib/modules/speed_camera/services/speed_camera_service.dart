import '../models/speed_camera_model.dart';
import 'package:latlong2/latlong.dart';
import 'camera_report_service.dart';
import 'dart:math' as math;

class SpeedCameraService {
  // static const String _baseUrl = 'https://data.go.th/api/speed-cameras'; // Mock URL - for future use

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Community Verified ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  static Future<List<SpeedCamera>> getSpeedCameras() async {
    try {
      print('üîç Loading speed cameras from Community sources only...');

      // ‡πÇ‡∏´‡∏•‡∏î Community Verified Cameras ‡∏à‡∏≤‡∏Å Firebase ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      List<SpeedCamera> communityCameras = [];
      try {
        communityCameras = await CameraReportService.getAllSpeedCameras(
          forceRefresh: true, // FORCE REFRESH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        );
        print('üèòÔ∏è Community cameras loaded: ${communityCameras.length}');

        // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á community
        for (int i = 0; i < communityCameras.length; i++) {
          final camera = communityCameras[i];
          print(
              '   Community Camera ${i + 1}: ${camera.roadName} (${camera.description})');
        }
      } catch (e) {
        print('‚ùå Error loading community cameras: $e');
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ list ‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ mock data
        return [];
      }

      print(
          '‚úÖ Total cameras loaded: ${communityCameras.length} (Community only)');

      return communityCameras;

      /*
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï: API Call ‡∏à‡∏£‡∏¥‡∏á
      final response = await http.get(
        Uri.parse('$_baseUrl/cameras'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = json.decode(response.body);
        final List<dynamic> camerasJson = data['data'] ?? [];
        
        return camerasJson
            .map((json) => SpeedCamera.fromJson(json))
            .toList();
      } else {
        throw Exception('Failed to load speed cameras: ${response.statusCode}');
      }
      */
    } catch (e) {
      print('‚ùå Error loading speed cameras: $e');
      // ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ return list ‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ mock data
      return [];
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  static SpeedCamera? findNearestCamera(
    LatLng currentLocation,
    List<SpeedCamera> cameras, {
    double maxDistance = 5000, // ‡πÄ‡∏°‡∏ï‡∏£
  }) {
    if (cameras.isEmpty) return null;

    SpeedCamera? nearestCamera;
    double nearestDistance = maxDistance;

    for (final camera in cameras) {
      final distance = _calculateDistance(currentLocation, camera.location);
      if (distance < nearestDistance) {
        nearestDistance = distance;
        nearestCamera = camera;
      }
    }

    return nearestCamera;
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  static List<SpeedCamera> getCamerasInRange(
    LatLng currentLocation,
    List<SpeedCamera> cameras, {
    double range = 2000, // ‡πÄ‡∏°‡∏ï‡∏£
  }) {
    return cameras.where((camera) {
      final distance = _calculateDistance(currentLocation, camera.location);
      return distance <= range;
    }).toList();
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
  static double _calculateDistance(LatLng point1, LatLng point2) {
    const double earthRadius = 6371000; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏°‡∏ï‡∏£

    final double lat1Rad = point1.latitude * (math.pi / 180);
    final double lat2Rad = point2.latitude * (math.pi / 180);
    final double deltaLatRad =
        (point2.latitude - point1.latitude) * (math.pi / 180);
    final double deltaLngRad =
        (point2.longitude - point1.longitude) * (math.pi / 180);

    final double a = math.sin(deltaLatRad / 2) * math.sin(deltaLatRad / 2) +
        math.cos(lat1Rad) *
            math.cos(lat2Rad) *
            math.sin(deltaLngRad / 2) *
            math.sin(deltaLngRad / 2);
    final double c = 2 * math.asin(math.sqrt(a));

    return earthRadius * c;
  }

  /// ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  static List<SpeedCamera> filterCamerasByType(
    List<SpeedCamera> cameras,
    CameraType type,
  ) {
    return cameras.where((camera) => camera.type == type).toList();
  }

  /// ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
  static List<SpeedCamera> filterCamerasBySpeedLimit(
    List<SpeedCamera> cameras, {
    int? minSpeed,
    int? maxSpeed,
  }) {
    return cameras.where((camera) {
      if (minSpeed != null && camera.speedLimit < minSpeed) return false;
      if (maxSpeed != null && camera.speedLimit > maxSpeed) return false;
      return true;
    }).toList();
  }

  /// ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
  static List<SpeedCamera> sortCamerasByDistance(
    LatLng currentLocation,
    List<SpeedCamera> cameras,
  ) {
    final List<MapEntry<SpeedCamera, double>> camerasWithDistance = cameras
        .map((camera) => MapEntry(
              camera,
              _calculateDistance(currentLocation, camera.location),
            ))
        .toList();

    camerasWithDistance.sort((a, b) => a.value.compareTo(b.value));

    return camerasWithDistance.map((entry) => entry.key).toList();
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏ô‡∏ô
  static List<SpeedCamera> searchCamerasByRoadName(
    List<SpeedCamera> cameras,
    String query,
  ) {
    final String lowerQuery = query.toLowerCase();
    return cameras
        .where((camera) =>
            camera.roadName.toLowerCase().contains(lowerQuery) ||
            (camera.description?.toLowerCase().contains(lowerQuery) ?? false))
        .toList();
  }

  /// ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° ID
  static Future<SpeedCamera?> getCameraById(String cameraId) async {
    try {
      print('üîç Getting camera by ID: $cameraId');

      // ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° ID
      final cameras = await CameraReportService.getAllSpeedCameras();

      for (final camera in cameras) {
        if (camera.id == cameraId) {
          print('‚úÖ Found camera: ${camera.roadName}');
          return camera;
        }
      }

      print('‚ùå Camera not found with ID: $cameraId');
      return null;
    } catch (e) {
      print('‚ùå Error getting camera by ID: $e');
      return null;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static Future<bool> isCameraActive(String cameraId) async {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Community cameras ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Firebase
    try {
      final cameras = await CameraReportService.getAllSpeedCameras();
      return cameras.any((camera) => camera.id == cameraId);
    } catch (e) {
      print('‚ùå Error checking camera status: $e');
      return false;
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
  static Future<void> reportCameraIssue(
    String cameraId,
    String issueType,
    String description,
  ) async {
    // ‡πÉ‡∏ä‡πâ CameraReportService ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    // TODO: Implement camera issue reporting
    print('üìù Reporting camera issue: $cameraId - $issueType: $description');
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
  static Map<String, dynamic> getCameraStatistics(List<SpeedCamera> cameras) {
    final typeCount = <CameraType, int>{};
    final speedRanges = <String, int>{
      'low': 0, // ‚â§ 60 km/h
      'medium': 0, // 61-90 km/h
      'high': 0, // > 90 km/h
    };

    for (final camera in cameras) {
      // ‡∏ô‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡πâ‡∏≠‡∏á
      typeCount[camera.type] = (typeCount[camera.type] ?? 0) + 1;

      // ‡∏ô‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      if (camera.speedLimit <= 60) {
        speedRanges['low'] = speedRanges['low']! + 1;
      } else if (camera.speedLimit <= 90) {
        speedRanges['medium'] = speedRanges['medium']! + 1;
      } else {
        speedRanges['high'] = speedRanges['high']! + 1;
      }
    }

    return {
      'total': cameras.length,
      'typeCount': typeCount,
      'speedRanges': speedRanges,
    };
  }
}
