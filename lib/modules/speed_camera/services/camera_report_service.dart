import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:latlong2/latlong.dart';
import '../models/camera_report_model.dart';
import '../models/speed_camera_model.dart';
import 'dart:math' as math;

class CameraReportService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  // Collections
  static const String _reportsCollection = 'camera_reports';
  static const String _votesCollection = 'camera_votes';
  static const String _userStatsCollection = 'user_report_stats';

  /// Submit a new camera report
  static Future<String> submitReport({
    required double latitude,
    required double longitude,
    required String roadName,
    required int speedLimit,
    required CameraReportType type,
    String? description,
    String? imageUrl,
    List<String> tags = const [],
  }) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('User not authenticated');

    // Check for duplicate reports within 50m
    final nearbyReports = await _findNearbyReports(latitude, longitude, 50);
    if (nearbyReports.isNotEmpty) {
      throw Exception('‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }

    final reportId = _firestore.collection(_reportsCollection).doc().id;
    final report = CameraReport(
      id: reportId,
      latitude: latitude,
      longitude: longitude,
      roadName: roadName,
      speedLimit: speedLimit,
      reportedBy: user.uid,
      reportedAt: DateTime.now(),
      type: type,
      description: description,
      imageUrl: imageUrl,
      tags: tags,
    );

    await _firestore
        .collection(_reportsCollection)
        .doc(reportId)
        .set(report.toJson());

    print('‚úÖ New camera report created: ${report.roadName} (ID: $reportId)');
    print('üìä Report details:');
    print('   Status: ${report.status}');
    print('   Type: ${report.type}');
    print('   Latitude: ${report.latitude}');
    print('   Longitude: ${report.longitude}');
    print('   Reported by: ${report.reportedBy}');
    print('   Reported at: ${report.reportedAt}');

    // Verify the document was saved correctly
    try {
      await Future.delayed(const Duration(milliseconds: 500));
      final savedDoc = await _firestore
          .collection(_reportsCollection)
          .doc(reportId)
          .get(const GetOptions(source: Source.server));

      if (savedDoc.exists) {
        final savedData = savedDoc.data()!;
        print('‚úÖ Verification: Document saved successfully');
        print('   Saved status: ${savedData['status']}');
        print('   Saved type: ${savedData['type']}');
        print('   Document exists: true');
      } else {
        print('‚ùå Warning: Document not found after save');
      }
    } catch (e) {
      print('‚ö†Ô∏è Could not verify document save: $e');
    }

    // Update user stats
    await _updateUserStats(user.uid, 'reports_submitted');

    return reportId;
  }

  /// Submit a vote for a camera report
  static Future<void> submitVote({
    required String reportId,
    required VoteType voteType,
    String? comment,
    int maxRetries = 2, // ‡πÄ‡∏û‡∏¥‡πà‡∏° retry mechanism
  }) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô');

    // Debug user info
    print('üîç DEBUG - User info:');
    print('   User ID: ${user.uid}');
    print('   Email: ${user.email}');
    print('   Is Anonymous: ${user.isAnonymous}');
    print('   Display Name: ${user.displayName}');
    print('   Auth Token: ${user.refreshToken != null ? "Available" : "None"}');

    Exception? lastError;

    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏ß‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î maxRetries + 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    for (int attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        if (attempt > 0) {
          print('üîÑ Vote retry attempt $attempt of $maxRetries');
          // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô retry
          await Future.delayed(Duration(milliseconds: 1000 * attempt));

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö auth token ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô retry
          await user.getIdToken(true); // Force refresh token
          print('üîê Auth token refreshed for retry');
        }

        print(
            'üó≥Ô∏è Starting vote submission for user: ${user.uid} (attempt ${attempt + 1})');

        // Check if user has already voted (FORCE SERVER CHECK - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ cache)
        print('üîç Checking if user has already voted (from server)...');
        final existingVote = await _firestore
            .collection(_votesCollection)
            .where('reportId', isEqualTo: reportId)
            .where('userId', isEqualTo: user.uid)
            .get(const GetOptions(source: Source.server)) // FORCE SERVER
            .timeout(const Duration(seconds: 15));

        if (existingVote.docs.isNotEmpty) {
          print(
              '‚ùå User has already voted - vote ID: ${existingVote.docs.first.id}');
          throw Exception('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏ß‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        }

        print('‚úÖ Vote check passed - user has not voted yet');

        // Check if report exists first (FORCE SERVER CHECK)
        print('üîç Checking if report exists (from server)...');
        final reportDoc = await _firestore
            .collection(_reportsCollection)
            .doc(reportId)
            .get(const GetOptions(source: Source.server)) // FORCE SERVER
            .timeout(const Duration(seconds: 15));

        if (!reportDoc.exists) {
          throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
        }

        final report = CameraReport.fromJson(reportDoc.data()!);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        if (report.status != CameraStatus.pending) {
          throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏ß‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending ‡πÑ‡∏î‡πâ');
        }

        print('‚úÖ Report exists and is pending - proceeding with vote');
        print(
            'üìä Report details: ${report.roadName}, Status: ${report.status}');

        final voteId = _firestore.collection(_votesCollection).doc().id;
        final vote = CameraVote(
          id: voteId,
          reportId: reportId,
          userId: user.uid,
          voteType: voteType,
          votedAt: DateTime.now(),
          comment: comment,
        );

        // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á vote ‡∏Å‡πà‡∏≠‡∏ô (with timeout)
        print('üìù Creating vote document...');
        await _firestore
            .collection(_votesCollection)
            .doc(voteId)
            .set(vote.toJson())
            .timeout(const Duration(seconds: 15));
        print('‚úÖ Vote document created successfully');

        // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï report counts ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
        print('üìä Updating report vote counts...');
        await _updateReportVoteCounts(reportId, voteType);
        print('‚úÖ Report vote counts updated successfully');

        // Update user stats (with timeout)
        print('üìà Updating user stats...');
        await _updateUserStats(user.uid, 'votes_submitted')
            .timeout(const Duration(seconds: 15));
        print('‚úÖ User stats updated successfully');

        // If auto-verified, potentially add to main speed camera database
        print('üîç Checking if report was auto-verified...');
        final isAutoVerified = await _isReportAutoVerified(reportId);
        print('üìä Auto-verification result: $isAutoVerified');

        if (isAutoVerified) {
          print('üéØ Report auto-verified - promoting to main database');
          try {
            await _promoteToMainDatabase(reportId);
            print('‚úÖ Promotion completed successfully');
          } catch (e) {
            print('‚ùå Error during promotion: $e');
            // Log the error but don't fail the vote
          }
        } else {
          print('‚è≥ Report not yet auto-verified - skipping promotion');
        }

        print('üéâ Vote submission completed successfully');
        return; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
      } catch (e) {
        lastError = Exception(e.toString());
        print('‚ùå Vote attempt ${attempt + 1} failed: $e');
        print('üîç Error type: ${e.runtimeType}');

        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if (e.toString().contains('permission-denied')) {
          print('üö´ Permission denied details:');
          print('   Current user: ${user.uid}');
          print('   User email: ${user.email ?? "No email"}');
          print('   Is authenticated: ${user.uid.isNotEmpty}');
          print('   Report ID: $reportId');
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ retry ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (e.toString().contains('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏ß‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß') ||
            e.toString().contains('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ') ||
            e.toString().contains('‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending')) {
          print('üí° Non-retryable error - stopping retries');
          break;
        }

        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ attempt ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô error ‡∏ó‡∏µ‡πà retry ‡πÑ‡∏î‡πâ
        if (attempt < maxRetries) {
          print('üîÑ Will retry in ${1000 * (attempt + 1)}ms...');
          continue;
        }
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    print('üí• All vote attempts failed');
    print('üîç Last error: ${lastError?.toString()}');

    // ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    if (lastError != null) {
      final errorMsg = lastError.toString();
      if (errorMsg.contains('permission-denied')) {
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö permission error
        print('üö´ Permission denied - Debug info:');
        print('   User authenticated: ${user.uid.isNotEmpty}');
        print('   User email: ${user.email}');
        print('   Report ID: $reportId');

        throw Exception(
            '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà');
      } else if (errorMsg.contains('not-found')) {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      } else if (errorMsg.contains('network') ||
          errorMsg.contains('timeout') ||
          errorMsg.contains('TimeoutException')) {
        throw Exception('‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      } else if (errorMsg.contains('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏ß‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß')) {
        throw Exception('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏ß‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß');
      } else {
        throw Exception(
            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏ß‡∏ï‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${errorMsg.length > 100 ? errorMsg.substring(0, 100) + "..." : errorMsg}');
      }
    } else {
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏ß‡∏ï‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  }

  /// Update report vote counts separately (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ transaction)
  static Future<void> _updateReportVoteCounts(
      String reportId, VoteType voteType) async {
    try {
      print('üìä Getting report document for vote count update...');
      final reportRef = _firestore.collection(_reportsCollection).doc(reportId);
      final reportDoc = await reportRef
          .get(const GetOptions(source: Source.server)); // Force server read

      if (!reportDoc.exists) {
        throw Exception('Report not found');
      }

      final report = CameraReport.fromJson(reportDoc.data()!);
      print(
          'üìÑ Current report - Upvotes: ${report.upvotes}, Downvotes: ${report.downvotes}');

      // Update vote counts
      final newUpvotes =
          voteType == VoteType.upvote ? report.upvotes + 1 : report.upvotes;
      final newDownvotes = voteType == VoteType.downvote
          ? report.downvotes + 1
          : report.downvotes;
      final newTotalVotes = newUpvotes + newDownvotes;
      final newConfidenceScore =
          newTotalVotes > 0 ? newUpvotes / newTotalVotes : 0.0;

      print(
          'üìä New counts - Upvotes: $newUpvotes, Downvotes: $newDownvotes, Confidence: ${(newConfidenceScore * 100).toStringAsFixed(1)}%');

      // Auto-verify if confidence is high enough
      CameraStatus newStatus = report.status;
      DateTime? verifiedAt;
      String? verifiedBy;

      print('üéØ Auto-verification check:');
      print('   Total votes: $newTotalVotes (need >= 3 for auto-verify)');
      print('   Confidence: ${(newConfidenceScore * 100).toStringAsFixed(1)}%');
      print('   Current status: ${report.status}');
      print('   Report type: ${report.type}');

      // ‡∏•‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å 5 votes ‡πÄ‡∏õ‡πá‡∏ô 3 votes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ verify ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      if (newTotalVotes >= 3) {
        if (newConfidenceScore >= 0.8) {
          newStatus = CameraStatus.verified;
          verifiedAt = DateTime.now();
          verifiedBy = 'auto_system';
          print(
              '‚úÖ Auto-verifying report due to high confidence (${(newConfidenceScore * 100).toStringAsFixed(1)}%) with $newTotalVotes votes');
        } else if (newConfidenceScore <= 0.2) {
          newStatus = CameraStatus.rejected;
          verifiedAt = DateTime.now();
          verifiedBy = 'auto_system';
          print(
              '‚ùå Auto-rejecting report due to low confidence (${(newConfidenceScore * 100).toStringAsFixed(1)}%) with $newTotalVotes votes');
        } else {
          print(
              '‚è≥ Report still pending - confidence ${(newConfidenceScore * 100).toStringAsFixed(1)}% (need >= 80% or <= 20%)');
        }
      } else {
        print('‚è≥ Not enough votes yet for auto-verification');
      }

      // Update report ‡∏î‡πâ‡∏ß‡∏¢ merge: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
      final updateData = {
        'upvotes': newUpvotes,
        'downvotes': newDownvotes,
        'confidenceScore': newConfidenceScore,
        'status': newStatus.toString().split('.').last,
        if (verifiedAt != null) 'verifiedAt': verifiedAt.toIso8601String(),
        if (verifiedBy != null) 'verifiedBy': verifiedBy,
      };

      print('üîÑ Updating report with new vote counts...');
      print('üìä Update data: $updateData');
      await reportRef.update(updateData);
      print('‚úÖ Report vote counts updated successfully');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final updatedDoc =
          await reportRef.get(const GetOptions(source: Source.server));
      if (updatedDoc.exists) {
        final updatedData = updatedDoc.data() as Map<String, dynamic>;
        print('‚úÖ Verification - Updated report data: {');
        print('   status: ${updatedData['status']}');
        print('   upvotes: ${updatedData['upvotes']}');
        print('   downvotes: ${updatedData['downvotes']}');
        print('   confidenceScore: ${updatedData['confidenceScore']}');
        print('   verifiedAt: ${updatedData['verifiedAt']}');
        print('   verifiedBy: ${updatedData['verifiedBy']}');
        print('}');
      } else {
        print('‚ùå Warning: Could not verify report update');
      }
    } catch (e) {
      print('‚ùå Error updating report vote counts: $e');

      // ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
      if (e.toString().contains('permission-denied')) {
        throw Exception('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï');
      } else if (e.toString().contains('not-found')) {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï');
      } else {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡πÑ‡∏î‡πâ: ${e.toString()}');
      }
    }
  }

  /// Get pending reports that need votes (ALWAYS FORCE REFRESH)
  static Future<List<CameraReport>> getPendingReports({
    double? userLat,
    double? userLng,
    double radiusKm =
        1000.0, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 1000 km (‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
    int limit = 50, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏õ‡πá‡∏ô 50 ‡πÇ‡∏û‡∏™‡∏ï‡πå
    bool forceRefresh = true, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    bool showAllNationwide = false, // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
  }) async {
    print('üîç === GET PENDING REPORTS START ===');
    print('üîç getPendingReports called with:');
    print('   userLat: $userLat, userLng: $userLng');
    print('   radiusKm: $radiusKm, limit: $limit');
    print('   forceRefresh: $forceRefresh');
    print('   showAllNationwide: $showAllNationwide');

    try {
      Query query = _firestore
          .collection(_reportsCollection)
          .where('status', isEqualTo: 'pending')
          .orderBy('reportedAt', descending: true)
          .limit(limit);

      print('üîç Executing Firestore query...');

      // ALWAYS FORCE REFRESH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      final snapshot = await query.get(const GetOptions(source: Source.server));

      print('üìä Firestore query result: ${snapshot.docs.length} documents');

      if (snapshot.docs.isEmpty) {
        print('‚ö†Ô∏è No pending reports found in Firestore');
        print('üîç Checking if there are any reports at all...');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        final allReportsQuery = _firestore
            .collection(_reportsCollection)
            .orderBy('reportedAt', descending: true)
            .limit(5);

        final allReportsSnapshot =
            await allReportsQuery.get(const GetOptions(source: Source.server));
        print(
            'üìä Total reports in database: ${allReportsSnapshot.docs.length}');

        for (final doc in allReportsSnapshot.docs) {
          final data = doc.data() as Map<String, dynamic>?;
          if (data != null) {
            print(
                '   Report: ${data['roadName']} - Status: ${data['status']} - Type: ${data['type']}');
          }
        }
      }

      final reports = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>?;
        if (data == null) {
          print('   ‚ùå Document ${doc.id} has null data');
          throw Exception('Document data is null');
        }

        print('üìÑ Processing document:');
        print('   Document ID: ${doc.id}');
        print('   Status: ${data['status']}');
        print('   Type: ${data['type']}');
        print('   Road: ${data['roadName']}');
        print('   Reported at: ${data['reportedAt']}');
        print('   Reported by: ${data['reportedBy']}');

        try {
          final report = CameraReport.fromJson(data);
          print('   ‚úÖ Successfully converted to CameraReport');
          return report;
        } catch (e) {
          print('   ‚ùå Error converting to CameraReport: $e');
          print('   ‚ùå Raw data: $data');
          rethrow;
        }
      }).toList();

      print('üìã Converted to ${reports.length} CameraReport objects');

      // Filter by distance if user location provided
      if (userLat != null && userLng != null && !showAllNationwide) {
        final originalCount = reports.length;
        print(
            'üìç Applying distance filter with user location: ($userLat, $userLng)');
        print('üìç Radius limit: ${radiusKm}km');

        // Debug: Check distances for all reports
        for (int i = 0; i < reports.length; i++) {
          final report = reports[i];
          final distance = _calculateDistance(
              userLat, userLng, report.latitude, report.longitude);
          print(
              '   Report ${i + 1}: ${report.roadName} - Distance: ${distance.toStringAsFixed(2)}km');
        }

        reports.removeWhere((report) {
          final distance = _calculateDistance(
              userLat, userLng, report.latitude, report.longitude);
          final tooFar = distance > radiusKm;
          if (tooFar) {
            print(
                '   ‚ùå Filtering out ${report.roadName} - ${distance.toStringAsFixed(2)}km > ${radiusKm}km');
          }
          return tooFar;
        });
        print(
            'üìç Distance filter: ${originalCount} -> ${reports.length} reports (within ${radiusKm}km)');
      } else if (showAllNationwide) {
        print('üåè Showing all reports nationwide - no distance filter applied');
      } else {
        print('üìç No user location provided - skipping distance filter');
      }

      print('‚úÖ Final result: ${reports.length} pending reports');
      print('üîç === GET PENDING REPORTS END ===');

      return reports;
    } catch (e) {
      print('‚ùå Error in getPendingReports: $e');
      print('‚ùå Error type: ${e.runtimeType}');
      print('‚ùå Stack trace: ${StackTrace.current}');
      rethrow;
    }
  }

  /// Get user's voting history (FORCE FROM SERVER)
  static Future<List<String>> getUserVotedReports() async {
    final user = _auth.currentUser;
    if (user == null) return [];

    // FORCE SERVER READ - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    final snapshot = await _firestore
        .collection(_votesCollection)
        .where('userId', isEqualTo: user.uid)
        .get(const GetOptions(source: Source.server));

    final votedReports =
        snapshot.docs.map((doc) => doc['reportId'] as String).toList();
    print(
        'üìä User voted reports (from server): ${votedReports.length} reports');

    return votedReports;
  }

  /// Get user's report statistics
  static Future<Map<String, int>> getUserStats() async {
    final user = _auth.currentUser;
    if (user == null) return {};

    final doc =
        await _firestore.collection(_userStatsCollection).doc(user.uid).get();

    if (!doc.exists) return {};

    return Map<String, int>.from(doc.data() ?? {});
  }

  /// Find nearby reports within specified radius (meters)
  static Future<List<CameraReport>> _findNearbyReports(
      double lat, double lng, double radiusMeters) async {
    // Simple geohash-like approach for nearby search
    // In production, consider using GeoFlutterFire for better geo queries

    final latRange = radiusMeters / 111000; // rough conversion

    final snapshot = await _firestore
        .collection(_reportsCollection)
        .where('latitude', isGreaterThan: lat - latRange)
        .where('latitude', isLessThan: lat + latRange)
        .get();

    final reports = snapshot.docs
        .map((doc) => CameraReport.fromJson(doc.data()))
        .where((report) {
      final distance =
          _calculateDistance(lat, lng, report.latitude, report.longitude);
      return distance * 1000 <= radiusMeters; // Convert km to meters
    }).toList();

    return reports;
  }

  /// Calculate distance between two points (in kilometers)
  static double _calculateDistance(
      double lat1, double lng1, double lat2, double lng2) {
    const earthRadius = 6371; // Earth's radius in kilometers

    final dLat = (lat2 - lat1) * math.pi / 180;
    final dLng = (lng2 - lng1) * math.pi / 180;

    final a = math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(lat1 * math.pi / 180) *
            math.cos(lat2 * math.pi / 180) *
            math.sin(dLng / 2) *
            math.sin(dLng / 2);

    final c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a));
    return earthRadius * c;
  }

  /// Update user statistics
  static Future<void> _updateUserStats(String userId, String statKey) async {
    final docRef = _firestore.collection(_userStatsCollection).doc(userId);

    await _firestore.runTransaction((transaction) async {
      final doc = await transaction.get(docRef);

      final currentStats =
          doc.exists ? Map<String, int>.from(doc.data()!) : <String, int>{};
      currentStats[statKey] = (currentStats[statKey] ?? 0) + 1;
      currentStats['total_contributions'] =
          (currentStats['total_contributions'] ?? 0) + 1;
      currentStats['last_activity'] = DateTime.now().millisecondsSinceEpoch;

      transaction.set(docRef, currentStats, SetOptions(merge: true));
    });
  }

  /// Check if report is auto-verified
  static Future<bool> _isReportAutoVerified(String reportId) async {
    print('üîç Checking auto-verification status for report: $reportId');

    try {
      final doc = await _firestore
          .collection(_reportsCollection)
          .doc(reportId)
          .get(const GetOptions(source: Source.server)); // Force server read

      if (!doc.exists) {
        print('‚ùå Report $reportId not found for auto-verification check');
        return false;
      }

      final report = CameraReport.fromJson(doc.data()!);
      final isAutoVerified = report.status == CameraStatus.verified &&
          report.verifiedBy == 'auto_system';

      print('üìä Auto-verification check result:');
      print('   Report ID: $reportId');
      print('   Status: ${report.status}');
      print('   Verified by: ${report.verifiedBy}');
      print('   Is auto-verified: $isAutoVerified');
      print('   Report type: ${report.type}');
      print('   Confidence: ${report.confidenceScore}');

      return isAutoVerified;
    } catch (e) {
      print('‚ùå Error checking auto-verification for $reportId: $e');
      return false;
    }
  }

  /// Promote verified report to main speed camera database
  static Future<void> _promoteToMainDatabase(String reportId) async {
    try {
      print('üöÄ === PROMOTION PROCESS START ===');
      print('üöÄ Attempting to promote report $reportId to main database');

      final doc = await _firestore
          .collection(_reportsCollection)
          .doc(reportId)
          .get(const GetOptions(source: Source.server)); // Force server read

      if (!doc.exists) {
        print('‚ùå Report $reportId not found - cannot promote');
        return;
      }

      final report = CameraReport.fromJson(doc.data()!);
      print('üìä Report details for promotion:');
      print('   Report ID: $reportId');
      print('   Status: ${report.status}');
      print('   Type: ${report.type}');
      print('   Verified by: ${report.verifiedBy}');
      print('   Road: ${report.roadName}');
      print('   Location: (${report.latitude}, ${report.longitude})');
      print('   Confidence: ${report.confidenceScore}');
      print('   Speed Limit: ${report.speedLimit}');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô
      if (report.status != CameraStatus.verified) {
        print('‚ùå Report status is not verified: ${report.status}');
        return;
      }

      if (report.type != CameraReportType.newCamera) {
        print('‚ùå Report type is not newCamera: ${report.type}');
        return;
      }

      print('‚úÖ Report meets basic promotion criteria');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 100 ‡πÄ‡∏°‡∏ï‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      print('üîç Checking for duplicate cameras within 100m...');
      final nearbyCameras = await getAllSpeedCameras();
      print('üìä Found ${nearbyCameras.length} existing cameras to check');

      bool hasDuplicate = false;
      String? duplicateInfo;

      for (final camera in nearbyCameras) {
        final distance = _calculateDistance(
          report.latitude,
          report.longitude,
          camera.location.latitude,
          camera.location.longitude,
        );
        final distanceInMeters = distance * 1000;

        print(
            '   Camera: ${camera.roadName} - Distance: ${distanceInMeters.toStringAsFixed(2)}m');

        if (distanceInMeters <= 100) {
          hasDuplicate = true;
          duplicateInfo =
              '${camera.roadName} (${camera.id}) at ${distanceInMeters.toStringAsFixed(2)}m';
          print('‚ö†Ô∏è Duplicate camera found within 100m:');
          print(
              '   Existing: ${camera.roadName} at (${camera.location.latitude}, ${camera.location.longitude})');
          print('   Distance: ${distanceInMeters.toStringAsFixed(2)}m');
          print('   Duplicate camera ID: ${camera.id}');
          break;
        }
      }

      if (hasDuplicate) {
        print('‚ö†Ô∏è Duplicate camera found within 100m - skipping promotion');
        print('‚ö†Ô∏è Duplicate info: $duplicateInfo');
        return;
      }

      print('‚úÖ No duplicate cameras found - proceeding with promotion');

      // Create new speed camera entry
      final cameraId = _firestore.collection('speed_cameras').doc().id;
      print('üèóÔ∏è Creating new camera with ID: $cameraId');

      final speedCamera = SpeedCamera(
        id: cameraId,
        location:
            LatLng(report.latitude, report.longitude), // Use latlong2 LatLng
        speedLimit: report.speedLimit,
        roadName: report.roadName,
        type: CameraType.fixed, // Default to fixed
        isActive: true,
        description:
            'Community verified camera (${report.confidenceScore.toStringAsFixed(2)} confidence)',
      );

      final cameraData = speedCamera.toJson();
      print('üìù Camera data to save:');
      print('   ID: ${speedCamera.id}');
      print('   Road: ${speedCamera.roadName}');
      print(
          '   Location: (${speedCamera.location.latitude}, ${speedCamera.location.longitude})');
      print('   Speed Limit: ${speedCamera.speedLimit}');
      print('   Type: ${speedCamera.type}');
      print('   Is Active: ${speedCamera.isActive}');
      print('   Description: ${speedCamera.description}');

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
      print('üíæ Saving camera to Firebase...');
      await _firestore
          .collection('speed_cameras')
          .doc(speedCamera.id)
          .set(cameraData);

      print(
          'üéâ Successfully promoted report $reportId to main database as camera $cameraId');
      print(
          'üìç Camera location: ${report.roadName} (${report.latitude}, ${report.longitude})');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ server read
      print('üîç Verifying camera was saved successfully...');
      final savedCamera = await _firestore
          .collection('speed_cameras')
          .doc(cameraId)
          .get(const GetOptions(source: Source.server));

      if (savedCamera.exists) {
        print('‚úÖ Camera successfully saved to Firebase');
        final savedData = savedCamera.data() as Map<String, dynamic>;
        print('üìä Saved camera verification:');
        print('   ID: ${savedData['id']}');
        print('   Road: ${savedData['roadName']}');
        print('   Speed Limit: ${savedData['speedLimit']}');
        print('   Is Active: ${savedData['isActive']}');
        print('   Location Object: ${savedData['location']}');
        print('   Latitude: ${savedData['latitude']}');
        print('   Longitude: ${savedData['longitude']}');

        // Force refresh speed camera service
        print('üîÑ Requesting speed camera service refresh...');
        try {
          // Call speed camera service to refresh data
          final refreshedCameras = await getAllSpeedCameras(forceRefresh: true);
          print(
              '‚úÖ Speed camera refresh completed - found ${refreshedCameras.length} cameras');
        } catch (e) {
          print('‚ö†Ô∏è Could not refresh speed camera service: $e');
        }
      } else {
        print(
            '‚ùå Failed to save camera to Firebase - camera not found after save');
      }
      print('üöÄ === PROMOTION PROCESS COMPLETE ===');
    } catch (e) {
      print('‚ùå Error promoting report $reportId to main database: $e');
      print('üîç Error stack trace: ${e.toString()}');
      print('üîç Error type: ${e.runtimeType}');

      if (e.toString().contains('permission-denied')) {
        print('üö´ Permission denied - check Firestore security rules');
      } else if (e.toString().contains('not-found')) {
        print(
            'üîç Document not found - check collection names and document IDs');
      }

      // Re-throw the error for debugging but don't fail the entire vote process
      throw Exception('Promotion failed: ${e.toString()}');
    }
  }

  /// Get all speed cameras from main database (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)
  static Future<List<SpeedCamera>> getAllSpeedCameras({
    double? userLat,
    double? userLng,
    double radiusKm =
        1000.0, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 1000 km (‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
    bool forceRefresh = true,
    bool showAllNationwide = false, // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
  }) async {
    print('üîç getAllSpeedCameras called with radius: ${radiusKm}km');
    print('üåè Show all nationwide: $showAllNationwide');

    // ‡πÉ‡∏ä‡πâ query ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á compound index
    Query query = _firestore
        .collection('speed_cameras')
        .where('isActive', isEqualTo: true);

    final snapshot = await query
        .get(forceRefresh ? const GetOptions(source: Source.server) : null);

    print('üìä Speed cameras query result: ${snapshot.docs.length} cameras');

    final cameras = snapshot.docs.map((doc) {
      final data = doc.data() as Map<String, dynamic>;
      print('   Camera: ${data['roadName']} - ${data['description']}');
      return SpeedCamera.fromJson(data);
    }).toList();

    // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° roadName ‡πÉ‡∏ô Dart ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ orderBy ‡πÉ‡∏ô Firestore
    cameras.sort((a, b) => a.roadName.compareTo(b.roadName));

    // Filter by distance if user location provided
    if (userLat != null && userLng != null && !showAllNationwide) {
      final originalCount = cameras.length;
      cameras.removeWhere((camera) {
        final distance = _calculateDistance(userLat, userLng,
            camera.location.latitude, camera.location.longitude);
        return distance > radiusKm;
      });
      print(
          'üìç Distance filter: ${originalCount} -> ${cameras.length} cameras (within ${radiusKm}km)');
    } else if (showAllNationwide) {
      print('üåè Showing all cameras nationwide - no distance filter applied');
    }

    return cameras;
  }

  /// Get verified reports (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏ß‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)
  static Future<List<CameraReport>> getVerifiedReports({
    double? userLat,
    double? userLng,
    double radiusKm =
        1000.0, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 1000 km (‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
    int limit = 50, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏õ‡πá‡∏ô 50 ‡πÇ‡∏û‡∏™‡∏ï‡πå
    bool forceRefresh = true,
    bool showAllNationwide = false, // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
  }) async {
    print('üîç getVerifiedReports called with radius: ${radiusKm}km');
    print('üåè Show all nationwide: $showAllNationwide');

    Query query = _firestore
        .collection(_reportsCollection)
        .where('status', isEqualTo: 'verified')
        .orderBy('verifiedAt', descending: true)
        .limit(limit);

    final snapshot = await query
        .get(forceRefresh ? const GetOptions(source: Source.server) : null);

    print(
        'üìä Verified reports query result: ${snapshot.docs.length} documents');

    final reports = snapshot.docs.map((doc) {
      final data = doc.data() as Map<String, dynamic>;
      print('   Verified Report: ${data['roadName']} - ${data['verifiedAt']}');
      return CameraReport.fromJson(data);
    }).toList();

    // Filter by distance if user location provided
    if (userLat != null && userLng != null && !showAllNationwide) {
      final originalCount = reports.length;
      reports.removeWhere((report) {
        final distance = _calculateDistance(
            userLat, userLng, report.latitude, report.longitude);
        return distance > radiusKm;
      });
      print(
          'üìç Distance filter: ${originalCount} -> ${reports.length} verified reports (within ${radiusKm}km)');
    } else if (showAllNationwide) {
      print(
          'üåè Showing all verified reports nationwide - no distance filter applied');
    }

    return reports;
  }

  /// Get reports by status
  static Future<List<CameraReport>> getReportsByStatus(CameraStatus status,
      {bool forceRefresh = false}) async {
    final query = _firestore
        .collection(_reportsCollection)
        .where('status', isEqualTo: status.toString().split('.').last)
        .orderBy('reportedAt', descending: true);

    // Force refresh ‡∏à‡∏≤‡∏Å server ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    final snapshot = forceRefresh
        ? await query.get(const GetOptions(source: Source.server))
        : await query.get();

    return snapshot.docs
        .map((doc) => CameraReport.fromJson(doc.data()))
        .toList();
  }

  /// Get user's own reports (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
  static Future<List<CameraReport>> getUserReports(
      {bool forceRefresh = false}) async {
    final user = _auth.currentUser;
    if (user == null) return [];

    final query = _firestore
        .collection(_reportsCollection)
        .where('reportedBy', isEqualTo: user.uid)
        .orderBy('reportedAt', descending: true);

    // Force refresh ‡∏à‡∏≤‡∏Å server ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    final snapshot = forceRefresh
        ? await query.get(const GetOptions(source: Source.server))
        : await query.get();

    return snapshot.docs
        .map((doc) => CameraReport.fromJson(doc.data()))
        .toList();
  }

  /// Delete a report (admin function)
  static Future<void> deleteReport(String reportId) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('User not authenticated');

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)
      final reportDoc =
          await _firestore.collection(_reportsCollection).doc(reportId).get();

      if (!reportDoc.exists) throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ');

      final report = CameraReport.fromJson(reportDoc.data()!);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending
      if (report.reportedBy != user.uid) {
        throw Exception('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ');
      }
      if (report.status != CameraStatus.pending) {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending ‡πÑ‡∏î‡πâ');
      }

      // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏•‡∏¢ (‡πÑ‡∏°‡πà timeout)
      await _firestore.collection(_reportsCollection).doc(reportId).delete();

      // ‡∏•‡∏ö votes ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÑ‡∏°‡πà‡∏£‡∏≠)
      _deleteVotesInBackground(reportId);
    } catch (e) {
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: $e');
    }
  }

  /// ‡∏•‡∏ö votes ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  static void _deleteVotesInBackground(String reportId) async {
    try {
      final votes = await _firestore
          .collection(_votesCollection)
          .where('reportId', isEqualTo: reportId)
          .get();

      for (final vote in votes.docs) {
        vote.reference.delete().catchError((e) {
          print('Warning: Could not delete vote ${vote.id}: $e');
        });
      }
    } catch (e) {
      print('Warning: Could not delete associated votes: $e');
    }
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug Auto-Verification ‡πÅ‡∏•‡∏∞ Promotion
  static Future<void> debugAutoVerificationProcess() async {
    print('üß™ === DEBUG AUTO-VERIFICATION PROCESS ===');

    try {
      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà verified ‡πÅ‡∏•‡πâ‡∏ß
      print('üîç Step 1: Checking verified reports...');
      final verifiedReports = await getReportsByStatus(CameraStatus.verified);
      print('üìä Found ${verifiedReports.length} verified reports');

      for (final report in verifiedReports) {
        print('   Verified Report: ${report.roadName} (${report.id})');
        print('     Status: ${report.status}');
        print('     Type: ${report.type}');
        print('     Verified by: ${report.verifiedBy}');
        print('     Confidence: ${report.confidenceScore}');
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
      print('üîç Step 2: Checking main speed camera database...');
      final allCameras = await getAllSpeedCameras();
      print('üìä Found ${allCameras.length} cameras in main database');

      final communityCameras = allCameras
          .where((camera) =>
              camera.description?.contains('Community verified') == true)
          .toList();
      print('üèòÔ∏è Community cameras: ${communityCameras.length}');

      for (final camera in communityCameras) {
        print('   Community Camera: ${camera.roadName} (${camera.id})');
        print(
            '     Location: (${camera.location.latitude}, ${camera.location.longitude})');
        print('     Description: ${camera.description}');
      }

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ verified report ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      print('üîç Step 3: Checking for verified reports that need promotion...');
      final newCameraReports = verifiedReports
          .where((report) =>
              report.type == CameraReportType.newCamera &&
              report.verifiedBy == 'auto_system')
          .toList();

      print('üìä Found ${newCameraReports.length} verified new camera reports');

      for (final report in newCameraReports) {
        print('   Report to promote: ${report.roadName} (${report.id})');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        final nearbyCamera = communityCameras.where((camera) {
          final distance = _calculateDistance(report.latitude, report.longitude,
              camera.location.latitude, camera.location.longitude);
          return distance <= 0.1; // 100 meters
        }).toList();

        if (nearbyCamera.isEmpty) {
          print(
              '     ‚ö†Ô∏è  This report should be promoted but camera not found!');
          print('     üîß Attempting manual promotion...');
          try {
            await _promoteToMainDatabase(report.id);
          } catch (e) {
            print('     ‚ùå Manual promotion failed: $e');
          }
        } else {
          print('     ‚úÖ Camera already exists: ${nearbyCamera.first.id}');
        }
      }

      print('üß™ === DEBUG PROCESS COMPLETE ===');
    } catch (e) {
      print('‚ùå Debug process failed: $e');
    }
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  static Future<void> createTestReportAndVotes({
    required double latitude,
    required double longitude,
    required String roadName,
    int speedLimit = 90,
    int numberOfUpvotes = 3,
    int numberOfDownvotes = 0,
  }) async {
    print('üß™ === CREATING TEST REPORT AND VOTES ===');

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      print('üìù Creating test report...');
      final reportId = await submitReport(
        latitude: latitude,
        longitude: longitude,
        roadName: roadName,
        speedLimit: speedLimit,
        type: CameraReportType.newCamera,
        description: 'TEST REPORT - Auto-generated for debugging',
      );

      print('‚úÖ Test report created: $reportId');
      print('   Location: ($latitude, $longitude)');
      print('   Road: $roadName');

      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏¥‡∏á‡∏Ñ‡πå
      await Future.delayed(const Duration(seconds: 2));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      print('üó≥Ô∏è  Creating test votes...');

      // Upvotes
      for (int i = 0; i < numberOfUpvotes; i++) {
        try {
          await submitVote(
            reportId: reportId,
            voteType: VoteType.upvote,
          );
          print('   ‚úÖ Upvote ${i + 1}/$numberOfUpvotes');
          await Future.delayed(const Duration(seconds: 1));
        } catch (e) {
          print('   ‚ùå Upvote ${i + 1} failed: $e');
        }
      }

      // Downvotes
      for (int i = 0; i < numberOfDownvotes; i++) {
        try {
          await submitVote(
            reportId: reportId,
            voteType: VoteType.downvote,
          );
          print('   ‚úÖ Downvote ${i + 1}/$numberOfDownvotes');
          await Future.delayed(const Duration(seconds: 1));
        } catch (e) {
          print('   ‚ùå Downvote ${i + 1} failed: $e');
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•
      await Future.delayed(const Duration(seconds: 3));
      print('üîç Checking final result...');

      final reportDoc =
          await _firestore.collection(_reportsCollection).doc(reportId).get();
      if (reportDoc.exists) {
        final updatedReport = CameraReport.fromJson(reportDoc.data()!);
        print('üìä Final report status:');
        print('   Status: ${updatedReport.status}');
        print('   Upvotes: ${updatedReport.upvotes}');
        print('   Downvotes: ${updatedReport.downvotes}');
        print('   Confidence: ${updatedReport.confidenceScore}');
        print('   Verified by: ${updatedReport.verifiedBy}');
      }

      print('üß™ === TEST COMPLETE ===');
    } catch (e) {
      print('‚ùå Test failed: $e');
    }
  }
}

// Remove the local LatLng class since we're using latlong2
