import 'package:flutter/foundation.dart';
import 'package:geolocator/geolocator.dart';
import 'dart:async';

/// Security service ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Speed Camera Screen
/// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢
class SpeedCameraSecurityService {
  // ==================== ANTI-EVASION CONSTANTS ====================

  // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
  static const int MAX_CONTINUOUS_HOURS = 12; // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  static const int MAX_HIGH_SPEED_ALERTS =
      20; // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  static const int MAX_LOCATION_JUMPS =
      5; // GPS ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  static const double SUSPICIOUS_SPEED_THRESHOLD =
      180.0; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏°./‡∏ä‡∏°.
  static const double LOCATION_JUMP_THRESHOLD =
      2000.0; // ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏Å‡∏°.

  // Rate limiting
  static const int MAX_MAP_INTERACTIONS =
      1000; // ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 100 ‡πÄ‡∏õ‡πá‡∏ô 1000)
  static const int MAX_BEEP_REQUESTS = 60; // ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ

  // ==================== TRACKING VARIABLES ====================

  static DateTime _sessionStartTime = DateTime.now();
  static int _highSpeedAlertCount = 0;
  static int _locationJumpCount = 0;
  static int _mapInteractionCount = 0;
  static int _beepRequestCount = 0;
  static int _totalViolationScore = 0;

  static final List<Position> _speedHistory = [];
  static final List<DateTime> _highSpeedEvents = [];
  static final List<DateTime> _locationJumpEvents = [];

  static Timer? _hourlyResetTimer;
  static Timer? _behaviorAnalysisTimer;

  // ==================== INITIALIZATION ====================

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  static void initialize() {
    _sessionStartTime = DateTime.now();
    _resetCounters();
    _startPeriodicResets();
    _startBehaviorAnalysis();

    if (kDebugMode) {
      debugPrint('üîí Speed Camera Security Service initialized');
      debugPrint('üîí Session started at: $_sessionStartTime');
    }
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÅ‡∏ö‡∏ö periodic
  static void _startPeriodicResets() {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    _hourlyResetTimer = Timer.periodic(const Duration(hours: 1), (timer) {
      _resetHourlyCounters();
    });
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static void _startBehaviorAnalysis() {
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    _behaviorAnalysisTimer =
        Timer.periodic(const Duration(minutes: 5), (timer) {
      _analyzeBehaviorPattern();
    });
  }

  // ==================== MAIN VALIDATION FUNCTIONS ====================

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á GPS data
  static SecurityCheckResult validateGPSData(Position position) {
    final result = SecurityCheckResult();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 1: ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
    if (!_isValidCoordinates(position.latitude, position.longitude)) {
      result.addViolation('invalid_coordinates',
          'GPS coordinates outside reasonable bounds: ${position.latitude}, ${position.longitude}');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 2: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
    final speedKmh = position.speed * 3.6;
    if (speedKmh > SUSPICIOUS_SPEED_THRESHOLD) {
      result.addViolation(
          'suspicious_speed', 'Unrealistic speed: ${speedKmh.toInt()} km/h');
      _trackHighSpeedEvent(speedKmh);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 3: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    if (_speedHistory.isNotEmpty) {
      final lastPosition = _speedHistory.last;
      final distance = Geolocator.distanceBetween(
        lastPosition.latitude,
        lastPosition.longitude,
        position.latitude,
        position.longitude,
      );

      final timeDiff =
          position.timestamp.difference(lastPosition.timestamp).inSeconds;
      if (distance > LOCATION_JUMP_THRESHOLD && timeDiff < 60) {
        result.addViolation('location_jump',
            'Impossible location jump: ${distance.toInt()}m in ${timeDiff}s');
        _trackLocationJumpEvent();
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 4: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS
    if (!_isValidGPSFrequency(position)) {
      result.addViolation('gps_frequency', 'GPS data frequency suspicious');
    }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ GPS
    _speedHistory.add(position);
    if (_speedHistory.length > 100) {
      _speedHistory.removeAt(0);
    }

    return result;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
  static SecurityCheckResult checkUsagePattern() {
    final result = SecurityCheckResult();
    final now = DateTime.now();
    final sessionDuration = now.difference(_sessionStartTime);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 1: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if (sessionDuration.inHours > MAX_CONTINUOUS_HOURS) {
      result.addViolation('excessive_usage',
          'Continuous usage for ${sessionDuration.inHours} hours');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 2: ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if (_highSpeedAlertCount > MAX_HIGH_SPEED_ALERTS) {
      result.addViolation('excessive_speed_alerts',
          'High speed alerts: $_highSpeedAlertCount/hour');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 3: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if (_locationJumpCount > MAX_LOCATION_JUMPS) {
      result.addViolation('excessive_location_jumps',
          'Location jumps: $_locationJumpCount/hour');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 4: ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if (_mapInteractionCount > MAX_MAP_INTERACTIONS) {
      result.addViolation('excessive_map_interaction',
          'Map interactions: $_mapInteractionCount/minute');
    }

    return result;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  static bool canPlayAlert() {
    _beepRequestCount++;

    if (_beepRequestCount > MAX_BEEP_REQUESTS) {
      if (kDebugMode) {
        debugPrint(
            'üö® Alert blocked: Too many beep requests ($_beepRequestCount/min)');
      }
      return false;
    }

    if (_totalViolationScore > 50) {
      if (kDebugMode) {
        debugPrint(
            'üö® Alert blocked: High violation score ($_totalViolationScore)');
      }
      return false;
    }

    return true;
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  static void recordMapInteraction() {
    _mapInteractionCount++;

    if (_mapInteractionCount > MAX_MAP_INTERACTIONS) {
      if (kDebugMode) {
        debugPrint(
            '‚ö†Ô∏è Excessive map interaction detected: $_mapInteractionCount');
      }
    }
  }

  // ==================== HELPER FUNCTIONS ====================

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  static bool _isValidCoordinates(double lat, double lng) {
    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ + buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
    return lat >= 4.0 && lat <= 22.0 && lng >= 96.0 && lng <= 107.0;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS
  static bool _isValidGPSFrequency(Position position) {
    if (_speedHistory.isEmpty) return true;

    final lastPosition = _speedHistory.last;
    final timeDiff =
        position.timestamp.difference(lastPosition.timestamp).inMilliseconds;

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS ‡∏°‡∏≤‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (< 500ms) ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (> 30s)
    return timeDiff >= 500 && timeDiff <= 30000;
  }

  /// ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á
  static void _trackHighSpeedEvent(double speed) {
    final now = DateTime.now();
    _highSpeedEvents.add(now);
    _highSpeedAlertCount++;

    // ‡∏•‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    _highSpeedEvents.removeWhere((time) => now.difference(time).inHours >= 1);

    if (kDebugMode) {
      debugPrint(
          'üö® High speed event: ${speed.toInt()} km/h (Total: $_highSpeedAlertCount)');
    }
  }

  /// ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  static void _trackLocationJumpEvent() {
    final now = DateTime.now();
    _locationJumpEvents.add(now);
    _locationJumpCount++;

    // ‡∏•‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    _locationJumpEvents
        .removeWhere((time) => now.difference(time).inHours >= 1);

    if (kDebugMode) {
      debugPrint('üö® Location jump event (Total: $_locationJumpCount)');
    }
  }

  /// ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static void _analyzeBehaviorPattern() {
    final sessionDuration =
        DateTime.now().difference(_sessionStartTime).inMinutes;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pattern score
    int patternScore = 0;

    if (_highSpeedAlertCount > 10) patternScore += 20;
    if (_locationJumpCount > 3) patternScore += 30;
    if (sessionDuration > 480) patternScore += 25; // > 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    if (_mapInteractionCount > 50) patternScore += 15;

    _totalViolationScore = patternScore;

    if (kDebugMode && patternScore > 30) {
      debugPrint(
          '‚ö†Ô∏è Suspicious behavior pattern detected (Score: $patternScore)');
      debugPrint('   - High speed alerts: $_highSpeedAlertCount');
      debugPrint('   - Location jumps: $_locationJumpCount');
      debugPrint('   - Session duration: ${sessionDuration}min');
      debugPrint('   - Map interactions: $_mapInteractionCount');
    }
  }

  // ==================== RESET FUNCTIONS ====================

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  static void _resetCounters() {
    _highSpeedAlertCount = 0;
    _locationJumpCount = 0;
    _mapInteractionCount = 0;
    _beepRequestCount = 0;
    _totalViolationScore = 0;
    _speedHistory.clear();
    _highSpeedEvents.clear();
    _locationJumpEvents.clear();
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  static void _resetHourlyCounters() {
    _highSpeedAlertCount = 0;
    _locationJumpCount = 0;

    if (kDebugMode) {
      debugPrint('üîÑ Hourly counters reset');
    }
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ô‡∏≤‡∏ó‡∏µ
  static void resetMinuteCounters() {
    _mapInteractionCount = 0;
    _beepRequestCount = 0;
  }

  // ==================== STATUS & CLEANUP ====================

  /// ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  static Map<String, dynamic> getSecurityStatus() {
    final sessionDuration = DateTime.now().difference(_sessionStartTime);

    return {
      'session_duration_hours': sessionDuration.inHours,
      'high_speed_alerts': _highSpeedAlertCount,
      'location_jumps': _locationJumpCount,
      'map_interactions': _mapInteractionCount,
      'beep_requests': _beepRequestCount,
      'violation_score': _totalViolationScore,
      'is_suspicious': _totalViolationScore > 30,
    };
  }

  /// ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
  static void dispose() {
    _hourlyResetTimer?.cancel();
    _behaviorAnalysisTimer?.cancel();
    _resetCounters();

    if (kDebugMode) {
      debugPrint('üîí Speed Camera Security Service disposed');
      final sessionDuration = DateTime.now().difference(_sessionStartTime);
      debugPrint(
          'üîí Total session duration: ${sessionDuration.inMinutes} minutes');
    }
  }
}

// ==================== SECURITY CHECK RESULT CLASS ====================

/// ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
class SecurityCheckResult {
  final List<SecurityViolation> violations = [];

  bool get isValid => violations.isEmpty;
  bool get hasCriticalViolations => violations.any((v) => v.isCritical);

  void addViolation(String type, String description,
      {bool isCritical = false}) {
    violations.add(SecurityViolation(type, description, isCritical));

    if (kDebugMode) {
      final icon = isCritical ? 'üö®' : '‚ö†Ô∏è';
      debugPrint('$icon Security violation: $type - $description');
    }
  }

  @override
  String toString() {
    if (isValid) return 'SecurityCheck: PASSED';

    return 'SecurityCheck: FAILED (${violations.length} violations)';
  }
}

/// ‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
class SecurityViolation {
  final String type;
  final String description;
  final bool isCritical;
  final DateTime timestamp;

  SecurityViolation(this.type, this.description, this.isCritical)
      : timestamp = DateTime.now();

  @override
  String toString() {
    return '${isCritical ? 'CRITICAL' : 'WARNING'}: $type - $description';
  }
}
