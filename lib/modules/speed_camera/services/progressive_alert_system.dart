import 'dart:async';
import 'package:flutter/material.dart';
import '../../../services/sound_manager.dart';
import '../models/speed_camera_model.dart';
import '../services/alert_system.dart';

/// üì¢ **Progressive Alert System**
/// ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
/// ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ
class ProgressiveAlertSystem {
  final SoundManager _soundManager;
  final AlertSystem _alertSystem;

  // Progressive beep state
  final Set<String> _alertedCameras = {};
  Timer? _beepTimer;
  SpeedCamera? _currentCamera;
  double _lastBeepDistance = 0.0;
  bool _isActive = false;

  // Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  Timer? _cleanupTimer;

  ProgressiveAlertSystem(this._soundManager, this._alertSystem) {
    _startCleanupTimer();
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö Progressive
  void startAlert(SpeedCamera camera, double distance, double currentSpeed) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (_alertedCameras.contains(camera.id)) {
      print('=== PROGRESSIVE BEEP SKIPPED ===');
      print('Camera already alerted: ${camera.roadName}');
      print('Distance: ${distance.toInt()}m');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (_currentCamera?.id == camera.id &&
        (distance - _lastBeepDistance).abs() < 5) {
      return; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    _alertedCameras.add(camera.id);

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤
    _stopAlert();

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
    _currentCamera = camera;
    _lastBeepDistance = distance;
    _isActive = true;

    final beepInterval = _calculateBeepInterval(distance);
    if (beepInterval > 0 && currentSpeed > 5.0) {
      print('=== PROGRESSIVE BEEP START ===');
      print('Camera: ${camera.roadName}');
      print('Distance: ${distance.toInt()}m');
      print('Speed: ${currentSpeed.toInt()} km/h');
      print('Beep interval: ${beepInterval}ms');

      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      _playBeep();

      // ‡∏ï‡∏±‡πâ‡∏á Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      _beepTimer = Timer.periodic(
        Duration(milliseconds: beepInterval),
        (_) => _playBeep(),
      );

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô UI (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ context)
      _alertSystem.showAlert(
        'üî¥ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ${distance.toInt()}m',
        const Color(0xFF1158F2),
        beepInterval + 1000,
      );
    }
  }

  /// ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  void stopAlert() {
    _stopAlert();
  }

  void _stopAlert() {
    if (_isActive) {
      print('=== PROGRESSIVE BEEP STOP ===');
      _beepTimer?.cancel();
      _beepTimer = null;
      _currentCamera = null;
      _lastBeepDistance = 0.0;
      _isActive = false;
    }
  }

  /// ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  void _playBeep() {
    if (_currentCamera == null || !_isActive) return;
    _soundManager.playProgressiveBeep();
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
  int _calculateBeepInterval(double distance) {
    if (distance <= 10) {
      return 500; // 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ï‡∏¥‡∏î‡πÜ)
    } else if (distance <= 20) {
      return 1000; // 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    } else if (distance <= 30) {
      return 2000; // 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    } else if (distance <= 50) {
      return 3000; // 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    } else {
      return 0; // ‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    }
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡πÄ‡∏°‡∏ï‡∏£
  void resetAlertedCamerasIfFar(List<SpeedCamera> nearbyCameras) {
    final removedCount = _alertedCameras.length;
    _alertedCameras.removeWhere((cameraId) {
      // ‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (100m) ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
      return !nearbyCameras.any((camera) => camera.id == cameraId);
    });

    if (removedCount != _alertedCameras.length) {
      print('=== CAMERA RESET BY DISTANCE ===');
      print(
          'Removed ${removedCount - _alertedCameras.length} cameras from alerted list');
      print('Remaining alerted cameras: ${_alertedCameras.length}');
    }
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏° Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  void _startCleanupTimer() {
    _cleanupTimer = Timer.periodic(const Duration(minutes: 5), (timer) {
      final oldSize = _alertedCameras.length;
      _alertedCameras.clear();

      print('=== CAMERA CLEANUP ===');
      print('Cleared $oldSize alerted cameras');
      print('Progressive Beep system reset');
      print('=====================');
    });
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
  bool get isActive => _isActive;
  SpeedCamera? get currentCamera => _currentCamera;
  int get alertedCamerasCount => _alertedCameras.length;

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  void reset() {
    _stopAlert();
    _alertedCameras.clear();
  }

  /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
  void dispose() {
    _stopAlert();
    _cleanupTimer?.cancel();
    _cleanupTimer = null;
    _alertedCameras.clear();
  }
}
