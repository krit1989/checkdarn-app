class CameraReport {
  final String id;
  final double latitude;
  final double longitude;
  final String roadName;
  final int speedLimit;
  final String reportedBy; // User ID
  final DateTime reportedAt;
  final CameraReportType type;
  final String? description;
  final String? imageUrl;
  final List<String> tags; // ['new', 'moved', 'removed', 'speed_changed']
  final String? selectedCameraId; // ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà

  // Verification data
  final int upvotes;
  final int downvotes;
  final double confidenceScore; // 0.0 - 1.0
  final CameraStatus status;
  final DateTime? verifiedAt;
  final String? verifiedBy; // Admin/Moderator ID

  const CameraReport({
    required this.id,
    required this.latitude,
    required this.longitude,
    required this.roadName,
    required this.speedLimit,
    required this.reportedBy,
    required this.reportedAt,
    required this.type,
    this.description,
    this.imageUrl,
    this.tags = const [],
    this.selectedCameraId, // ‡πÄ‡∏û‡∏¥‡πà‡∏°
    this.upvotes = 0,
    this.downvotes = 0,
    this.confidenceScore = 0.0,
    this.status = CameraStatus.pending,
    this.verifiedAt,
    this.verifiedBy,
  });

  factory CameraReport.fromJson(Map<String, dynamic> json) {
    return CameraReport(
      id: json['id'],
      latitude: json['latitude'].toDouble(),
      longitude: json['longitude'].toDouble(),
      roadName: json['roadName'] ?? '',
      speedLimit: json['speedLimit'] ?? 90,
      reportedBy: json['reportedBy'],
      reportedAt: DateTime.parse(json['reportedAt']),
      type: CameraReportType.values.firstWhere(
        (e) => e.toString().split('.').last == json['type'],
        orElse: () => CameraReportType.newCamera,
      ),
      description: json['description'],
      imageUrl: json['imageUrl'],
      tags: List<String>.from(json['tags'] ?? []),
      selectedCameraId: json['selectedCameraId'], // ‡πÄ‡∏û‡∏¥‡πà‡∏°
      upvotes: json['upvotes'] ?? 0,
      downvotes: json['downvotes'] ?? 0,
      confidenceScore: (json['confidenceScore'] ?? 0.0).toDouble(),
      status: CameraStatus.values.firstWhere(
        (e) => e.toString().split('.').last == json['status'],
        orElse: () => CameraStatus.pending,
      ),
      verifiedAt: json['verifiedAt'] != null
          ? DateTime.parse(json['verifiedAt'])
          : null,
      verifiedBy: json['verifiedBy'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'latitude': latitude,
      'longitude': longitude,
      'roadName': roadName,
      'speedLimit': speedLimit,
      'reportedBy': reportedBy,
      'reportedAt': reportedAt.toIso8601String(),
      'type': type.toString().split('.').last,
      'description': description,
      'imageUrl': imageUrl,
      'tags': tags,
      'selectedCameraId': selectedCameraId, // ‡πÄ‡∏û‡∏¥‡πà‡∏°
      'upvotes': upvotes,
      'downvotes': downvotes,
      'confidenceScore': confidenceScore,
      'status': status.toString().split('.').last,
      'verifiedAt': verifiedAt?.toIso8601String(),
      'verifiedBy': verifiedBy,
    };
  }

  // Helper methods
  bool get isVerified => status == CameraStatus.verified;
  bool get isPending => status == CameraStatus.pending;
  bool get isRejected => status == CameraStatus.rejected;

  int get totalVotes => upvotes + downvotes;
  double get approvalRatio => totalVotes > 0 ? upvotes / totalVotes : 0.0;

  // üÜï NEW VOTING SYSTEM: Race-to-3 logic
  bool get hasUpvoteWin => upvotes >= 3 && upvotes > downvotes;
  bool get hasDownvoteWin => downvotes >= 3 && downvotes > upvotes;
  bool get hasTieAt3 => upvotes == 3 && downvotes == 3;
  bool get isDecisive => hasUpvoteWin || hasDownvoteWin || hasTieAt3;

  bool get isHighConfidence =>
      confidenceScore >= 0.5 && isDecisive; // Updated for new system
  bool get needsMoreVotes => !isDecisive; // Changed from < 3 to !isDecisive

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ ID ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  bool get hasCameraId =>
      selectedCameraId != null && selectedCameraId!.isNotEmpty;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get shouldShowInMap {
    return (type == CameraReportType.newCamera && hasCameraId) ||
        (type == CameraReportType.speedChanged && hasCameraId);
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get needsSpeedUpdate =>
      type == CameraReportType.speedChanged &&
      isVerified &&
      selectedCameraId != null;
}

enum CameraReportType {
  newCamera, // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
  removedCamera, // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î
  speedChanged, // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
}

enum CameraStatus {
  pending, // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  verified, // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  rejected, // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  duplicate, // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
}

class CameraVote {
  final String id;
  final String reportId;
  final String userId;
  final VoteType voteType;
  final DateTime votedAt;
  final String? comment;

  const CameraVote({
    required this.id,
    required this.reportId,
    required this.userId,
    required this.voteType,
    required this.votedAt,
    this.comment,
  });

  factory CameraVote.fromJson(Map<String, dynamic> json) {
    return CameraVote(
      id: json['id'],
      reportId: json['reportId'],
      userId: json['userId'],
      voteType: VoteType.values.firstWhere(
        (e) => e.toString().split('.').last == json['voteType'],
      ),
      votedAt: DateTime.parse(json['votedAt']),
      comment: json['comment'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'reportId': reportId,
      'userId': userId,
      'voteType': voteType.toString().split('.').last,
      'votedAt': votedAt.toIso8601String(),
      'comment': comment,
    };
  }
}

enum VoteType {
  upvote, // ‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏´‡πá‡∏ô‡∏î‡πâ‡∏ß‡∏¢ (‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á)
  downvote, // ‡πÇ‡∏´‡∏ß‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏î‡πâ‡∏ß‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ/‡∏ú‡∏¥‡∏î)
}
