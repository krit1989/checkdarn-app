import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö kIsWeb
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'firebase_options.dart';
import 'routes/app_routes.dart';
import 'services/firebase_service.dart';
import 'services/auth_service.dart';
import 'services/cleanup_service.dart';
import 'services/enhanced_cache_service.dart';
import 'services/notification_service.dart';
import 'services/push_notification_service.dart';
import 'services/smart_location_service.dart';
import 'services/topic_subscription_service.dart';
import 'providers/language_provider.dart';
import 'generated/gen_l10n/app_localizations.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà Firebase core initialization - ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏û‡∏ó‡∏±‡∏ô‡∏ó‡∏µ - ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÑ‡∏õ‡∏ó‡∏≥‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
  runApp(const MyApp());

  // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ UI)
  _initializeBackgroundServices();
}

/// ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô background ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏≠‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
void _initializeBackgroundServices() async {
  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
  await Future.delayed(const Duration(milliseconds: 500));

  try {
    // üöÄ ‡πÄ‡∏õ‡∏¥‡∏î Local Persistence ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (Platform-specific)
    if (kIsWeb) {
      // Web persistence ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
      print('‚úÖ Firebase persistence skipped for Web (will use browser cache)');
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mobile ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Settings ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
      print('‚úÖ Firebase persistence will be set via Settings for Mobile');
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firestore settings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    FirebaseFirestore.instance.settings = const Settings(
      persistenceEnabled: true,
      cacheSizeBytes: Settings.CACHE_SIZE_UNLIMITED, // ‡πÄ‡∏û‡∏¥‡πà‡∏° cache
    );

    // Initialize services ‡πÅ‡∏ö‡∏ö background
    await AuthService.initialize();
    await EnhancedCacheService.initialize();
    await FirebaseService.initializeAndMigrate();

    // üîî ‡πÄ‡∏£‡∏¥‡πà‡∏° Notification Services
    await NotificationService.initialize();
    await PushNotificationService.initialize();

    // üó∫Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° Topic Subscription Service (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ 99.9%!)
    _startTopicSubscriptionService();

    // üåç ‡πÄ‡∏£‡∏¥‡πà‡∏° Smart Location Service (Geographic Targeting)
    _startSmartLocationService();

    // üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Smart Prefetch System
    _startSmartPrefetch();

    // üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
    CleanupService.startAutoCleanup();

    print('‚úÖ Background services initialized successfully!');
  } catch (e) {
    print('‚ö†Ô∏è Background services initialization error: $e');
  }
}

/// üöÄ Smart Prefetch System - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏â‡∏•‡∏≤‡∏î
void _startSmartPrefetch() {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏° prefetch ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å app ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô startup
  Future.delayed(const Duration(seconds: 2), () {
    FirebaseService.prefetchRecentReports();
    print('üöÄ Smart prefetch started - data will load instantly!');
  });
}

/// üó∫Ô∏è **Topic Subscription Service Starter**
/// ‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Subscribe Topics ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ 99.9%
void _startTopicSubscriptionService() {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å app ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô startup
  Future.delayed(const Duration(seconds: 3), () async {
    try {
      List<String> topics =
          await TopicSubscriptionService.subscribeToLocationTopics();
      if (topics.isNotEmpty) {
        print('üéØ Topic subscription updated successfully - Cost optimized!');

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• topics ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        Map<String, dynamic> stats =
            await TopicSubscriptionService.getTopicStats();
        print('üìä Current topics: ${topics}');
        print('üí∞ Saving 99.9% compared to mass broadcasting!');
        print('üìà Stats: ${stats}');
      } else {
        print('‚ö†Ô∏è Topic subscription update failed, will retry later');

        // Retry ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        Future.delayed(const Duration(seconds: 30), () {
          TopicSubscriptionService.subscribeToLocationTopics();
        });
      }
    } catch (e) {
      print('‚ùå Error starting topic subscription service: $e');
    }
  });
}

/// üåç **Smart Location Service Starter**
/// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Geographic Targeting
void _startSmartLocationService() {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å app ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô startup
  Future.delayed(const Duration(seconds: 4), () async {
    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      bool success =
          await SmartLocationService.updateUserLocation(forceUpdate: true);
      if (success) {
        print(
            'üåç Smart Location Service: Initial location updated successfully');

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
        SmartLocationService.startLocationTracking();
        print('üéØ Smart Location Service: Real-time tracking started');
      } else {
        print('‚ö†Ô∏è Smart Location Service: Initial location update failed');
      }
    } catch (e) {
      print('‚ùå Error starting Smart Location Service: $e');
    }
  });
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => LanguageProvider()),
      ],
      child: Consumer<LanguageProvider>(
        builder: (context, languageProvider, child) {
          return MaterialApp(
            title: 'CheckDarn - ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå',
            locale: languageProvider.currentLocale,
            localizationsDelegates: const [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            supportedLocales: const [
              Locale('en', ''), // English
              Locale('th', ''), // Thai
            ],
            theme: ThemeData(
              primarySwatch: Colors.blue,
              fontFamily: 'Sarabun',
            ),
            navigatorKey:
                NotificationService.navigatorKey, // ‡πÄ‡∏û‡∏¥‡πà‡∏° global navigator key
            initialRoute: AppRoutes.splash,
            routes: AppRoutes.routes,
            debugShowCheckedModeBanner: false,
          );
        },
      ),
    );
  }
}
