import 'package:flutter/material.dart';

enum EventCategory {
  checkpoint, // ‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à üöì
  accident, // ‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ üöë
  fire, // ‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ üî•
  floodRain, // ‡∏ù‡∏ô‡∏ï‡∏Å/‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° üåß
  tsunami, // ‡∏™‡∏∂‡∏ô‡∏≤‡∏°‡∏¥ üåä
  earthquake, // ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß üåç
  animalLost, // ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏≤‡∏¢ üê∂
  question, // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚ùì
}

extension EventCategoryExtension on EventCategory {
  String get label {
    switch (this) {
      case EventCategory.checkpoint:
        return "‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à";
      case EventCategory.accident:
        return "‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏";
      case EventCategory.fire:
        return "‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ";
      case EventCategory.floodRain:
        return "‡∏ù‡∏ô‡∏ï‡∏Å/‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°";
      case EventCategory.tsunami:
        return "‡∏™‡∏∂‡∏ô‡∏≤‡∏°‡∏¥";
      case EventCategory.earthquake:
        return "‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß";
      case EventCategory.animalLost:
        return "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏≤‡∏¢";
      case EventCategory.question:
        return "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ";
    }
  }

  String get shortLabel {
    switch (this) {
      case EventCategory.checkpoint:
        return "Checkpoints";
      case EventCategory.accident:
        return "Accidents";
      case EventCategory.fire:
        return "Fire";
      case EventCategory.floodRain:
        return "Hazards";
      case EventCategory.tsunami:
        return "Tsunami";
      case EventCategory.earthquake:
        return "Earthquake";
      case EventCategory.animalLost:
        return "Lost";
      case EventCategory.question:
        return "Question";
    }
  }

  String get emoji {
    switch (this) {
      case EventCategory.checkpoint:
        return "üöì";
      case EventCategory.accident:
        return "üöë";
      case EventCategory.fire:
        return "üî•";
      case EventCategory.floodRain:
        return "üåß";
      case EventCategory.tsunami:
        return "üåä";
      case EventCategory.earthquake:
        return "üåç";
      case EventCategory.animalLost:
        return "üê∂";
      case EventCategory.question:
        return "‚ùì";
    }
  }

  Color get color {
    switch (this) {
      case EventCategory.checkpoint:
        return const Color(0xFF9C3A3A); // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ
      case EventCategory.accident:
        return const Color(0xFFFDC621); // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô AppBar
      case EventCategory.fire:
        return const Color(0xFFF4511E); // Deep Orange - ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏≠‡∏°‡πÅ‡∏î‡∏á ‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á
      case EventCategory.floodRain:
        return const Color(
            0xFF3F51B5); // Slate Blue - ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏°‡∏°‡πà‡∏ß‡∏á ‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏ù‡∏ô‡∏ï‡∏Å
      case EventCategory.tsunami:
        return const Color(0xFF0097A7); // Teal - ‡∏ü‡πâ‡∏≤‡∏≠‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏•‡∏∑‡πà‡∏ô/‡∏ó‡∏∞‡πÄ‡∏•
      case EventCategory.earthquake:
        return const Color(
            0xFF607D8B); // Blue Grey - ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏´‡∏¥‡∏ô/‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô
      case EventCategory.animalLost:
        return const Color(0xFF689F38); // Lime Green - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏ß‡∏±‡∏á‡∏î‡∏µ
      case EventCategory.question:
        return const Color(0xFF90A4AE); // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô
    }
  }

  String get stringValue {
    switch (this) {
      case EventCategory.checkpoint:
        return "checkpoint";
      case EventCategory.accident:
        return "accident";
      case EventCategory.fire:
        return "fire";
      case EventCategory.floodRain:
        return "floodRain";
      case EventCategory.tsunami:
        return "tsunami";
      case EventCategory.earthquake:
        return "earthquake";
      case EventCategory.animalLost:
        return "animalLost";
      case EventCategory.question:
        return "question";
    }
  }

  static EventCategory fromString(String value) {
    switch (value) {
      case "checkpoint":
        return EventCategory.checkpoint;
      case "accident":
        return EventCategory.accident;
      case "fire":
        return EventCategory.fire;
      case "floodRain":
        return EventCategory.floodRain;
      case "tsunami":
        return EventCategory.tsunami;
      case "earthquake":
        return EventCategory.earthquake;
      case "animalLost":
        return EventCategory.animalLost;
      case "question":
        return EventCategory.question;
      default:
        return EventCategory.checkpoint; // default fallback
    }
  }
}

class EventModel {
  final String id;
  final String title;
  final String description;
  final EventCategory category; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å String ‡πÄ‡∏õ‡πá‡∏ô EventCategory
  final double latitude;
  final double longitude;
  final DateTime createdAt;
  final String? imageUrl;
  final String? reporterName;
  final String? reporterPhone;
  final bool isVerified;
  final int verificationCount;
  final int falseReportCount;

  EventModel({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.latitude,
    required this.longitude,
    required this.createdAt,
    this.imageUrl,
    this.reporterName,
    this.reporterPhone,
    this.isVerified = false,
    this.verificationCount = 0,
    this.falseReportCount = 0,
  });

  factory EventModel.fromJson(Map<String, dynamic> json) {
    return EventModel(
      id: json['id'] ?? '',
      title: json['title'] ?? '',
      description: json['description'] ?? '',
      category:
          EventCategoryExtension.fromString(json['category'] ?? 'checkpoint'),
      latitude: (json['latitude'] ?? 0.0).toDouble(),
      longitude: (json['longitude'] ?? 0.0).toDouble(),
      createdAt: DateTime.fromMillisecondsSinceEpoch(json['createdAt'] ?? 0),
      imageUrl: json['imageUrl'],
      reporterName: json['reporterName'],
      reporterPhone: json['reporterPhone'],
      isVerified: json['isVerified'] ?? false,
      verificationCount: json['verificationCount'] ?? 0,
      falseReportCount: json['falseReportCount'] ?? 0,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'category': category.stringValue, // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Firebase
      'latitude': latitude,
      'longitude': longitude,
      'createdAt': createdAt.millisecondsSinceEpoch,
      'imageUrl': imageUrl,
      'reporterName': reporterName,
      'reporterPhone': reporterPhone,
      'isVerified': isVerified,
      'verificationCount': verificationCount,
      'falseReportCount': falseReportCount,
    };
  }

  EventModel copyWith({
    String? id,
    String? title,
    String? description,
    EventCategory? category,
    double? latitude,
    double? longitude,
    DateTime? createdAt,
    String? imageUrl,
    String? reporterName,
    String? reporterPhone,
    bool? isVerified,
    int? verificationCount,
    int? falseReportCount,
  }) {
    return EventModel(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      category: category ?? this.category,
      latitude: latitude ?? this.latitude,
      longitude: longitude ?? this.longitude,
      createdAt: createdAt ?? this.createdAt,
      imageUrl: imageUrl ?? this.imageUrl,
      reporterName: reporterName ?? this.reporterName,
      reporterPhone: reporterPhone ?? this.reporterPhone,
      isVerified: isVerified ?? this.isVerified,
      verificationCount: verificationCount ?? this.verificationCount,
      falseReportCount: falseReportCount ?? this.falseReportCount,
    );
  }

  @override
  String toString() {
    return 'EventModel(id: $id, title: $title, category: ${category.label}, latitude: $latitude, longitude: $longitude)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is EventModel && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;
}
