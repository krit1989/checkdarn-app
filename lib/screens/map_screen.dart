import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:ui' as ui;
import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/event_model.dart';
import '../services/geocoding_service.dart';
import '../services/firebase_service.dart';
import '../services/auth_service.dart';
import '../utils/formatters.dart';
import '../widgets/bottom_bar.dart';
import '../widgets/category_selector_dialog.dart';
import '../widgets/profile_popup.dart';
import '../widgets/event_popup.dart';
import '../widgets/location_marker.dart';
import '../widgets/event_marker.dart';
import '../widgets/location_button.dart';

class MapScreen extends StatefulWidget {
  const MapScreen({super.key});

  @override
  State<MapScreen> createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  LatLng currentPosition = LatLng(13.7563, 100.5018); // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  late MapController mapController;
  double searchRadius = 10.0; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£ (10-100 km)
  LocationInfo? currentLocationInfo; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  bool isLoadingLocation = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  Timer? _realtimeTimer; // Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏´‡∏°‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  bool _isUserLoggedIn = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  bool _showProfileMenu = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå

  List<EventCategory> selectedCategories = EventCategory.values.toList();

  @override
  void initState() {
    super.initState();
    mapController = MapController();
    selectedCategories =
        EventCategory.values.toList(); // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢ default
    _loadSavedSettings(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
    _getCurrentLocation(); // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
    _startRealtimeUpdates(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏´‡∏°‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    _checkLoginStatus(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  }

  @override
  void dispose() {
    _realtimeTimer?.cancel(); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Timer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏õ‡∏¥‡∏î
    super.dispose();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  Future<void> _loadSavedSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      setState(() {
        searchRadius =
            prefs.getDouble('search_radius') ?? 50.0; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 50 km
      });
      print('Loaded search radius: $searchRadius km');
    } catch (e) {
      print('Error loading saved settings: $e');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  Future<void> _saveSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setDouble('search_radius', searchRadius);
      print('Saved search radius: $searchRadius km');
    } catch (e) {
      print('Error saving settings: $e');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏´‡∏°‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  void _startRealtimeUpdates() {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Timer ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ StreamBuilder ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ real-time updates ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    // _realtimeTimer?.cancel();
    // _realtimeTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
    //   if (mounted) {
    //     print('Debug: Refreshing markers...');
    //   }
    // });
    print('Debug: StreamBuilder handles real-time updates automatically');
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  Future<void> _checkLoginStatus() async {
    try {
      await AuthService.initialize(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AuthService
      setState(() {
        _isUserLoggedIn = AuthService.isLoggedIn;
      });
      print('Debug: Login status checked - isLoggedIn: $_isUserLoggedIn');
    } catch (e) {
      print('Error checking login status: $e');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Future<void> _getCurrentLocation() async {
    try {
      setState(() => isLoadingLocation = true);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Location Services
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        _showLocationErrorSnackbar('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Permission
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          _showLocationErrorSnackbar('‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á');
          return;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        _showLocationErrorSnackbar('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô Device Settings');
        return;
      }

      // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
      final userPosition = LatLng(position.latitude, position.longitude);
      setState(() => currentPosition = userPosition);
      mapController.move(userPosition, 15.0);
      await _getLocationInfo(userPosition);
    } catch (e) {
      _showLocationErrorSnackbar('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ: ${e.toString()}');
    } finally {
      setState(() => isLoadingLocation = false);
    }
  }

  void _showLocationErrorSnackbar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î
  Future<void> _getLocationInfo(LatLng position) async {
    try {
      final locationInfo = await GeocodingService.getLocationInfo(position);
      setState(() {
        currentLocationInfo = locationInfo;
      });
    } catch (e) {
      print('Error getting location info: $e');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á popup ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  void _showCategorySelector() {
    showDialog(
      context: context,
      builder: (context) => CategorySelectorDialog(
        initiallySelectedCategories: selectedCategories,
        onCategoriesSelected: (categories) {
          setState(() {
            selectedCategories = categories;
          });
        },
      ),
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á popup ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  void _showProfilePopup() {
    showDialog(
      context: context,
      builder: (context) => ProfilePopup(
        onLogout: () {
          setState(() {
            _isUserLoggedIn = false;
          });
        },
      ),
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á popup ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
  void _showEventPopup(
      BuildContext context, Map<String, dynamic> data, EventCategory category) {
    showDialog(
      context: context,
      builder: (context) => EventPopup(
        data: data,
        category: category,
      ),
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡πÅ‡∏°‡∏û
  void _goToMyLocation() {
    try {
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 (‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠)
      mapController.moveAndRotate(currentPosition, 15.0, 0.0);
    } catch (e) {
      print('Error moving map: $e');
      // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ move ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      try {
        mapController.move(currentPosition, 15.0);
      } catch (e2) {
        print('Error with fallback move: $e2');
        setState(() {});
      }
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á markers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å Firebase (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö)

  List<Marker> _buildEventMarkersFromFirebase(List<DocumentSnapshot> docs) {
    final now = DateTime.now();
    final fortyEightHoursAgo =
        now.subtract(const Duration(hours: 48)); // 48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà

    print('Debug: üî• === BUILDING MARKERS ===');
    print('Debug: üî• Total docs = ${docs.length}');
    print('Debug: üî• Current time = $now');
    print('Debug: üî• Forty eight hours ago = $fortyEightHoursAgo');
    print('Debug: üî• Current position = $currentPosition');
    print('Debug: üî• Search radius = $searchRadius km');
    print(
        'Debug: üî• Selected categories = ${selectedCategories.map((c) => c.toString().split('.').last).toList()}');

    // Filter ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà (48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á) ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ
    final filteredDocs = docs.where((doc) {
      final data = doc.data() as Map<String, dynamic>?;
      if (data == null) {
        print('Debug: Doc data is null for doc ${doc.id}');
        return false;
      }

      // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      print('üî• Document ID: ${doc.id}');
      print('üìå Data: $data');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      final category = data['category'] as String? ??
          data['type'] as String?; // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á field

      final eventCategory = FirebaseService.getCategoryFromName(category ?? '');
      final isCategorySelected = selectedCategories.contains(eventCategory);
      print(
          'üîÑ Category: $category | Event Category: $eventCategory | Selected: $isCategorySelected');

      if (!isCategorySelected) {
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ - ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà)
      DateTime? timestamp =
          DateTimeFormatters.parseTimestamp(data['timestamp']);

      if (timestamp == null) {
        print('Debug: No timestamp for doc ${doc.id} - REJECTED');
        return false; // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ timestamp
      }

      final isWithin48Hours = timestamp.isAfter(fortyEightHoursAgo);
      print('‚è∞ Timestamp: $timestamp | Within 48h: $isWithin48Hours');

      if (!isWithin48Hours) {
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î
      final lat = (data['lat'] ?? 0.0) as double;
      final lng = (data['lng'] ?? 0.0) as double;

      if (lat == 0.0 && lng == 0.0) {
        print('üìç No coordinates for doc ${doc.id}');
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ
      final distance = FirebaseService.calculateDistance(
        currentPosition.latitude,
        currentPosition.longitude,
        lat,
        lng,
      );

      final isWithinRadius = distance <= searchRadius;
      print('üìç Distance: $distance km | Within radius: $isWithinRadius');

      if (!isWithinRadius) {
        return false;
      }

      print(
          'Debug: Event ACCEPTED - $category at $timestamp, distance = $distance km for doc ${doc.id}');
      return true;
    }).toList();

    print('Debug: Filtered docs count = ${filteredDocs.length}');

    if (filteredDocs.isEmpty) {
      print('Debug: ‚ö†Ô∏è  No fresh markers found!');
      print(
          'Debug: - Selected categories: ${selectedCategories.map((c) => c.toString().split('.').last).toList()}');
      print('Debug: - Search radius: $searchRadius km');
      print('Debug: - Time window: last 48 hours (for freshness)');
    } else {
      print('Debug: ‚úÖ Found ${filteredDocs.length} fresh events');
    }

    final markers = filteredDocs.map((doc) {
      final data = doc.data() as Map<String, dynamic>;
      final category =
          data['category'] as String? ?? data['type'] as String? ?? '';
      final eventCategory = FirebaseService.getCategoryFromName(category);
      final lat = (data['lat'] ?? 0.0) as double;
      final lng = (data['lng'] ?? 0.0) as double;
      final latLng = LatLng(lat, lng);

      print(
          'Debug: Creating marker for doc ${doc.id} at $latLng with category $eventCategory');

      final marker = Marker(
        point: latLng,
        width: 23 * 1.3, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏π‡∏ì scale 1.3
        height: 30 * 1.3, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏π‡∏ì scale 1.3
        child: EventMarker(
          category: eventCategory,
          scale: 1.3, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
          onTap: () => _showEventPopup(context, data, eventCategory),
        ),
      );

      print('Debug: Successfully created marker for doc ${doc.id}');
      return marker;
    }).toList();

    print('Debug: üî• Final markers count = ${markers.length}');
    print('Debug: üî• === MARKERS BUILDING COMPLETE ===');
    return markers;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'CheckDarn',
          style: TextStyle(
            fontSize: 22,
            fontWeight: FontWeight.w700,
            color: Colors.black,
          ),
        ),
        backgroundColor: const Color(0xFFF0F3F8),
        foregroundColor: Colors.black,
        elevation: 0,
        centerTitle: false,
        actions: [
          // ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
          Padding(
            padding: const EdgeInsets.only(right: 16.0),
            child: GestureDetector(
              onTap: AuthService.isLoggedIn
                  ? _showProfilePopup
                  : () async {
                      final success =
                          await AuthService.showLoginDialog(context);
                      if (success && mounted) {
                        setState(() {
                          _isUserLoggedIn = AuthService.isLoggedIn;
                        });
                      }
                    },
              child: Container(
                width: 32, // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 40 ‡πÄ‡∏õ‡πá‡∏ô 32 (‡∏•‡∏î 20%)
                height: 32, // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 40 ‡πÄ‡∏õ‡πá‡∏ô 32 (‡∏•‡∏î 20%)
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: const Color(0xFF4673E5),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withValues(alpha: 0.2),
                      blurRadius: 4,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: AuthService.isLoggedIn &&
                        AuthService.currentUser?.photoURL != null
                    ? ClipRRect(
                        borderRadius:
                            BorderRadius.circular(16), // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏õ‡πá‡∏ô 16
                        child: Image.network(
                          AuthService.currentUser!.photoURL!,
                          fit: BoxFit.cover,
                          errorBuilder: (context, error, stackTrace) {
                            return const Center(
                              child: Icon(
                                Icons.person,
                                color: Colors.white,
                                size: 19, // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 24 ‡πÄ‡∏õ‡πá‡∏ô 19 (‡∏•‡∏î 20%)
                              ),
                            );
                          },
                        ),
                      )
                    : const Center(
                        child: Icon(
                          Icons.person,
                          color: Colors.white,
                          size: 19, // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 24 ‡πÄ‡∏õ‡πá‡∏ô 19 (‡∏•‡∏î 20%)
                        ),
                      ),
              ),
            ),
          ),
        ],
      ),
      body: GestureDetector(
        onTap: () {
          // ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
          if (_showProfileMenu) {
            setState(() {
              _showProfileMenu = false;
            });
          }
        },
        child: Stack(
          children: [
            // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà FlutterMap ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
            FlutterMap(
              mapController: mapController,
              options: MapOptions(
                initialCenter: currentPosition,
                initialZoom: 15.0,
                minZoom: 5.0,
                maxZoom: 18.0,
              ),
              children: [
                TileLayer(
                  urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                  userAgentPackageName: 'com.example.checkdarn',
                ),
                // ‡∏ß‡∏á‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                CircleLayer(
                  circles: [
                    CircleMarker(
                      point: currentPosition,
                      radius: searchRadius * 1000, // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£
                      useRadiusInMeter: true,
                      color: const Color(0xFF4673E5).withValues(alpha: 0.15),
                      borderColor:
                          const Color(0xFF4673E5).withValues(alpha: 0.5),
                      borderStrokeWidth: 2,
                    ),
                  ],
                ),
                // ‡∏´‡∏°‡∏∏‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                MarkerLayer(
                  markers: [
                    Marker(
                      point: currentPosition,
                      width: 36.8, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scale 1.6
                      height: 48, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scale 1.6
                      child: const LocationMarker(scale: 1.6),
                    ),
                  ],
                ),
                // ‡∏´‡∏°‡∏∏‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å Firebase
                StreamBuilder<QuerySnapshot>(
                  stream: FirebaseService.getReportsStream(),
                  builder: (context, snapshot) {
                    print(
                        'Debug: StreamBuilder state = ${snapshot.connectionState}');

                    if (snapshot.hasError) {
                      print('Debug: StreamBuilder error = ${snapshot.error}');
                      return MarkerLayer(
                          markers: []); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                    }

                    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏∏‡∏î‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏Ç‡∏ì‡∏∞‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á MarkerLayer
                    if (snapshot.connectionState == ConnectionState.waiting &&
                        !snapshot.hasData) {
                      print('Debug: StreamBuilder waiting for first data...');
                      return MarkerLayer(
                          markers: []); // ‡πÅ‡∏™‡∏î‡∏á MarkerLayer ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏ó‡∏ô SizedBox.shrink()
                    }

                    if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                      print('Debug: StreamBuilder no data or empty docs');
                      return MarkerLayer(
                          markers: []); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    }

                    final docs = snapshot.data!.docs;
                    print(
                        'Debug: ‚úÖ StreamBuilder received ${docs.length} documents from Firebase');
                    final markers = _buildEventMarkersFromFirebase(docs);
                    print(
                        'Debug: ‚úÖ Created ${markers.length} markers for map - DISPLAYING NOW');

                    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Flutter rebuild ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    return MarkerLayer(
                      key: ValueKey(
                          'markers_${docs.length}_${selectedCategories.length}_${searchRadius.toInt()}'),
                      markers: markers,
                    );
                  },
                ),
              ],
            ),

            // ‡πÅ‡∏ó‡πà‡∏á‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ö‡∏≤‡∏£‡πå‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á)
            Positioned(
              right:
                  18, // ‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
              top: 180, // ‡∏Ç‡∏¢‡∏±‡∏ö‡∏•‡∏á‡∏à‡∏≤‡∏Å 150 ‡πÄ‡∏õ‡πá‡∏ô 180
              child: Container(
                width:
                    30, // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 36 ‡πÄ‡∏õ‡πá‡∏ô 30 (‡∏•‡∏î 15% ‡∏à‡∏≤‡∏Å 36 * 0.85 = 30.6 ‚âà 30)
                height: 144, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 120 ‡πÄ‡∏õ‡πá‡∏ô 144 (‡πÄ‡∏û‡∏¥‡πà‡∏° 20%)
                padding: const EdgeInsets.symmetric(
                    vertical: 6,
                    horizontal: 5), // ‡∏•‡∏î horizontal padding ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(
                      15), // ‡∏õ‡∏£‡∏±‡∏ö radius ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà (30/2 = 15)
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withValues(alpha: 0.1),
                      blurRadius: 4,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      '${searchRadius.toInt()}',
                      style: const TextStyle(
                        fontSize: 10,
                        fontWeight: FontWeight.w600,
                        color: Color(0xFF4673E5),
                      ),
                    ),
                    Text(
                      '‡∏Å‡∏°.',
                      style: TextStyle(
                        fontSize: 8,
                        color: Colors.grey.shade600,
                      ),
                    ),
                    const SizedBox(
                        height: 1), // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 4 ‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏≠‡∏î‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                    Expanded(
                      child: RotatedBox(
                        quarterTurns: 3, // ‡∏´‡∏°‡∏∏‡∏ô 270 ‡∏≠‡∏á‡∏®‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                        child: SliderTheme(
                          data: SliderTheme.of(context).copyWith(
                            trackHeight: 3, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 3 (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥)
                            thumbShape: const RoundSliderThumbShape(
                              enabledThumbRadius: 6,
                            ),
                            overlayShape: const RoundSliderOverlayShape(
                              overlayRadius: 12,
                            ),
                          ),
                          child: Slider(
                            value: searchRadius,
                            min: 10.0,
                            max: 100.0,
                            divisions: 18,
                            activeColor: const Color(0xFF4673E5),
                            inactiveColor: Colors.grey.shade300,
                            onChanged: (value) {
                              setState(() {
                                searchRadius = value;
                              });
                              _saveSettings(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                            },
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),

            // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            Positioned(
              right: 13, // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Slider
              top: 344, // ‡∏Ç‡∏¢‡∏±‡∏ö‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ö‡∏≤‡∏£‡πå
              child: LocationButton(
                onPressed: _goToMyLocation,
                isLoading: isLoadingLocation,
                size: 40,
              ),
            ),

            // ‡πÅ‡∏ñ‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
            BottomBar(
              selectedCategories: selectedCategories,
              onCategorySelectorTap: _showCategorySelector,
            ),
          ],
        ),
      ),
    );
  }
}

// Custom Painter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
class SimpleMapPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();

    // ‡∏ß‡∏≤‡∏î‡∏ñ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏Å
    paint.color = Colors.white.withValues(alpha: 0.8);
    paint.strokeWidth = 3;
    paint.style = PaintingStyle.stroke;

    // ‡∏ñ‡∏ô‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (6 ‡πÄ‡∏™‡πâ‡∏ô)
    for (int i = 1; i < 7; i++) {
      final y = size.height * i / 7;
      canvas.drawLine(
        Offset(size.width * 0.1, y),
        Offset(size.width * 0.9, y),
        paint,
      );
    }

    // ‡∏ñ‡∏ô‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (5 ‡πÄ‡∏™‡πâ‡∏ô)
    for (int i = 1; i < 6; i++) {
      final x = size.width * i / 6;
      canvas.drawLine(
        Offset(x, size.height * 0.1),
        Offset(x, size.height * 0.9),
        paint,
      );
    }

    // ‡∏ß‡∏≤‡∏î‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥ (‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á)
    paint.color = const Color(0xFF42A5F5);
    paint.strokeWidth = 6;
    paint.style = PaintingStyle.stroke;
    final riverPath = ui.Path();
    riverPath.moveTo(size.width * 0.15, size.height * 0.3);
    riverPath.quadraticBezierTo(size.width * 0.4, size.height * 0.7,
        size.width * 0.85, size.height * 0.5);
    canvas.drawPath(riverPath, paint);

    // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞)
    paint.color = const Color(0xFF66BB6A).withValues(alpha: 0.4);
    paint.style = PaintingStyle.fill;

    // ‡∏™‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1
    final park1 = Rect.fromLTWH(size.width * 0.15, size.height * 0.15,
        size.width * 0.25, size.height * 0.2);
    canvas.drawOval(park1, paint);

    // ‡∏™‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2
    final park2 = Rect.fromLTWH(size.width * 0.6, size.height * 0.6,
        size.width * 0.3, size.height * 0.25);
    canvas.drawOval(park2, paint);

    // ‡∏ß‡∏≤‡∏î‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    paint.color = const Color(0xFF90A4AE);
    paint.style = PaintingStyle.fill;

    // ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 1
    final building1 = Rect.fromLTWH(size.width * 0.3, size.height * 0.4,
        size.width * 0.08, size.height * 0.12);
    canvas.drawRect(building1, paint);

    // ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 2
    final building2 = Rect.fromLTWH(size.width * 0.7, size.height * 0.25,
        size.width * 0.06, size.height * 0.1);
    canvas.drawRect(building2, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}
