import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:flutter/foundation.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö kDebugMode
import 'package:geolocator/geolocator.dart';
import 'package:popover/popover.dart';
import '../widgets/comment_bottom_sheet.dart';
import '../widgets/event_marker.dart'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° import EventMarker
import '../utils/formatters.dart';
import '../models/event_model.dart';
import '../services/cleanup_service.dart';
import '../services/auth_service.dart';
import '../services/location_service.dart';
import '../services/geocoding_service.dart';

class ListScreen extends StatefulWidget {
  const ListScreen({super.key});

  @override
  State<ListScreen> createState() => _ListScreenState();
}

class _ListScreenState extends State<ListScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EventCategory ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ã‡πâ‡∏≥
  final Map<String, EventCategory> _categoryCache = {};

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö location filtering
  Position? _currentPosition;
  String? _currentProvince;
  bool _isLoadingLocation = false;
  static const double _searchRadiusKm = 30.0; // ‡∏£‡∏±‡∏®‡∏°‡∏µ 30km

  // üéØ Filter variables
  EventCategory? _selectedCategory; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (null = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  bool _showMyPostsOnly = false; // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

  // üìñ Pagination variables
  static const int _pageSize = 20; // ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡∏•‡∏∞ 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  DocumentSnapshot? _lastDocument;
  bool _hasMoreData = true;
  bool _isLoadingMore = false;
  final List<DocumentSnapshot> _allDocuments = [];

  @override
  void initState() {
    super.initState();
    _getCurrentLocation();
    _loadMoreData(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (Pagination)
  // üîç Firebase Indexes ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:
  // - timestamp (‡πÄ‡∏ß‡∏•‡∏≤) - ‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  // - orderBy timestamp - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
  // üìù Index ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô Firebase: timestamp (descending)
  Future<void> _loadMoreData() async {
    if (_isLoadingMore || !_hasMoreData) return;

    setState(() => _isLoadingMore = true);

    try {
      print('Debug: Starting to load data from Firestore...');

      // Query ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö List Screen: ‡πÇ‡∏û‡∏™‡∏ï‡πå 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      final cutoffTime = DateTime.now().subtract(const Duration(hours: 24));
      print('Debug: Cutoff time: $cutoffTime');

      Query query = _firestore
          .collection('reports')
          .where('timestamp', isGreaterThan: Timestamp.fromDate(cutoffTime))
          .orderBy('timestamp', descending: true)
          .limit(_pageSize);

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ lastDocument ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏±‡πâ‡∏ô
      if (_lastDocument != null) {
        query = query.startAfterDocument(_lastDocument!);
        print('Debug: Continuing from last document: ${_lastDocument!.id}');
      }

      print('Debug: Executing Firestore query...');
      final snapshot = await query.get();
      print('Debug: Query completed. Found ${snapshot.docs.length} documents');

      if (snapshot.docs.isNotEmpty) {
        _lastDocument = snapshot.docs.last;
        _allDocuments.addAll(snapshot.docs);
        print(
            'Debug: Added ${snapshot.docs.length} documents. Total: ${_allDocuments.length}');

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ pageSize ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
        if (snapshot.docs.length < _pageSize) {
          _hasMoreData = false;
          print('Debug: Reached end of data');
        }
      } else {
        _hasMoreData = false;
        print('Debug: No more documents found');
      }
    } catch (e, stackTrace) {
      print('Error loading more data: $e');
      print('Stack trace: $stackTrace');

      // ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: $e',
                style: TextStyle(fontFamily: 'NotoSansThai')),
            backgroundColor: Colors.red,
            action: SnackBarAction(
              label: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
              textColor: Colors.white,
              onPressed: () => _loadMoreData(),
            ),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoadingMore = false);
      }
    }
  }

  Future<void> _getCurrentLocation() async {
    try {
      if (!mounted) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô setState
      setState(() => _isLoadingLocation = true);

      final position = await LocationService.getCurrentLocation();
      if (position != null) {
        if (!mounted) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô setState
        setState(() => _currentPosition = position);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        final locationInfo = await GeocodingService.getLocationInfo(
            LatLng(position.latitude, position.longitude));
        if (!mounted) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô setState
        setState(() => _currentProvince = locationInfo?.province);

        print(
            'Debug: Current location - ${position.latitude}, ${position.longitude}');
        print('Debug: Current province - $_currentProvince');
      }
    } catch (e) {
      print('Error getting location: $e');
    } finally {
      if (mounted) {
        setState(() => _isLoadingLocation = false);
      }
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _isWithinRange(Map<String, dynamic> data) {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå
    if (_currentPosition == null) return true;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
    final postLat = data['lat']?.toDouble() ?? data['latitude']?.toDouble();
    final postLng = data['lng']?.toDouble() ?? data['longitude']?.toDouble();

    if (postLat == null || postLng == null) {
      return true; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
    final distanceInMeters = LocationService.calculateDistance(
      _currentPosition!.latitude,
      _currentPosition!.longitude,
      postLat,
      postLng,
    );

    final distanceInKm = distanceInMeters / 1000;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 30km ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (distanceInKm <= _searchRadiusKm) return true;

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á
    final postProvince = data['province'] as String?;
    if (_currentProvince != null && postProvince == _currentProvince) {
      return true;
    }

    return false;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
  String _getDistanceText(Map<String, dynamic> data) {
    if (_currentPosition == null) return '';

    final postLat = data['lat']?.toDouble() ?? data['latitude']?.toDouble();
    final postLng = data['lng']?.toDouble() ?? data['longitude']?.toDouble();

    if (postLat == null || postLng == null) return '';

    final distanceInMeters = LocationService.calculateDistance(
      _currentPosition!.latitude,
      _currentPosition!.longitude,
      postLat,
      postLng,
    );

    final distanceInKm = distanceInMeters / 1000;

    if (distanceInKm < 1.0) {
      return ' (${distanceInMeters.round()} ‡∏°.)';
    } else {
      return ' (${distanceInKm.toStringAsFixed(1)} ‡∏Å‡∏°.)';
    }
  }

  void _showCommentSheet(String reportId, String title, String category) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      useRootNavigator: true, // ‡πÉ‡∏ä‡πâ root navigator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
      backgroundColor: Colors.transparent,
      barrierColor: Colors.black54, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
      isDismissible: true,
      enableDrag: true,
      useSafeArea: true,
      clipBehavior: Clip.antiAlias,
      builder: (context) => CommentBottomSheet(
        reportId: reportId,
        reportType: category, // ‡πÉ‡∏ä‡πâ category ‡πÅ‡∏ó‡∏ô
      ),
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á EventCategory ‡πÅ‡∏ö‡∏ö cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ã‡πâ‡∏≥
  EventCategory _getCachedCategory(String categoryString) {
    return _categoryCache.putIfAbsent(categoryString, () {
      try {
        return EventCategoryExtension.fromString(categoryString);
      } catch (e) {
        return EventCategory.checkpoint; // fallback
      }
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á emoji ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö category (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)
  String _getCategoryEmoji(String category) {
    final eventCategory = _getCachedCategory(category);
    return eventCategory.emoji;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)
  String _getCategoryName(String category) {
    final eventCategory = _getCachedCategory(category);
    return eventCategory.label;
  }

  // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™‡πÅ‡∏ö‡∏ö masked
  String _getMaskedPosterName(Map<String, dynamic> data) {
    final userId = data['userId'] as String?;

    if (userId == null || userId.isEmpty) {
      return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÉ‡∏ä‡πâ AuthService
    if (AuthService.currentUser?.uid == userId) {
      return AuthService.getMaskedDisplayName();
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ displayName ‡πÉ‡∏ô data ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡πâ‡∏ô
    if (data['displayName'] != null &&
        data['displayName'].toString().isNotEmpty) {
      return _maskDisplayName(data['displayName'].toString());
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ displayName ‡πÉ‡∏´‡πâ mask userId
    if (userId == 'anonymous') {
      return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
    }

    // Mask userId
    if (userId.length <= 8) return userId;
    return '${userId.substring(0, 4)}${'*' * (userId.length - 4)}';
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô mask ‡∏ä‡∏∑‡πà‡∏≠ (‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡πÉ‡∏ô AuthService)
  String _maskDisplayName(String name) {
    final parts = name.trim().split(' ');

    if (parts.isEmpty) return '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';

    if (parts.length == 1) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡πà‡∏ô "kritchapon" -> "krit*****"
      final firstPart = parts[0];
      if (firstPart.length <= 4) {
        return firstPart; // ‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÑ‡∏°‡πà mask
      }
      return '${firstPart.substring(0, 4)}${'*' * (firstPart.length - 4)}';
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô "kritchapon prommali" -> "kritchapon *******"
      final firstName = parts[0];
      final lastNameLength = parts.sublist(1).join(' ').length;
      return '$firstName ${'*' * lastNameLength}';
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ cleanup
  Future<void> _showCleanupStats() async {
    try {
      final stats = await CleanupService.getPostStatistics();

      if (!mounted) return;

      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏û‡∏™‡∏ï‡πå',
              style: TextStyle(fontFamily: 'NotoSansThai')),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('üìÑ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats['total']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                  style: TextStyle(fontFamily: 'NotoSansThai')),
              const SizedBox(height: 8),
              Text('‚ú® ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà (24 ‡∏ä‡∏°.): ${stats['fresh']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                  style: TextStyle(fontFamily: 'NotoSansThai')),
              const SizedBox(height: 8),
              Text('üóëÔ∏è ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤: ${stats['old']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                  style: TextStyle(fontFamily: 'NotoSansThai')),
              const SizedBox(height: 16),
              const Text(
                'üí° ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey,
                    fontFamily: 'NotoSansThai'),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('‡∏õ‡∏¥‡∏î',
                  style: TextStyle(fontFamily: 'NotoSansThai')),
            ),
            if (stats['old']! > 0)
              TextButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                  _performManualCleanup();
                },
                child: const Text('üßπ ‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ',
                    style: TextStyle(fontFamily: 'NotoSansThai')),
              ),
          ],
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e',
                style: TextStyle(fontFamily: 'NotoSansThai'))),
      );
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
  Future<void> _performManualCleanup() async {
    try {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('üßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤...',
                style: TextStyle(fontFamily: 'NotoSansThai'))),
      );

      final freshCount = await CleanupService.manualCleanup();

      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚úÖ ‡∏•‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà $freshCount ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
              style: TextStyle(fontFamily: 'NotoSansThai')),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö: $e',
                style: TextStyle(fontFamily: 'NotoSansThai'))),
      );
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
  void _showMapDialog(double latitude, double longitude, String? locationName,
      String category) {
    // ‡πÉ‡∏ä‡πâ cached category ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà
    final eventCategory = _getCachedCategory(category);

    showDialog(
      context: context,
      barrierDismissible: true,
      useSafeArea: false,
      builder: (context) => Material(
        color: Colors.transparent,
        child: Stack(
          children: [
            // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
            SizedBox.expand(
              child: FlutterMap(
                options: MapOptions(
                  initialCenter: LatLng(latitude, longitude),
                  initialZoom: 16.0,
                ),
                children: [
                  TileLayer(
                    urlTemplate:
                        'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                    userAgentPackageName: 'com.example.check_darn',
                  ),
                  MarkerLayer(
                    markers: [
                      Marker(
                        width: 55.0,
                        height: 55.0,
                        point: LatLng(latitude, longitude),
                        child: EventMarker(
                          category: eventCategory,
                          scale:
                              1.2, // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                          isPost:
                              true, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏∏‡∏î‡πÇ‡∏û‡∏™ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á emoji
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            // ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
            Positioned(
              top: MediaQuery.of(context).padding.top + 20,
              right: 20,
              child: GestureDetector(
                onTap: () => Navigator.of(context).pop(),
                child: Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.black.withValues(alpha: 0.7),
                    shape: BoxShape.circle,
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.3),
                        blurRadius: 8,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: const Icon(
                    Icons.close,
                    color: Colors.white,
                    size: 28,
                  ),
                ),
              ),
            ),
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            if (locationName != null)
              Positioned(
                bottom: MediaQuery.of(context).padding.bottom + 40,
                left: 20,
                right: 20,
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.black.withValues(alpha: 0.8),
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.3),
                        blurRadius: 8,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Text(
                    locationName,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      fontFamily: 'NotoSansThai',
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  // üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Filter
  void _refreshWithNewFilter() {
    _allDocuments.clear();
    _lastDocument = null;
    _hasMoreData = true;
    _loadMoreData();
  }

  // üéØ ‡πÅ‡∏™‡∏î‡∏á Filter Popover ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ü‡∏¥‡∏Å‡∏Å‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  void _showFilterPopover(BuildContext context) {
    showPopover(
      context: context,
      bodyBuilder: (context) => Transform.translate(
        offset: const Offset(
            -5, 0), // ‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ 20px (‡∏•‡∏î‡∏•‡∏á‡∏à‡∏≤‡∏Å 50px)
        child: _buildFilterPopover(context),
      ),
      direction: PopoverDirection.bottom,
      backgroundColor: Colors.white, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£
      radius: 12,
      shadow: [
        BoxShadow(
          color: Colors.black.withOpacity(0.15),
          blurRadius: 20,
          offset: const Offset(0, 8),
          spreadRadius: 2,
        ),
      ],
      arrowHeight: 8,
      arrowWidth: 16,
      width: 300, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 300px
      height: null,
    );
  }

  // üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Filter Popover Widget
  Widget _buildFilterPopover(BuildContext context) {
    return Container(
      width: 300, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 300px
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.6, // 60% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≠
      ),
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(vertical: 8),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            _buildFilterOption(
              emoji: 'üìã',
              title: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
              isSelected: _selectedCategory == null && !_showMyPostsOnly,
              onTap: () {
                setState(() {
                  _selectedCategory = null;
                  _showMyPostsOnly = false;
                  _refreshWithNewFilter();
                });
                Navigator.of(context).pop();
              },
            ),

            // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á‡πÜ
            ...EventCategory.values.map(
              (category) => _buildFilterOption(
                emoji: category.emoji,
                title: category.label,
                isSelected: _selectedCategory == category,
                onTap: () {
                  setState(() {
                    _selectedCategory = category;
                    _showMyPostsOnly = false;
                    _refreshWithNewFilter();
                  });
                  Navigator.of(context).pop();
                },
              ),
            ),

            // ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏ô
            const Divider(height: 1, thickness: 1, indent: 16, endIndent: 16),

            // ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
            _buildFilterOption(
              emoji: 'üë§',
              title: '‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô',
              isSelected: _showMyPostsOnly,
              onTap: () {
                setState(() {
                  _showMyPostsOnly = !_showMyPostsOnly;
                  _selectedCategory = null;
                  _refreshWithNewFilter();
                });
                Navigator.of(context).pop();
              },
            ),

            const SizedBox(height: 8),
          ],
        ),
      ),
    );
  }

  // üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Filter Option Widget
  Widget _buildFilterOption({
    required String emoji,
    required String title,
    required bool isSelected,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.fromLTRB(
            16, 12, 24, 12), // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏Ç‡∏ß‡∏≤‡πÄ‡∏õ‡πá‡∏ô 24px
        child: Row(
          children: [
            Text(emoji, style: const TextStyle(fontSize: 18)),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                title,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: isSelected ? FontWeight.w600 : FontWeight.w400,
                  color: isSelected ? Colors.black : Colors.grey[700],
                  fontFamily: 'NotoSansThai',
                ),
              ),
            ),
            if (isSelected)
              const Icon(Icons.check_circle, color: Colors.green, size: 20),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFEDF0F7),
      appBar: AppBar(
        title: const Text(
          '‡πÉ‡∏Å‡∏•‡πâ‡∏â‡∏±‡∏ô',
          style: TextStyle(
            fontWeight: FontWeight.w600,
            color: Colors.black,
            fontFamily: 'NotoSansThai',
          ),
        ),
        centerTitle: true, // ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á
        backgroundColor: const Color(0xFFFDC621),
        elevation: 0,
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back_ios,
            color: Colors.black,
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
        actions: [
          // üéØ Filter Popover ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ (‡∏Ç‡∏¢‡∏±‡∏ö‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢)
          Padding(
            padding: const EdgeInsets.only(right: 20), // ‡∏Ç‡∏¢‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ 20px
            child: Builder(
              builder: (context) => IconButton(
                onPressed: () => _showFilterPopover(context),
                icon: Stack(
                  children: [
                    const Icon(
                      Icons.filter_list,
                      color: Colors.black,
                      size: 24,
                    ),
                    // ‡πÅ‡∏™‡∏î‡∏á badge ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ filter ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                    if (_selectedCategory != null || _showMyPostsOnly)
                      Positioned(
                        right: 0,
                        top: 0,
                        child: Container(
                          width: 8,
                          height: 8,
                          decoration: const BoxDecoration(
                            color: Colors.red,
                            shape: BoxShape.circle,
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),

          // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î debug/dev)
          if (kDebugMode) // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô debug mode
            IconButton(
              onPressed: _showCleanupStats,
              icon: const Icon(
                Icons.info_outline,
                color: Colors.black,
              ),
              tooltip: '‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏û‡∏™‡∏ï‡πå (Dev Only)',
            ),
          // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
          if (_isLoadingLocation)
            const Padding(
              padding: EdgeInsets.only(right: 16.0),
              child: Center(
                child: SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.black),
                  ),
                ),
              ),
            ),
        ],
      ),
      body: Column(
        children: [
          // Main Content (‡∏•‡∏ö Filter Chips Section ‡∏≠‡∏≠‡∏Å)
          Expanded(
            child: RefreshIndicator(
              color: const Color(0xFFFF9800),
              onRefresh: () async {
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï pagination ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
                _allDocuments.clear();
                _lastDocument = null;
                _hasMoreData = true;
                await _loadMoreData();
              },
              child: _allDocuments.isEmpty && !_isLoadingMore
                  ? const Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.inbox_outlined,
                            size: 64,
                            color: Colors.grey,
                          ),
                          SizedBox(height: 16),
                          Text(
                            '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏',
                            style: TextStyle(
                              fontSize: 18,
                              color: Colors.grey,
                              fontWeight: FontWeight.w500,
                              fontFamily: 'NotoSansThai',
                            ),
                          ),
                          SizedBox(height: 8),
                          Text(
                            '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey,
                              fontFamily: 'NotoSansThai',
                            ),
                          ),
                        ],
                      ),
                    )
                  : ListView.builder(
                      padding: const EdgeInsets.all(8.0),
                      itemCount: _allDocuments.length + (_hasMoreData ? 1 : 0),
                      itemBuilder: (context, index) {
                        // ‡πÅ‡∏™‡∏î‡∏á loading indicator ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                        if (index == _allDocuments.length) {
                          if (!_isLoadingMore && _hasMoreData) {
                            // Trigger load more ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                            Future.delayed(Duration.zero, _loadMoreData);
                          }
                          return const Padding(
                            padding: EdgeInsets.all(16.0),
                            child: Center(
                              child: CircularProgressIndicator(
                                valueColor: AlwaysStoppedAnimation<Color>(
                                    Color(0xFFFF9800)),
                              ),
                            ),
                          );
                        }

                        final doc = _allDocuments[index];
                        final data = doc.data() as Map<String, dynamic>;
                        final reportId = doc.id;

                        // ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 30km + ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                        if (!_isWithinRange(data)) {
                          return const SizedBox
                              .shrink(); // ‡∏ã‡πà‡∏≠‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                        }

                        // üéØ Filter by category
                        if (_selectedCategory != null) {
                          final postCategory =
                              data['category'] ?? data['type'] ?? 'other';
                          final eventCategory =
                              _getCachedCategory(postCategory);
                          if (eventCategory != _selectedCategory) {
                            return const SizedBox.shrink();
                          }
                        }

                        // üéØ Filter by "My Posts Only"
                        if (_showMyPostsOnly) {
                          final postUserId = data['userId'] as String?;
                          final currentUserId = AuthService.currentUser?.uid;
                          if (postUserId != currentUserId) {
                            return const SizedBox.shrink();
                          }
                        }

                        final title = data['title'] ??
                            data['description']
                                ?.toString()
                                .split(' ')
                                .take(3)
                                .join(' ') ??
                            '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠';
                        final imageUrl = data['imageUrl'] as String?;
                        final timestamp = data['timestamp'] as Timestamp?;
                        final category = data['category'] ??
                            data['type'] ??
                            'other'; // fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ category

                        return Card(
                          margin: const EdgeInsets.symmetric(vertical: 8.0),
                          elevation: 2,
                          color: Colors.white, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Main content
                              Padding(
                                padding: const EdgeInsets.fromLTRB(
                                    16.0, 16.0, 16.0, 8.0),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1: emoji + ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå + ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
                                    Row(
                                      children: [
                                        Text(
                                          _getCategoryEmoji(category),
                                          style: const TextStyle(
                                            fontSize: 20,
                                            fontFamily: 'NotoSansThai',
                                            fontWeight:
                                                FontWeight.w500, // Medium
                                          ),
                                        ),
                                        const SizedBox(width: 8),
                                        Expanded(
                                          child: Text(
                                            _getCategoryName(category),
                                            style: const TextStyle(
                                              fontSize: 16,
                                              fontWeight:
                                                  FontWeight.w500, // Medium
                                              color: Colors.black87,
                                              fontFamily: 'NotoSansThai',
                                            ),
                                            maxLines: 1,
                                            overflow: TextOverflow.ellipsis,
                                          ),
                                        ),
                                        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
                                        if (timestamp != null) ...[
                                          Text(
                                            DateTimeFormatters.formatTimestamp(
                                                timestamp),
                                            style: TextStyle(
                                              fontSize: 12,
                                              color: Colors.grey[600],
                                              fontWeight: FontWeight.w400,
                                              fontFamily: 'NotoSansThai',
                                            ),
                                          ),
                                        ],
                                      ],
                                    ),

                                    // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                                    if (data['description'] != null &&
                                        data['description']
                                            .toString()
                                            .isNotEmpty) ...[
                                      const SizedBox(height: 5),
                                      Container(
                                        padding: const EdgeInsets.symmetric(
                                            horizontal: 8, vertical: 4),
                                        decoration: BoxDecoration(
                                          color: const Color(0xFFFF9800)
                                              .withValues(alpha: 0.1),
                                          borderRadius:
                                              BorderRadius.circular(8),
                                          border: Border.all(
                                            color: const Color(0xFFFF9800)
                                                .withValues(alpha: 0.3),
                                            width: 1,
                                          ),
                                        ),
                                        child: Text(
                                          '${data['description']}',
                                          style: const TextStyle(
                                            fontSize: 17,
                                            color: Colors.black,
                                            height: 1.3,
                                            fontFamily: 'NotoSansThai',
                                            fontWeight: FontWeight.w400,
                                          ),
                                          maxLines: 2,
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      ),
                                    ],

                                    // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà + ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                                    if (data['location'] != null &&
                                        data['location']
                                            .toString()
                                            .isNotEmpty) ...[
                                      const SizedBox(height: 5),
                                      Row(
                                        children: [
                                          const Text(
                                            'üìç',
                                            style: TextStyle(
                                              fontSize: 13,
                                              fontFamily: 'NotoSansThai',
                                              fontWeight:
                                                  FontWeight.w400, // Regular
                                            ),
                                          ),
                                          const SizedBox(width: 6),
                                          Expanded(
                                            child: Text(
                                              '${data['location']}${_getDistanceText(data)}',
                                              style: const TextStyle(
                                                fontSize: 14,
                                                color: Colors.black,
                                                fontWeight:
                                                    FontWeight.w400, // Regular
                                                fontFamily: 'NotoSansThai',
                                              ),
                                              maxLines: 1,
                                              overflow: TextOverflow.ellipsis,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],

                                    // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 4: ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                                    const SizedBox(height: 5),
                                    Row(
                                      children: [
                                        // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ (‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≠‡∏Å ‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏î‡∏á emoji + text)
                                        if (data['lat'] != null &&
                                            data['lng'] != null) ...[
                                          GestureDetector(
                                            onTap: () {
                                              _showMapDialog(
                                                data['lat'].toDouble(),
                                                data['lng'].toDouble(),
                                                data['location']?.toString(),
                                                category, // ‡πÄ‡∏û‡∏¥‡πà‡∏° category parameter
                                              );
                                            },
                                            child: Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                const Text(
                                                  'üó∫Ô∏è',
                                                  style: TextStyle(
                                                    fontSize: 13,
                                                    fontFamily: 'NotoSansThai',
                                                    fontWeight: FontWeight
                                                        .w400, // Regular
                                                  ),
                                                ),
                                                const SizedBox(width: 4),
                                                Text(
                                                  '‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
                                                  style: TextStyle(
                                                    fontSize: 14,
                                                    color: Colors.blue[800],
                                                    fontWeight: FontWeight
                                                        .w400, // Regular
                                                    fontFamily: 'NotoSansThai',
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ] else if (data['latitude'] != null &&
                                            data['longitude'] != null) ...[
                                          GestureDetector(
                                            onTap: () {
                                              _showMapDialog(
                                                data['latitude'].toDouble(),
                                                data['longitude'].toDouble(),
                                                data['location'] ??
                                                    '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
                                                category, // ‡πÄ‡∏û‡∏¥‡πà‡∏° category parameter
                                              );
                                            },
                                            child: Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                const Text(
                                                  'üó∫Ô∏è',
                                                  style: TextStyle(
                                                    fontSize: 13,
                                                    fontFamily: 'NotoSansThai',
                                                    fontWeight: FontWeight
                                                        .w400, // Regular
                                                  ),
                                                ),
                                                const SizedBox(width: 4),
                                                Text(
                                                  '‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
                                                  style: TextStyle(
                                                    fontSize: 14,
                                                    color: Colors.blue[800],
                                                    fontWeight: FontWeight
                                                        .w400, // Regular
                                                    fontFamily: 'NotoSansThai',
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ],
                                      ],
                                    ),

                                    // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 5: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                                    if (imageUrl != null &&
                                        imageUrl.isNotEmpty &&
                                        imageUrl.trim() != '') ...[
                                      const SizedBox(height: 5),
                                      GestureDetector(
                                        onTap: () {
                                          // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
                                          showDialog(
                                            context: context,
                                            builder: (context) => Dialog(
                                              backgroundColor: Colors.black,
                                              child: Stack(
                                                children: [
                                                  Center(
                                                    child: Image.network(
                                                      imageUrl,
                                                      fit: BoxFit.contain,
                                                      loadingBuilder: (context,
                                                          child,
                                                          loadingProgress) {
                                                        if (loadingProgress ==
                                                            null) {
                                                          return child;
                                                        }
                                                        return const Center(
                                                          child:
                                                              CircularProgressIndicator(
                                                            color: Colors.white,
                                                          ),
                                                        );
                                                      },
                                                      errorBuilder: (context,
                                                          error, stackTrace) {
                                                        print(
                                                            'Error loading image: $error');
                                                        print(
                                                            'Image URL: $imageUrl');
                                                        return const Center(
                                                          child: Column(
                                                            mainAxisAlignment:
                                                                MainAxisAlignment
                                                                    .center,
                                                            children: [
                                                              Icon(
                                                                  Icons
                                                                      .broken_image,
                                                                  size: 48,
                                                                  color: Colors
                                                                      .white),
                                                              SizedBox(
                                                                  height: 8),
                                                              Text(
                                                                  '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ',
                                                                  style: TextStyle(
                                                                      color: Colors
                                                                          .white,
                                                                      fontFamily:
                                                                          'NotoSansThai')),
                                                            ],
                                                          ),
                                                        );
                                                      },
                                                    ),
                                                  ),
                                                  Positioned(
                                                    top: 40,
                                                    right: 20,
                                                    child: IconButton(
                                                      icon: const Icon(
                                                          Icons.close,
                                                          color: Colors.white,
                                                          size: 30),
                                                      onPressed: () =>
                                                          Navigator.of(context)
                                                              .pop(),
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                          );
                                        },
                                        child: const Row(
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            Text(
                                              'üì∑',
                                              style: TextStyle(fontSize: 13),
                                            ),
                                            SizedBox(width: 6),
                                            Text(
                                              '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
                                              style: TextStyle(
                                                fontSize: 14,
                                                fontWeight: FontWeight.w400,
                                                color: Colors.black87,
                                                fontFamily: 'NotoSansThai',
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ],

                                    // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 6: ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå
                                    if (timestamp != null) ...[
                                      const SizedBox(height: 5),
                                      Row(
                                        children: [
                                          const Text(
                                            'üóìÔ∏è',
                                            style: TextStyle(
                                              fontSize: 13,
                                              fontFamily: 'NotoSansThai',
                                              fontWeight:
                                                  FontWeight.w400, // Regular
                                            ),
                                          ),
                                          const SizedBox(width: 6),
                                          Text(
                                            DateTimeFormatters.formatDate(
                                                timestamp),
                                            style: const TextStyle(
                                              fontSize: 13,
                                              color: Colors.black,
                                              fontFamily: 'NotoSansThai',
                                              fontWeight:
                                                  FontWeight.w400, // Regular
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],

                                    // ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 7: ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™
                                    const SizedBox(height: 5),
                                    Row(
                                      children: [
                                        const Icon(
                                          Icons.person_outline,
                                          size: 16,
                                          color: Colors.red,
                                        ),
                                        const SizedBox(width: 6),
                                        Text(
                                          _getMaskedPosterName(data),
                                          style: const TextStyle(
                                            fontSize: 13,
                                            color: Colors.black,
                                            fontFamily: 'NotoSansThai',
                                            fontWeight:
                                                FontWeight.w400, // Regular
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),

                              // Comment button for all posts (moved to bottom)
                              const Divider(height: 1),
                              FutureBuilder<QuerySnapshot>(
                                future: FirebaseFirestore.instance
                                    .collection('reports')
                                    .doc(reportId)
                                    .collection('comments')
                                    .get(),
                                builder: (context, snapshot) {
                                  int commentCount = 0;
                                  if (snapshot.hasData) {
                                    commentCount = snapshot.data!.docs.length;
                                  }
                                  return Padding(
                                    padding:
                                        const EdgeInsets.symmetric(vertical: 9),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.end,
                                      children: [
                                        // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏î‡πâ
                                        const Spacer(),
                                        // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏î‡πÑ‡∏î‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
                                        InkWell(
                                          onTap: () => _showCommentSheet(
                                              reportId, title, category),
                                          borderRadius:
                                              BorderRadius.circular(8),
                                          child: Padding(
                                            padding: const EdgeInsets.symmetric(
                                                horizontal: 8, vertical: 4),
                                            child: Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                const Icon(
                                                  Icons.chat_bubble_outline,
                                                  size: 16,
                                                  color: Color(0xFFFF9800),
                                                ),
                                                const SizedBox(width: 4),
                                                const Text(
                                                  '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô',
                                                  style: TextStyle(
                                                    color: Color(0xFFFF9800),
                                                    fontWeight: FontWeight.w200,
                                                    fontSize: 14,
                                                    fontFamily: 'NotoSansThai',
                                                  ),
                                                ),
                                                if (commentCount > 0) ...[
                                                  const SizedBox(width: 0),
                                                  Text(
                                                    ' ($commentCount)',
                                                    style: const TextStyle(
                                                      color: Color(0xFFFF9800),
                                                      fontSize: 14,
                                                      fontWeight:
                                                          FontWeight.bold,
                                                    ),
                                                  ),
                                                ],
                                              ],
                                            ),
                                          ),
                                        ),
                                        const SizedBox(
                                            width: 16), // ‡πÄ‡∏û‡∏¥‡πà‡∏° margin ‡∏Ç‡∏ß‡∏≤
                                      ],
                                    ),
                                  );
                                },
                              ),
                            ],
                          ),
                        );
                      },
                    ),
            ),
          ),
        ],
      ),
    );
  }
}
