import 'package:flutter/material.dart';
import '../services/sound_manager.dart';

class SoundSettingsScreen extends StatefulWidget {
  const SoundSettingsScreen({super.key});

  @override
  State<SoundSettingsScreen> createState() => _SoundSettingsScreenState();
}

class _SoundSettingsScreenState extends State<SoundSettingsScreen> {
  final SoundManager _soundManager = SoundManager();
  late AlertSoundType _selectedSoundType;
  late bool _isSoundEnabled;

  @override
  void initState() {
    super.initState();
    _selectedSoundType = _soundManager.currentSoundType;
    _isSoundEnabled = _soundManager.isSoundEnabled;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor:
          const Color(0xFFEDF0F7), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö list screen
      appBar: AppBar(
        title: const Text(
          '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
          style: TextStyle(
            fontFamily: 'NotoSansThai',
            fontWeight: FontWeight.w600,
            color: Colors.black, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
          ),
        ),
        centerTitle: true, // ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á
        backgroundColor: const Color(
            0xFFFDC621), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö list screen
        elevation: 0,
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back_ios,
            color: Colors.black, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: SingleChildScrollView(
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Container ‡πÄ‡∏õ‡πá‡∏ô SingleChildScrollView
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            Card(
              child: SwitchListTile(
                title: const Text(
                  '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
                  style: TextStyle(
                      fontFamily: 'NotoSansThai', fontWeight: FontWeight.bold),
                ),
                subtitle: const Text(
                  '‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                  style: TextStyle(fontFamily: 'NotoSansThai'),
                ),
                value: _isSoundEnabled,
                onChanged: (value) async {
                  setState(() {
                    _isSoundEnabled = value;
                  });
                  await _soundManager.setSoundEnabled(value);
                },
                secondary: Icon(
                  _isSoundEnabled ? Icons.volume_up : Icons.volume_off,
                  color: const Color(0xFF1158F2),
                ),
              ),
            ),

            const SizedBox(height: 16),

            // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            const Text(
              'üîä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
              style: TextStyle(
                fontFamily: 'NotoSansThai',
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.black87, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°
              ),
            ),

            const SizedBox(height: 12),

            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Expanded ‡πÄ‡∏õ‡πá‡∏ô Column ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ scroll ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤
            ...AlertSoundType.values.map((soundType) {
              return Card(
                margin: const EdgeInsets.only(bottom: 8),
                child: ListTile(
                  leading: Icon(
                    _getSoundIcon(soundType),
                    size: 24,
                    color: const Color(0xFF1158F2),
                  ),
                  title: Text(
                    soundType.displayName,
                    style: const TextStyle(
                      fontFamily: 'NotoSansThai',
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  subtitle: Text(
                    _getSoundDescription(soundType),
                    style: const TextStyle(fontFamily: 'NotoSansThai'),
                  ),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                      IconButton(
                        icon: const Icon(Icons.play_arrow),
                        onPressed: _isSoundEnabled
                            ? () => _testSound(soundType)
                            : null,
                        tooltip: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
                      ),
                      // Radio button
                      Radio<AlertSoundType>(
                        value: soundType,
                        groupValue: _selectedSoundType,
                        onChanged: _isSoundEnabled
                            ? (AlertSoundType? value) async {
                                if (value != null) {
                                  setState(() {
                                    _selectedSoundType = value;
                                  });
                                  await _soundManager.setSoundType(value);
                                }
                              }
                            : null,
                      ),
                    ],
                  ),
                ),
              );
            }).toList(),

            const SizedBox(height: 16),

            // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
            Card(
              color: Colors.blue.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
                      style: TextStyle(
                        fontFamily: 'NotoSansThai',
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      '‚Ä¢ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡∏¢‡∏≤‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n'
                      '‚Ä¢ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ö‡∏µ‡πä‡∏ö/‡∏£‡∏∞‡∏Ü‡∏±‡∏á: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö\n'
                      '‚Ä¢ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô',
                      style: TextStyle(fontFamily: 'NotoSansThai'),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _getSoundDescription(AlertSoundType soundType) {
    switch (soundType) {
      case AlertSoundType.none:
        return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏ô‡∏¥‡∏ó';
      case AlertSoundType.beep:
        return '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ö‡∏µ‡πä‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢';
      case AlertSoundType.warning:
        return '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏ã‡πÄ‡∏£‡∏ô';
      case AlertSoundType.tts:
        return '‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢';
    }
  }

  IconData _getSoundIcon(AlertSoundType soundType) {
    switch (soundType) {
      case AlertSoundType.none:
        return Icons.volume_off;
      case AlertSoundType.beep:
        return Icons.volume_up;
      case AlertSoundType.warning:
        return Icons.warning;
      case AlertSoundType.tts:
        return Icons.record_voice_over;
    }
  }

  Future<void> _testSound(AlertSoundType soundType) async {
    try {
      await _soundManager.testSound(soundType);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${soundType.displayName}',
              style: const TextStyle(fontFamily: 'NotoSansThai'),
            ),
            duration: const Duration(seconds: 2),
            backgroundColor: const Color(0xFF4CAF50),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: $e',
              style: const TextStyle(fontFamily: 'NotoSansThai'),
            ),
            duration: const Duration(seconds: 3),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
