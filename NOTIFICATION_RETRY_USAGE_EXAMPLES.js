/**
 * üîî **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Notification Retry System**
 * 
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Retry ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
 * ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô Frontend (Flutter) ‡πÅ‡∏•‡∏∞ Backend (Cloud Functions)
 */

// ===== FRONTEND (Flutter) Usage =====

/*
// 1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÉ‡∏ô main.dart)
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Notification ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry
  await NotificationService.initialize();
  
  runApp(MyApp());
}

// 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Retry System
void checkRetryStatus() {
  final status = NotificationService.retryStatus;
  print('Retry Status: $status');
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:
  // {
  //   'isRefreshing': false,
  //   'retryAttempts': 0,
  //   'maxRetryAttempts': 3,
  //   'queueSize': 0,
  //   'hasActiveTimer': false
  // }
}

// 3. ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Refresh Token (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug)
Future<void> debugForceRefresh() async {
  await NotificationService.forceTokenRefresh();
  print('Force refresh completed');
}

// 4. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Retry Queue ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
Future<void> debugProcessQueue() async {
  await NotificationService.forceProcessRetryQueue();
  print('Manual queue processing completed');
}

// 5. ‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á Retry Queue
void debugClearQueue() {
  NotificationService.clearRetryQueue();
  print('Retry queue cleared');
}

// 6. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ Login/Logout
class AuthenticationManager {
  static Future<void> signIn() async {
    // ... ‡∏Å‡∏≤‡∏£ login ...
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Token ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Login
    await NotificationService.updateTokenOnLogin();
  }
  
  static Future<void> signOut() async {
    // ‡∏•‡∏ö Token ‡∏Å‡πà‡∏≠‡∏ô Logout
    await NotificationService.removeTokenOnLogout();
    
    // ... ‡∏Å‡∏≤‡∏£ logout ...
  }
}

// 7. ‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á Notification Events
class NotificationListener extends StatefulWidget {
  @override
  _NotificationListenerState createState() => _NotificationListenerState();
}

class _NotificationListenerState extends State<NotificationListener> {
  late StreamSubscription<RemoteMessage> _messageSubscription;

  @override
  void initState() {
    super.initState();
    
    // ‡∏ü‡∏±‡∏á Notification ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    _messageSubscription = NotificationService.onMessageReceived.listen(
      (RemoteMessage message) {
        print('Received notification: ${message.notification?.title}');
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ notification ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      },
    );
  }

  @override
  void dispose() {
    _messageSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      // UI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    );
  }
}
*/

// ===== BACKEND (Cloud Functions) Usage =====

/*
const { sendNotificationWithRetry } = require('./notification_retry');

// 1. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
exports.sendNewPostNotification = functions.firestore
  .document('reports/{reportId}')
  .onCreate(async (snapshot, context) => {
    try {
      const reportData = snapshot.data();
      const reporterId = reportData.userId;

      // ‡∏î‡∏∂‡∏á FCM Tokens ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const tokensSnapshot = await admin.firestore()
        .collection('user_tokens')
        .where('userId', '!=', reporterId) // ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡πÇ‡∏û‡∏™
        .where('isActive', '==', true)
        .get();

      const tokens = tokensSnapshot.docs.map(doc => doc.data().fcmToken);

      if (tokens.length === 0) {
        console.log('No tokens to send notification to');
        return;
      }

      // ‡∏™‡πà‡∏á Notification ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry Logic
      const result = await sendNotificationWithRetry(
        {
          notification: {
            title: '‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà!',
            body: reportData.description.substring(0, 100)
          },
          data: {
            type: 'new_post',
            reportId: context.params.reportId,
            category: reportData.category
          }
        },
        tokens,
        'new_post'
      );

      console.log('Notification result:', result);

    } catch (error) {
      console.error('Error sending new post notification:', error);
    }
  });

// 2. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
exports.sendNewCommentNotification = functions.firestore
  .document('reports/{reportId}/comments/{commentId}')
  .onCreate(async (snapshot, context) => {
    try {
      const commentData = snapshot.data();
      const reportId = context.params.reportId;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°
      const reportDoc = await admin.firestore()
        .collection('reports')
        .doc(reportId)
        .get();

      if (!reportDoc.exists) return;

      const reportData = reportDoc.data();
      const postOwnerId = reportData.userId;
      const commenterId = commentData.userId;

      // ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
      if (postOwnerId === commenterId) return;

      // ‡∏î‡∏∂‡∏á FCM Token ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
      const tokenDoc = await admin.firestore()
        .collection('user_tokens')
        .where('userId', '==', postOwnerId)
        .where('isActive', '==', true)
        .limit(1)
        .get();

      if (tokenDoc.empty) {
        console.log('No active token for post owner');
        return;
      }

      const token = tokenDoc.docs[0].data().fcmToken;

      // ‡∏™‡πà‡∏á Notification ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry Logic
      const result = await sendNotificationWithRetry(
        {
          notification: {
            title: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà!',
            body: `${commentData.displayName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}: ${commentData.comment.substring(0, 50)}...`
          },
          data: {
            type: 'new_comment',
            reportId: reportId,
            commentId: context.params.commentId
          }
        },
        [token],
        'new_comment'
      );

      console.log('Comment notification result:', result);

    } catch (error) {
      console.error('Error sending comment notification:', error);
    }
  });

// 3. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Notification ‡πÅ‡∏ö‡∏ö Batch
exports.sendBulkNotification = functions.https.onCall(async (data, context) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (!context.auth) {
      throw new functions.https.HttpsError('unauthenticated', 'User must be authenticated');
    }

    const { title, body, targetUserIds, notificationType } = data;

    // ‡∏î‡∏∂‡∏á Tokens ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    const tokensSnapshot = await admin.firestore()
      .collection('user_tokens')
      .where('userId', 'in', targetUserIds)
      .where('isActive', '==', true)
      .get();

    const tokens = tokensSnapshot.docs.map(doc => doc.data().fcmToken);

    if (tokens.length === 0) {
      return { success: false, message: 'No active tokens found' };
    }

    // ‡∏™‡πà‡∏á Notification ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry Logic
    const result = await sendNotificationWithRetry(
      {
        notification: { title, body },
        data: {
          type: notificationType || 'general',
          timestamp: Date.now().toString()
        }
      },
      tokens,
      'bulk_notification'
    );

    return {
      success: true,
      result: result,
      tokensProcessed: tokens.length
    };

  } catch (error) {
    console.error('Error sending bulk notification:', error);
    throw new functions.https.HttpsError('internal', 'Failed to send notification');
  }
});
*/

// ===== ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firestore Security Rules =====

/*
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ‡∏Å‡∏é‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User Tokens
    match /user_tokens/{tokenId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // ‡∏Å‡∏é‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Notification Retry Queue (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Cloud Functions)
    match /notification_retry_queue/{entryId} {
      allow read, write: if false; // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Cloud Functions ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    }
    
    // ‡∏Å‡∏é‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Reports ‡πÅ‡∏•‡∏∞ Comments
    match /reports/{reportId} {
      allow read: if true; // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
      allow write: if request.auth != null;
      
      match /comments/{commentId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }
  }
}
*/

// ===== ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞ Deploy =====

/*
1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies:
   npm install firebase-functions firebase-admin

2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå notification_retry.js ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå functions/

3. ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå functions/index.js:
   const notificationRetry = require('./notification_retry');

4. Deploy Cloud Functions:
   firebase deploy --only functions

5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firestore Security Rules:
   firebase deploy --only firestore:rules

6. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Flutter Package (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ):
   flutter pub add firebase_messaging shared_preferences

7. ‡πÄ‡∏û‡∏¥‡πà‡∏° Permission ‡πÉ‡∏ô AndroidManifest.xml:
   <uses-permission android:name="android.permission.WAKE_LOCK" />
   <uses-permission android:name="android.permission.VIBRATE" />
*/

// ===== ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö =====

/*
1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Token Refresh:
   - ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ refresh token

2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Retry System:
   - ‡∏™‡πà‡∏á notification ‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ retry queue

3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Invalid Token Cleanup:
   - ‡∏•‡∏ö‡πÅ‡∏≠‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ invalid token ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cloud Functions Logs:
   firebase functions:log --only processRetryQueue,cleanupRetryQueue
*/

module.exports = {
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô comment ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
};
