// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
const admin = require('firebase-admin');

// Initialize Firebase Admin (‡πÉ‡∏ä‡πâ default credentials)
try {
  admin.initializeApp();
  console.log('‚úÖ Firebase Admin initialized successfully');
} catch (error) {
  console.log('‚ùå Firebase Admin initialization error:', error.message);
  process.exit(1);
}

async function testNotificationSystem() {
  try {
    console.log('üîç === TESTING NOTIFICATION SYSTEM ===');
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• reports ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    console.log('\n1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reports ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...');
    const reportsSnapshot = await admin.firestore()
      .collection('reports')
      .orderBy('timestamp', 'desc')
      .limit(5)
      .get();
    
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô reports ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${reportsSnapshot.size}`);
    
    reportsSnapshot.forEach((doc, index) => {
      const data = doc.data();
      console.log(`\nüìÑ Report ${index + 1} (ID: ${doc.id}):`);
      console.log(`   Title: ${data.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠'}`);
      console.log(`   Description: ${data.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}`);
      console.log(`   Timestamp: ${data.timestamp ? new Date(data.timestamp.seconds * 1000).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤'}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location
      if (data.lat && data.lng) {
        console.log(`   ‚úÖ Location (lat/lng): ${data.lat}, ${data.lng}`);
      } else if (data.location && data.location.latitude && data.location.longitude) {
        console.log(`   ‚úÖ Location (object): ${data.location.latitude}, ${data.location.longitude}`);
      } else {
        console.log(`   ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• location ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!`);
        console.log(`   üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á report ‡∏ô‡∏µ‡πâ:`, JSON.stringify(data, null, 2));
      }
    });
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification logs
    console.log('\n\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification logs...');
    const notificationLogsSnapshot = await admin.firestore()
      .collection('notification_logs')
      .orderBy('timestamp', 'desc')
      .limit(3)
      .get();
    
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô notification logs: ${notificationLogsSnapshot.size}`);
    
    notificationLogsSnapshot.forEach((doc, index) => {
      const data = doc.data();
      console.log(`\nüìù Notification Log ${index + 1} (ID: ${doc.id}):`);
      console.log(`   Report ID: ${data.reportId}`);
      console.log(`   Type: ${data.type}`);
      console.log(`   Topics: ${data.topics ? data.topics.join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
      console.log(`   Success: ${data.summary ? data.summary.success_count : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`);
      console.log(`   Failed: ${data.summary ? data.summary.fail_count : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`);
      console.log(`   Timestamp: ${data.timestamp ? new Date(data.timestamp.seconds * 1000).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤'}`);
    });
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification errors
    console.log('\n\n3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö notification errors...');
    const errorLogsSnapshot = await admin.firestore()
      .collection('notification_errors')
      .orderBy('timestamp', 'desc')
      .limit(3)
      .get();
    
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô notification errors: ${errorLogsSnapshot.size}`);
    
    errorLogsSnapshot.forEach((doc, index) => {
      const data = doc.data();
      console.log(`\n‚ùå Notification Error ${index + 1} (ID: ${doc.id}):`);
      console.log(`   Report ID: ${data.reportId}`);
      console.log(`   Error: ${data.error}`);
      console.log(`   Timestamp: ${data.timestamp ? new Date(data.timestamp.seconds * 1000).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤'}`);
    });
    
    console.log('\nüéâ === TESTING COMPLETE ===');
    
  } catch (error) {
    console.error('‚ùå Error during testing:', error);
  } finally {
    process.exit(0);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testNotificationSystem();
