// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rate limiting
// ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå firebase_service.dart

static Future<bool> canUserPostToday(String userId) async {
  try {
    final now = DateTime.now();
    final startOfDay = DateTime(now.year, now.month, now.day);
    
    print('üîç Checking daily post limit for user: $userId');
    print('‚è∞ Check range: ${startOfDay.toIso8601String()} to ${now.toIso8601String()}');

    // Query ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ composite index
    final querySnapshot = await _firestore
        .collection(_collection)
        .where('userId', isEqualTo: userId)
        .where('timestamp', isGreaterThanOrEqualTo: Timestamp.fromDate(startOfDay))
        .get()
        .timeout(const Duration(seconds: 8));

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ status = 'active' ‡∏ù‡∏±‡πà‡∏á client
    final activePosts = querySnapshot.docs.where((doc) {
      final data = doc.data() as Map<String, dynamic>;
      return data['status'] == 'active';
    }).toList();

    final postsToday = activePosts.length;
    print('üìä Posts today: $postsToday / $_maxPostsPerDay');

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
    if (postsToday >= 3 && postsToday < _maxPostsPerDay) {
      print('‚ö†Ô∏è Warning: User approaching daily limit ($postsToday/${_maxPostsPerDay})');
    }

    final canPost = postsToday < _maxPostsPerDay;
    print(canPost ? '‚úÖ User can post' : 'üö´ Daily limit exceeded');
    
    return canPost;
  } catch (e) {
    print('‚ùå Error checking daily post limit: $e');
    
    // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏ß‡πà‡∏≤
    final errorMessage = e.toString().toLowerCase();
    
    if (errorMessage.contains('permission-denied') ||
        errorMessage.contains('unauthorized')) {
      print('üö´ Permission denied - blocking post');
      throw Exception('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà');
    }
    
    if (errorMessage.contains('failed-precondition') ||
        errorMessage.contains('requires an index') ||
        errorMessage.contains('index') ||
        errorMessage.contains('composite')) {
      print('üîß Index missing - allowing post temporarily');
      print('üìã Please wait 1-2 minutes for index to be ready');
      return true; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ index ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
    }
    
    if (errorMessage.contains('timeout') ||
        errorMessage.contains('deadline-exceeded')) {
      print('‚è∞ Timeout - allowing post');
      return true; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠ timeout
    }
    
    if (errorMessage.contains('network') ||
        errorMessage.contains('unavailable')) {
      print('üåê Network issue - allowing post');
      return true; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    print('‚ö†Ô∏è Unknown error - blocking post for security: $e');
    throw Exception('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
  }
}
