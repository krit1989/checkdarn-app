const admin = require('firebase-admin');

// Initialize Firebase Admin
const serviceAccount = require('./service-account-key.json'); // ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Firebase Console
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

/**
 * üß™ **‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Topic Notification**
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
 */
async function testTopicNotification() {
  try {
    console.log('üß™ Testing Topic Notification System...');

    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á
    const testData = {
      reportLat: 13.7563,
      reportLng: 100.5018,
      category: 'accident',
      description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö Topic - ‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡∏ñ‡∏ä‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏ñ‡∏ô‡∏ô‡∏û‡∏ç‡∏≤‡πÑ‡∏ó',
      location: '‡∏ñ‡∏ô‡∏ô‡∏û‡∏ç‡∏≤‡πÑ‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏∏‡πà‡∏á‡∏û‡∏ç‡∏≤‡πÑ‡∏ó ‡πÄ‡∏Ç‡∏ï‡∏£‡∏≤‡∏ä‡πÄ‡∏ó‡∏ß‡∏µ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
      province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      district: '‡πÄ‡∏Ç‡∏ï‡∏£‡∏≤‡∏ä‡πÄ‡∏ó‡∏ß‡∏µ',
      userName: 'TestUser123'
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á topic names ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏£‡∏±‡∏®‡∏°‡∏µ 30 ‡∏Å‡∏°.)
    const targetTopics = generateLocationTopics(testData.reportLat, testData.reportLng, 30);
    
    console.log(`üéØ ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${targetTopics.length} topics:`);
    targetTopics.forEach(topic => console.log(`   - ${topic}`));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    const categoryEmoji = 'üöó';
    const categoryName = '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏';
    const locationInfo = `${testData.district}, ${testData.province}`;
    
    const notificationTitle = `${categoryEmoji} ${categoryName} ${locationInfo}`;
    const maskedPosterName = `${testData.userName.substring(0, 4)} *******`;
    const notificationBody = `${testData.description}\n${maskedPosterName}`;

    console.log(`üìù Notification Preview:`);
    console.log(`   Title: "${notificationTitle}"`);
    console.log(`   Body: "${notificationBody}"`);

    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ topic
    const results = [];
    
    for (const topic of targetTopics.slice(0, 3)) { // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà 3 topics ‡πÅ‡∏£‡∏Å
      try {
        const message = {
          topic: topic,
          notification: {
            title: notificationTitle,
            body: notificationBody,
          },
          data: {
            type: 'test_post',
            category: testData.category,
            location: testData.location,
            action: 'open_post',
          }
        };

        console.log(`üì§ Sending to topic: ${topic}`);
        const response = await admin.messaging().send(message);
        console.log(`‚úÖ Success: ${response}`);
        results.push({ topic, success: true, messageId: response });

      } catch (error) {
        console.error(`‚ùå Failed to send to topic ${topic}:`, error.message);
        results.push({ topic, success: false, error: error.message });
      }
    }

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    const successCount = results.filter(r => r.success).length;
    const failureCount = results.filter(r => !r.success).length;
    
    console.log(`\nüìä Test Results:`);
    console.log(`   ‚úÖ Success: ${successCount}/${results.length} topics`);
    console.log(`   ‚ùå Failed: ${failureCount} topics`);
    console.log(`   üí∞ Estimated cost per post: $0.0000171 (vs $0.192 for mass broadcasting)`);
    console.log(`   üíµ Total savings: 99.9%`);
    
    if (successCount > 0) {
      console.log(`\nüéâ Topic Notification System is working!`);
      console.log(`‚úÖ Ready for production deployment`);
    } else {
      console.log(`\n‚ö†Ô∏è All topic sends failed - check configuration`);
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

/**
 * üó∫Ô∏è **‡∏™‡∏£‡πâ‡∏≤‡∏á Topic Names ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏®‡∏°‡∏µ**
 */
function generateLocationTopics(centerLat, centerLng, radiusKm) {
  const topics = [];
  const gridSizeKm = 20;
  const gridCount = Math.ceil(radiusKm / gridSizeKm);
  
  for (let i = -gridCount; i <= gridCount; i++) {
    for (let j = -gridCount; j <= gridCount; j++) {
      const offsetLat = centerLat + (i * gridSizeKm / 111);
      const offsetLng = centerLng + (j * gridSizeKm / (111 * Math.cos(centerLat * Math.PI / 180)));
      
      const distance = calculateDistance(centerLat, centerLng, offsetLat, offsetLng);
      
      if (distance <= radiusKm) {
        const gridLat = Math.round(offsetLat * 100);
        const gridLng = Math.round(offsetLng * 100);
        const topicName = `th_${gridLat}_${gridLng}_${gridSizeKm}km`;
        topics.push(topicName);
      }
    }
  }
  
  return topics;
}

/**
 * üìè **‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á**
 */
function calculateDistance(lat1, lng1, lat2, lng2) {
  const R = 6371;
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLng = (lng2 - lng1) * Math.PI / 180;
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testTopicNotification();
