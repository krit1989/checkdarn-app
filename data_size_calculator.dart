/// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Camera Report System
/// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3,000 ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß

void main() {
  print('üìä === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Camera Report System ===');
  print('üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: 3,000 ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß\n');

  // === 1. ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ===

  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á CameraReport
  final singleReportSize = calculateSingleReportSize();
  print('üìÑ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:');
  print('   ${singleReportSize.toStringAsFixed(2)} KB\n');

  // === 2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏ß‡∏ï (votes) ===

  // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 5 ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  final averageVotesPerReport = 5;
  final singleVoteSize = calculateSingleVoteSize();
  final totalVotesSize = 3000 * averageVotesPerReport * singleVoteSize;

  print('üó≥Ô∏è ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏ß‡∏ï:');
  print('   ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: $averageVotesPerReport ‡πÇ‡∏´‡∏ß‡∏ï');
  print('   ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏´‡∏ß‡∏ï: ${singleVoteSize.toStringAsFixed(2)} KB');
  print(
      '   ‡∏£‡∏ß‡∏°‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${(totalVotesSize / 1024).toStringAsFixed(2)} MB\n');

  // === 3. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ===

  // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ 500 ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°
  final numberOfUsers = 500;
  final userStatsSize = calculateUserStatsSize();
  final totalUserStatsSize = numberOfUsers * userStatsSize;

  print('üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:');
  print('   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: $numberOfUsers ‡∏Ñ‡∏ô');
  print('   ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userStatsSize.toStringAsFixed(2)} KB');
  print(
      '   ‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${(totalUserStatsSize / 1024).toStringAsFixed(2)} MB\n');

  // === 4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å ===

  // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ 70% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô = 2,100 ‡∏Å‡∏•‡πâ‡∏≠‡∏á
  final verifiedCameras = (3000 * 0.7).round();
  final speedCameraSize = calculateSpeedCameraSize();
  final totalSpeedCamerasSize = verifiedCameras * speedCameraSize;

  print('üéØ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å:');
  print('   ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß: $verifiedCameras ‡∏ï‡∏±‡∏ß');
  print('   ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${speedCameraSize.toStringAsFixed(2)} KB');
  print(
      '   ‡∏£‡∏ß‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${(totalSpeedCamerasSize / 1024).toStringAsFixed(2)} MB\n');

  // === 5. ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏° ===

  final totalReportsSize = 3000 * singleReportSize;
  final grandTotal = totalReportsSize +
      totalVotesSize +
      totalUserStatsSize +
      totalSpeedCamerasSize;

  print('üìã === ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===');
  print(
      'üìÑ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (3,000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£): ${(totalReportsSize / 1024).toStringAsFixed(2)} MB');
  print(
      'üó≥Ô∏è ‡πÇ‡∏´‡∏ß‡∏ï (15,000 ‡πÇ‡∏´‡∏ß‡∏ï): ${(totalVotesSize / 1024).toStringAsFixed(2)} MB');
  print(
      'üë• ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (500 ‡∏Ñ‡∏ô): ${(totalUserStatsSize / 1024).toStringAsFixed(2)} MB');
  print(
      'üéØ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å (2,100 ‡∏ï‡∏±‡∏ß): ${(totalSpeedCamerasSize / 1024).toStringAsFixed(2)} MB');
  print('‚îÄ' * 50);
  print('üíæ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${(grandTotal / (1024 * 1024)).toStringAsFixed(2)} MB');

  if (grandTotal > 1024 * 1024) {
    print(
        'üíæ ‡∏´‡∏£‡∏∑‡∏≠: ${(grandTotal / (1024 * 1024 * 1024)).toStringAsFixed(3)} GB\n');
  } else {
    print('');
  }

  // === 6. ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ===

  print('üì± === ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î ===');
  final photoSize = 2.5; // MB per photo
  final songSize = 4.0; // MB per song
  final videoSize = 50.0; // MB per short video

  final totalMB = grandTotal / (1024 * 1024);
  print('üì∏ ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢: ${(totalMB / photoSize).toStringAsFixed(1)} ‡∏£‡∏π‡∏õ');
  print('üéµ ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏á: ${(totalMB / songSize).toStringAsFixed(1)} ‡πÄ‡∏û‡∏•‡∏á');
  print(
      'üé¨ ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏±‡πâ‡∏ô: ${(totalMB / videoSize).toStringAsFixed(1)} ‡∏Ñ‡∏•‡∏¥‡∏õ\n');

  // === 7. ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ Firebase ===

  print('üí∞ === ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ Firebase ===');
  final firestoreReadCostPer1000 = 0.06; // USD per 1000 reads
  final firestoreWriteCostPer1000 = 0.18; // USD per 1000 writes
  final storageCostPerGB = 0.026; // USD per GB per month

  // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  final monthlyReads = 50000; // reads per month
  final monthlyWrites = 10000; // writes per month
  final storageGB = totalMB / 1024;

  final readCost = (monthlyReads / 1000) * firestoreReadCostPer1000;
  final writeCost = (monthlyWrites / 1000) * firestoreWriteCostPer1000;
  final storageCost = storageGB * storageCostPerGB;
  final totalMonthlyCost = readCost + writeCost + storageCost;

  print('üìñ ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: \$${readCost.toStringAsFixed(3)}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô');
  print('‚úçÔ∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: \$${writeCost.toStringAsFixed(3)}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô');
  print('üíæ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö: \$${storageCost.toStringAsFixed(3)}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô');
  print('‚îÄ' * 30);
  print('üíµ ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: \$${totalMonthlyCost.toStringAsFixed(2)}');
  print('üíµ ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏µ: \$${(totalMonthlyCost * 12).toStringAsFixed(2)}\n');

  // === 8. ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ ===

  print('üí° === ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ===');
  print('üóúÔ∏è ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á 30-50%');
  print('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
  print('üì¶ Index ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô query');
  print('‚ö° Cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å server');
  print('üîÑ Batch operations: ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô writes');
}

/// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (KB)
double calculateSingleReportSize() {
  // ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á CameraReport
  var size = 0.0;

  size += 36; // id (UUID string)
  size += 8; // latitude (double)
  size += 8; // longitude (double)
  size += 50; // roadName (average Thai road name)
  size += 4; // speedLimit (int)
  size += 28; // reportedBy (user ID)
  size += 24; // reportedAt (ISO 8601 string)
  size += 20; // type (enum string)
  size += 100; // description (optional, average)
  size += 150; // imageUrl (optional, average URL)
  size += 50; // tags (array of strings)
  size += 4; // upvotes (int)
  size += 4; // downvotes (int)
  size += 8; // confidenceScore (double)
  size += 15; // status (enum string)
  size += 24; // verifiedAt (optional ISO string)
  size += 28; // verifiedBy (optional user ID)

  // Firebase overhead (indexes, metadata)
  size += 50;

  return size / 1024; // Convert to KB
}

/// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÇ‡∏´‡∏ß‡∏ï 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (KB)
double calculateSingleVoteSize() {
  var size = 0.0;

  size += 36; // id (UUID)
  size += 36; // reportId
  size += 28; // userId
  size += 10; // voteType (upvote/downvote)
  size += 24; // votedAt (ISO string)
  size += 100; // comment (optional)

  // Firebase overhead
  size += 30;

  return size / 1024; // Convert to KB
}

/// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 1 ‡∏Ñ‡∏ô (KB)
double calculateUserStatsSize() {
  var size = 0.0;

  size += 28; // userId
  size += 4; // reports_submitted
  size += 4; // votes_submitted
  size += 4; // total_contributions
  size += 8; // last_activity (timestamp)

  // Firebase overhead
  size += 20;

  return size / 1024; // Convert to KB
}

/// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å 1 ‡∏ï‡∏±‡∏ß (KB)
double calculateSpeedCameraSize() {
  var size = 0.0;

  size += 36; // id
  size += 8; // latitude
  size += 8; // longitude
  size += 4; // speedLimit
  size += 50; // roadName
  size += 15; // type
  size += 5; // isActive (boolean)
  size += 100; // description
  size += 20; // source
  size += 36; // sourceReportId
  size += 24; // createdAt
  size += 24; // updatedAt

  // Firebase overhead
  size += 40;

  return size / 1024; // Convert to KB
}
